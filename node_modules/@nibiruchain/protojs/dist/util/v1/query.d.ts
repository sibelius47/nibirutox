import Long from "long";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "nibiru.util.v1";
export interface QueryModuleAccountsRequest {
}
export interface QueryModuleAccountsResponse {
    accounts: AccountWithBalance[];
}
export interface AccountWithBalance {
    name: string;
    address: string;
    balance: Coin[];
}
export declare const QueryModuleAccountsRequest: {
    encode(_: QueryModuleAccountsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryModuleAccountsRequest;
    fromJSON(_: any): QueryModuleAccountsRequest;
    toJSON(_: QueryModuleAccountsRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryModuleAccountsRequest;
};
export declare const QueryModuleAccountsResponse: {
    encode(message: QueryModuleAccountsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryModuleAccountsResponse;
    fromJSON(object: any): QueryModuleAccountsResponse;
    toJSON(message: QueryModuleAccountsResponse): unknown;
    fromPartial<I extends {
        accounts?: {
            name?: string | undefined;
            address?: string | undefined;
            balance?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        accounts?: ({
            name?: string | undefined;
            address?: string | undefined;
            balance?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] & ({
            name?: string | undefined;
            address?: string | undefined;
            balance?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } & {
            name?: string | undefined;
            address?: string | undefined;
            balance?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["accounts"][number]["balance"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["accounts"][number]["balance"], keyof {
                denom?: string | undefined;
                amount?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["accounts"][number], keyof AccountWithBalance>, never>)[] & Record<Exclude<keyof I["accounts"], keyof {
            name?: string | undefined;
            address?: string | undefined;
            balance?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "accounts">, never>>(object: I): QueryModuleAccountsResponse;
};
export declare const AccountWithBalance: {
    encode(message: AccountWithBalance, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountWithBalance;
    fromJSON(object: any): AccountWithBalance;
    toJSON(message: AccountWithBalance): unknown;
    fromPartial<I extends {
        name?: string | undefined;
        address?: string | undefined;
        balance?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        name?: string | undefined;
        address?: string | undefined;
        balance?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["balance"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["balance"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof AccountWithBalance>, never>>(object: I): AccountWithBalance;
};
/** Query defines the gRPC querier service. */
export interface Query {
    /** Queries the reserve assets in a given pool, identified by a token pair. */
    ModuleAccounts(request: QueryModuleAccountsRequest): Promise<QueryModuleAccountsResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    ModuleAccounts(request: QueryModuleAccountsRequest): Promise<QueryModuleAccountsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
//# sourceMappingURL=query.d.ts.map