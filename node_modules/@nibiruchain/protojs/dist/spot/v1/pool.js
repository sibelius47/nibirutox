"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pool = exports.PoolAsset = exports.PoolParams = exports.poolTypeToJSON = exports.poolTypeFromJSON = exports.PoolType = exports.protobufPackage = void 0;
/* eslint-disable */
const coin_1 = require("../../cosmos/base/v1beta1/coin");
const long_1 = __importDefault(require("long"));
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "nibiru.spot.v1";
/**
 * - `balancer`: Balancer are pools defined by the equation xy=k, extended by the weighs introduced by Balancer.
 * - `stableswap`: Stableswap pools are defined by a combination of constant-product and constant-sum pool
 */
var PoolType;
(function (PoolType) {
    PoolType[PoolType["BALANCER"] = 0] = "BALANCER";
    PoolType[PoolType["STABLESWAP"] = 1] = "STABLESWAP";
    PoolType[PoolType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PoolType = exports.PoolType || (exports.PoolType = {}));
function poolTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "BALANCER":
            return PoolType.BALANCER;
        case 1:
        case "STABLESWAP":
            return PoolType.STABLESWAP;
        case -1:
        case "UNRECOGNIZED":
        default:
            return PoolType.UNRECOGNIZED;
    }
}
exports.poolTypeFromJSON = poolTypeFromJSON;
function poolTypeToJSON(object) {
    switch (object) {
        case PoolType.BALANCER:
            return "BALANCER";
        case PoolType.STABLESWAP:
            return "STABLESWAP";
        case PoolType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.poolTypeToJSON = poolTypeToJSON;
function createBasePoolParams() {
    return { swapFee: "", exitFee: "", A: "", poolType: 0 };
}
exports.PoolParams = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.swapFee !== "") {
            writer.uint32(10).string(message.swapFee);
        }
        if (message.exitFee !== "") {
            writer.uint32(18).string(message.exitFee);
        }
        if (message.A !== "") {
            writer.uint32(26).string(message.A);
        }
        if (message.poolType !== 0) {
            writer.uint32(32).int32(message.poolType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePoolParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.swapFee = reader.string();
                    break;
                case 2:
                    message.exitFee = reader.string();
                    break;
                case 3:
                    message.A = reader.string();
                    break;
                case 4:
                    message.poolType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            swapFee: isSet(object.swapFee) ? String(object.swapFee) : "",
            exitFee: isSet(object.exitFee) ? String(object.exitFee) : "",
            A: isSet(object.A) ? String(object.A) : "",
            poolType: isSet(object.poolType) ? poolTypeFromJSON(object.poolType) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.swapFee !== undefined && (obj.swapFee = message.swapFee);
        message.exitFee !== undefined && (obj.exitFee = message.exitFee);
        message.A !== undefined && (obj.A = message.A);
        message.poolType !== undefined && (obj.poolType = poolTypeToJSON(message.poolType));
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBasePoolParams();
        message.swapFee = (_a = object.swapFee) !== null && _a !== void 0 ? _a : "";
        message.exitFee = (_b = object.exitFee) !== null && _b !== void 0 ? _b : "";
        message.A = (_c = object.A) !== null && _c !== void 0 ? _c : "";
        message.poolType = (_d = object.poolType) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBasePoolAsset() {
    return { token: undefined, weight: "" };
}
exports.PoolAsset = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.token !== undefined) {
            coin_1.Coin.encode(message.token, writer.uint32(10).fork()).ldelim();
        }
        if (message.weight !== "") {
            writer.uint32(18).string(message.weight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePoolAsset();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.token = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.weight = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            token: isSet(object.token) ? coin_1.Coin.fromJSON(object.token) : undefined,
            weight: isSet(object.weight) ? String(object.weight) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.token !== undefined &&
            (obj.token = message.token ? coin_1.Coin.toJSON(message.token) : undefined);
        message.weight !== undefined && (obj.weight = message.weight);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBasePoolAsset();
        message.token =
            object.token !== undefined && object.token !== null
                ? coin_1.Coin.fromPartial(object.token)
                : undefined;
        message.weight = (_a = object.weight) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBasePool() {
    return {
        id: long_1.default.UZERO,
        address: "",
        poolParams: undefined,
        poolAssets: [],
        totalWeight: "",
        totalShares: undefined,
    };
}
exports.Pool = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.id.isZero()) {
            writer.uint32(8).uint64(message.id);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        if (message.poolParams !== undefined) {
            exports.PoolParams.encode(message.poolParams, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.poolAssets) {
            exports.PoolAsset.encode(v, writer.uint32(34).fork()).ldelim();
        }
        if (message.totalWeight !== "") {
            writer.uint32(42).string(message.totalWeight);
        }
        if (message.totalShares !== undefined) {
            coin_1.Coin.encode(message.totalShares, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePool();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                case 2:
                    message.address = reader.string();
                    break;
                case 3:
                    message.poolParams = exports.PoolParams.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.poolAssets.push(exports.PoolAsset.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.totalWeight = reader.string();
                    break;
                case 6:
                    message.totalShares = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            id: isSet(object.id) ? long_1.default.fromValue(object.id) : long_1.default.UZERO,
            address: isSet(object.address) ? String(object.address) : "",
            poolParams: isSet(object.poolParams)
                ? exports.PoolParams.fromJSON(object.poolParams)
                : undefined,
            poolAssets: Array.isArray(object === null || object === void 0 ? void 0 : object.poolAssets)
                ? object.poolAssets.map((e) => exports.PoolAsset.fromJSON(e))
                : [],
            totalWeight: isSet(object.totalWeight) ? String(object.totalWeight) : "",
            totalShares: isSet(object.totalShares)
                ? coin_1.Coin.fromJSON(object.totalShares)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = (message.id || long_1.default.UZERO).toString());
        message.address !== undefined && (obj.address = message.address);
        message.poolParams !== undefined &&
            (obj.poolParams = message.poolParams
                ? exports.PoolParams.toJSON(message.poolParams)
                : undefined);
        if (message.poolAssets) {
            obj.poolAssets = message.poolAssets.map((e) => e ? exports.PoolAsset.toJSON(e) : undefined);
        }
        else {
            obj.poolAssets = [];
        }
        message.totalWeight !== undefined && (obj.totalWeight = message.totalWeight);
        message.totalShares !== undefined &&
            (obj.totalShares = message.totalShares
                ? coin_1.Coin.toJSON(message.totalShares)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePool();
        message.id =
            object.id !== undefined && object.id !== null
                ? long_1.default.fromValue(object.id)
                : long_1.default.UZERO;
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.poolParams =
            object.poolParams !== undefined && object.poolParams !== null
                ? exports.PoolParams.fromPartial(object.poolParams)
                : undefined;
        message.poolAssets = ((_b = object.poolAssets) === null || _b === void 0 ? void 0 : _b.map((e) => exports.PoolAsset.fromPartial(e))) || [];
        message.totalWeight = (_c = object.totalWeight) !== null && _c !== void 0 ? _c : "";
        message.totalShares =
            object.totalShares !== undefined && object.totalShares !== null
                ? coin_1.Coin.fromPartial(object.totalShares)
                : undefined;
        return message;
    },
};
if (_m0.util.Long !== long_1.default) {
    _m0.util.Long = long_1.default;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=pool.js.map