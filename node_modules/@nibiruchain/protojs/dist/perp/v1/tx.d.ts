import { Coin } from "../../cosmos/base/v1beta1/coin";
import { Position, Side } from "./state";
import Long from "long";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "nibiru.perp.v1";
/** MsgRemoveMargin: Msg to remove margin. */
export interface MsgRemoveMargin {
    sender: string;
    pair: string;
    margin?: Coin;
}
export interface MsgRemoveMarginResponse {
    /** tokens transferred back to the trader */
    marginOut?: Coin;
    /** the funding payment applied on this position interaction */
    fundingPayment: string;
    /** The resulting position */
    position?: Position;
}
/** MsgAddMargin: Msg to remove margin. */
export interface MsgAddMargin {
    sender: string;
    pair: string;
    margin?: Coin;
}
export interface MsgAddMarginResponse {
    fundingPayment: string;
    position?: Position;
}
export interface MsgMultiLiquidate {
    sender: string;
    liquidations: MsgMultiLiquidate_Liquidation[];
}
export interface MsgMultiLiquidate_Liquidation {
    pair: string;
    trader: string;
}
export interface MsgMultiLiquidateResponse {
    liquidations: MsgMultiLiquidateResponse_LiquidationResponse[];
}
export interface MsgMultiLiquidateResponse_LiquidationResponse {
    success: boolean;
    error: string;
    liquidatorFee?: Coin;
    /** perp ecosystem fund */
    perpEfFee?: Coin;
}
export interface MsgOpenPosition {
    sender: string;
    pair: string;
    side: Side;
    quoteAssetAmount: string;
    leverage: string;
    baseAssetAmountLimit: string;
}
export interface MsgOpenPositionResponse {
    position?: Position;
    /** The amount of quote assets exchanged. */
    exchangedNotionalValue: string;
    /** The amount of base assets exchanged. */
    exchangedPositionSize: string;
    /** The funding payment applied on this position change, measured in quote units. */
    fundingPayment: string;
    /** The amount of PnL realized on this position changed, measured in quote units. */
    realizedPnl: string;
    /** The unrealized PnL in the position after the position change, measured in quote units. */
    unrealizedPnlAfter: string;
    /**
     * The amount of margin the trader has to give to the vault.
     * A negative value means the vault pays the trader.
     */
    marginToVault: string;
    /** The position's notional value after the position change, measured in quote units. */
    positionNotional: string;
}
export interface MsgClosePosition {
    sender: string;
    pair: string;
}
export interface MsgClosePositionResponse {
    /** The amount of quote assets exchanged. */
    exchangedNotionalValue: string;
    /** The amount of base assets exchanged. */
    exchangedPositionSize: string;
    /** The funding payment applied on this position change, measured in quote units. */
    fundingPayment: string;
    /** The amount of PnL realized on this position changed, measured in quote units. */
    realizedPnl: string;
    /**
     * The amount of margin the trader receives after closing the position, from the vault.
     * Should never be negative.
     */
    marginToTrader: string;
}
export interface MsgDonateToEcosystemFund {
    sender: string;
    /** donation to the EF */
    donation?: Coin;
}
export interface MsgDonateToEcosystemFundResponse {
}
export declare const MsgRemoveMargin: {
    encode(message: MsgRemoveMargin, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveMargin;
    fromJSON(object: any): MsgRemoveMargin;
    toJSON(message: MsgRemoveMargin): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        pair?: string | undefined;
        margin?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        sender?: string | undefined;
        pair?: string | undefined;
        margin?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["margin"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgRemoveMargin>, never>>(object: I): MsgRemoveMargin;
};
export declare const MsgRemoveMarginResponse: {
    encode(message: MsgRemoveMarginResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveMarginResponse;
    fromJSON(object: any): MsgRemoveMarginResponse;
    toJSON(message: MsgRemoveMarginResponse): unknown;
    fromPartial<I extends {
        marginOut?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        fundingPayment?: string | undefined;
        position?: {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            blockNumber?: string | number | Long.Long | undefined;
        } | undefined;
    } & {
        marginOut?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["marginOut"], keyof Coin>, never>) | undefined;
        fundingPayment?: string | undefined;
        position?: ({
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            blockNumber?: string | number | Long.Long | undefined;
        } & {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            blockNumber?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["position"]["blockNumber"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["position"], keyof Position>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgRemoveMarginResponse>, never>>(object: I): MsgRemoveMarginResponse;
};
export declare const MsgAddMargin: {
    encode(message: MsgAddMargin, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddMargin;
    fromJSON(object: any): MsgAddMargin;
    toJSON(message: MsgAddMargin): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        pair?: string | undefined;
        margin?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        sender?: string | undefined;
        pair?: string | undefined;
        margin?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["margin"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgAddMargin>, never>>(object: I): MsgAddMargin;
};
export declare const MsgAddMarginResponse: {
    encode(message: MsgAddMarginResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddMarginResponse;
    fromJSON(object: any): MsgAddMarginResponse;
    toJSON(message: MsgAddMarginResponse): unknown;
    fromPartial<I extends {
        fundingPayment?: string | undefined;
        position?: {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            blockNumber?: string | number | Long.Long | undefined;
        } | undefined;
    } & {
        fundingPayment?: string | undefined;
        position?: ({
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            blockNumber?: string | number | Long.Long | undefined;
        } & {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            blockNumber?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["position"]["blockNumber"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["position"], keyof Position>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgAddMarginResponse>, never>>(object: I): MsgAddMarginResponse;
};
export declare const MsgMultiLiquidate: {
    encode(message: MsgMultiLiquidate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgMultiLiquidate;
    fromJSON(object: any): MsgMultiLiquidate;
    toJSON(message: MsgMultiLiquidate): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        liquidations?: {
            pair?: string | undefined;
            trader?: string | undefined;
        }[] | undefined;
    } & {
        sender?: string | undefined;
        liquidations?: ({
            pair?: string | undefined;
            trader?: string | undefined;
        }[] & ({
            pair?: string | undefined;
            trader?: string | undefined;
        } & {
            pair?: string | undefined;
            trader?: string | undefined;
        } & Record<Exclude<keyof I["liquidations"][number], keyof MsgMultiLiquidate_Liquidation>, never>)[] & Record<Exclude<keyof I["liquidations"], keyof {
            pair?: string | undefined;
            trader?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgMultiLiquidate>, never>>(object: I): MsgMultiLiquidate;
};
export declare const MsgMultiLiquidate_Liquidation: {
    encode(message: MsgMultiLiquidate_Liquidation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgMultiLiquidate_Liquidation;
    fromJSON(object: any): MsgMultiLiquidate_Liquidation;
    toJSON(message: MsgMultiLiquidate_Liquidation): unknown;
    fromPartial<I extends {
        pair?: string | undefined;
        trader?: string | undefined;
    } & {
        pair?: string | undefined;
        trader?: string | undefined;
    } & Record<Exclude<keyof I, keyof MsgMultiLiquidate_Liquidation>, never>>(object: I): MsgMultiLiquidate_Liquidation;
};
export declare const MsgMultiLiquidateResponse: {
    encode(message: MsgMultiLiquidateResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgMultiLiquidateResponse;
    fromJSON(object: any): MsgMultiLiquidateResponse;
    toJSON(message: MsgMultiLiquidateResponse): unknown;
    fromPartial<I extends {
        liquidations?: {
            success?: boolean | undefined;
            error?: string | undefined;
            liquidatorFee?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            perpEfFee?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        liquidations?: ({
            success?: boolean | undefined;
            error?: string | undefined;
            liquidatorFee?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            perpEfFee?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] & ({
            success?: boolean | undefined;
            error?: string | undefined;
            liquidatorFee?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            perpEfFee?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            success?: boolean | undefined;
            error?: string | undefined;
            liquidatorFee?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["liquidations"][number]["liquidatorFee"], keyof Coin>, never>) | undefined;
            perpEfFee?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & Record<Exclude<keyof I["liquidations"][number]["perpEfFee"], keyof Coin>, never>) | undefined;
        } & Record<Exclude<keyof I["liquidations"][number], keyof MsgMultiLiquidateResponse_LiquidationResponse>, never>)[] & Record<Exclude<keyof I["liquidations"], keyof {
            success?: boolean | undefined;
            error?: string | undefined;
            liquidatorFee?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            perpEfFee?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "liquidations">, never>>(object: I): MsgMultiLiquidateResponse;
};
export declare const MsgMultiLiquidateResponse_LiquidationResponse: {
    encode(message: MsgMultiLiquidateResponse_LiquidationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgMultiLiquidateResponse_LiquidationResponse;
    fromJSON(object: any): MsgMultiLiquidateResponse_LiquidationResponse;
    toJSON(message: MsgMultiLiquidateResponse_LiquidationResponse): unknown;
    fromPartial<I extends {
        success?: boolean | undefined;
        error?: string | undefined;
        liquidatorFee?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        perpEfFee?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        success?: boolean | undefined;
        error?: string | undefined;
        liquidatorFee?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["liquidatorFee"], keyof Coin>, never>) | undefined;
        perpEfFee?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["perpEfFee"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgMultiLiquidateResponse_LiquidationResponse>, never>>(object: I): MsgMultiLiquidateResponse_LiquidationResponse;
};
export declare const MsgOpenPosition: {
    encode(message: MsgOpenPosition, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgOpenPosition;
    fromJSON(object: any): MsgOpenPosition;
    toJSON(message: MsgOpenPosition): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        pair?: string | undefined;
        side?: Side | undefined;
        quoteAssetAmount?: string | undefined;
        leverage?: string | undefined;
        baseAssetAmountLimit?: string | undefined;
    } & {
        sender?: string | undefined;
        pair?: string | undefined;
        side?: Side | undefined;
        quoteAssetAmount?: string | undefined;
        leverage?: string | undefined;
        baseAssetAmountLimit?: string | undefined;
    } & Record<Exclude<keyof I, keyof MsgOpenPosition>, never>>(object: I): MsgOpenPosition;
};
export declare const MsgOpenPositionResponse: {
    encode(message: MsgOpenPositionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgOpenPositionResponse;
    fromJSON(object: any): MsgOpenPositionResponse;
    toJSON(message: MsgOpenPositionResponse): unknown;
    fromPartial<I extends {
        position?: {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            blockNumber?: string | number | Long.Long | undefined;
        } | undefined;
        exchangedNotionalValue?: string | undefined;
        exchangedPositionSize?: string | undefined;
        fundingPayment?: string | undefined;
        realizedPnl?: string | undefined;
        unrealizedPnlAfter?: string | undefined;
        marginToVault?: string | undefined;
        positionNotional?: string | undefined;
    } & {
        position?: ({
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            blockNumber?: string | number | Long.Long | undefined;
        } & {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            blockNumber?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["position"]["blockNumber"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["position"], keyof Position>, never>) | undefined;
        exchangedNotionalValue?: string | undefined;
        exchangedPositionSize?: string | undefined;
        fundingPayment?: string | undefined;
        realizedPnl?: string | undefined;
        unrealizedPnlAfter?: string | undefined;
        marginToVault?: string | undefined;
        positionNotional?: string | undefined;
    } & Record<Exclude<keyof I, keyof MsgOpenPositionResponse>, never>>(object: I): MsgOpenPositionResponse;
};
export declare const MsgClosePosition: {
    encode(message: MsgClosePosition, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgClosePosition;
    fromJSON(object: any): MsgClosePosition;
    toJSON(message: MsgClosePosition): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        pair?: string | undefined;
    } & {
        sender?: string | undefined;
        pair?: string | undefined;
    } & Record<Exclude<keyof I, keyof MsgClosePosition>, never>>(object: I): MsgClosePosition;
};
export declare const MsgClosePositionResponse: {
    encode(message: MsgClosePositionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgClosePositionResponse;
    fromJSON(object: any): MsgClosePositionResponse;
    toJSON(message: MsgClosePositionResponse): unknown;
    fromPartial<I extends {
        exchangedNotionalValue?: string | undefined;
        exchangedPositionSize?: string | undefined;
        fundingPayment?: string | undefined;
        realizedPnl?: string | undefined;
        marginToTrader?: string | undefined;
    } & {
        exchangedNotionalValue?: string | undefined;
        exchangedPositionSize?: string | undefined;
        fundingPayment?: string | undefined;
        realizedPnl?: string | undefined;
        marginToTrader?: string | undefined;
    } & Record<Exclude<keyof I, keyof MsgClosePositionResponse>, never>>(object: I): MsgClosePositionResponse;
};
export declare const MsgDonateToEcosystemFund: {
    encode(message: MsgDonateToEcosystemFund, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgDonateToEcosystemFund;
    fromJSON(object: any): MsgDonateToEcosystemFund;
    toJSON(message: MsgDonateToEcosystemFund): unknown;
    fromPartial<I extends {
        sender?: string | undefined;
        donation?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        sender?: string | undefined;
        donation?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["donation"], keyof Coin>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgDonateToEcosystemFund>, never>>(object: I): MsgDonateToEcosystemFund;
};
export declare const MsgDonateToEcosystemFundResponse: {
    encode(_: MsgDonateToEcosystemFundResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgDonateToEcosystemFundResponse;
    fromJSON(_: any): MsgDonateToEcosystemFundResponse;
    toJSON(_: MsgDonateToEcosystemFundResponse): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): MsgDonateToEcosystemFundResponse;
};
/** Msg defines the x/perp Msg service. */
export interface Msg {
    RemoveMargin(request: MsgRemoveMargin): Promise<MsgRemoveMarginResponse>;
    AddMargin(request: MsgAddMargin): Promise<MsgAddMarginResponse>;
    MultiLiquidate(request: MsgMultiLiquidate): Promise<MsgMultiLiquidateResponse>;
    OpenPosition(request: MsgOpenPosition): Promise<MsgOpenPositionResponse>;
    ClosePosition(request: MsgClosePosition): Promise<MsgClosePositionResponse>;
    DonateToEcosystemFund(request: MsgDonateToEcosystemFund): Promise<MsgDonateToEcosystemFundResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    RemoveMargin(request: MsgRemoveMargin): Promise<MsgRemoveMarginResponse>;
    AddMargin(request: MsgAddMargin): Promise<MsgAddMarginResponse>;
    MultiLiquidate(request: MsgMultiLiquidate): Promise<MsgMultiLiquidateResponse>;
    OpenPosition(request: MsgOpenPosition): Promise<MsgOpenPositionResponse>;
    ClosePosition(request: MsgClosePosition): Promise<MsgClosePositionResponse>;
    DonateToEcosystemFund(request: MsgDonateToEcosystemFund): Promise<MsgDonateToEcosystemFundResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
//# sourceMappingURL=tx.d.ts.map