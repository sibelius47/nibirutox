import { Params, Position, Metrics } from "./state";
import Long from "long";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "nibiru.perp.v1";
/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** params holds all the parameters of this module. */
    params?: Params;
}
/** ---------------------------------------- Positions */
export interface QueryPositionsRequest {
    trader: string;
}
export interface QueryPositionsResponse {
    positions: QueryPositionResponse[];
}
/**
 * QueryPositionRequest is the request type for the position of the x/perp
 * module account.
 */
export interface QueryPositionRequest {
    pair: string;
    trader: string;
}
export interface QueryPositionResponse {
    /** The position as it exists in the blockchain state */
    position?: Position;
    /**
     * The position's current notional value, if it were to be entirely closed (in
     * margin units).
     */
    positionNotional: string;
    /** The position's unrealized PnL. */
    unrealizedPnl: string;
    /**
     * margin ratio of the position based on the mark price, mark TWAP. The higher
     * value of the possible margin ratios (TWAP and instantaneous) is taken to be
     * 'marginRatioMark'. Calculated from margin, unrealized PnL, and position
     * notional.
     */
    marginRatioMark: string;
    /**
     * margin ratio of the position based on the index price. Calculated from
     * margin, unrealized PnL, and position notional.
     */
    marginRatioIndex: string;
    /** BlockNumber is current block number at the time of query. */
    blockNumber: Long;
}
export interface QueryCumulativePremiumFractionRequest {
    /** the pair to query for */
    pair: string;
}
export interface QueryCumulativePremiumFractionResponse {
    /** The latest cumulative premium fraction. */
    cumulativePremiumFraction: string;
    estimatedNextCumulativePremiumFraction: string;
}
export interface QueryMetricsRequest {
    /** the pair to query for */
    pair: string;
}
export interface QueryMetricsResponse {
    /** list of perp metrics */
    metrics?: Metrics;
}
export declare const QueryParamsRequest: {
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryParamsRequest;
};
export declare const QueryParamsResponse: {
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    fromPartial<I extends {
        params?: {
            stopped?: boolean | undefined;
            feePoolFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateInterval?: string | undefined;
            twapLookbackWindow?: {
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            whitelistedLiquidators?: string[] | undefined;
        } | undefined;
    } & {
        params?: ({
            stopped?: boolean | undefined;
            feePoolFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateInterval?: string | undefined;
            twapLookbackWindow?: {
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            whitelistedLiquidators?: string[] | undefined;
        } & {
            stopped?: boolean | undefined;
            feePoolFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateInterval?: string | undefined;
            twapLookbackWindow?: ({
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["params"]["twapLookbackWindow"]["seconds"], keyof Long.Long>, never>) | undefined;
                nanos?: number | undefined;
            } & Record<Exclude<keyof I["params"]["twapLookbackWindow"], keyof import("../../google/protobuf/duration").Duration>, never>) | undefined;
            whitelistedLiquidators?: (string[] & string[] & Record<Exclude<keyof I["params"]["whitelistedLiquidators"], keyof string[]>, never>) | undefined;
        } & Record<Exclude<keyof I["params"], keyof Params>, never>) | undefined;
    } & Record<Exclude<keyof I, "params">, never>>(object: I): QueryParamsResponse;
};
export declare const QueryPositionsRequest: {
    encode(message: QueryPositionsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryPositionsRequest;
    fromJSON(object: any): QueryPositionsRequest;
    toJSON(message: QueryPositionsRequest): unknown;
    fromPartial<I extends {
        trader?: string | undefined;
    } & {
        trader?: string | undefined;
    } & Record<Exclude<keyof I, "trader">, never>>(object: I): QueryPositionsRequest;
};
export declare const QueryPositionsResponse: {
    encode(message: QueryPositionsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryPositionsResponse;
    fromJSON(object: any): QueryPositionsResponse;
    toJSON(message: QueryPositionsResponse): unknown;
    fromPartial<I extends {
        positions?: {
            position?: {
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                blockNumber?: string | number | Long.Long | undefined;
            } | undefined;
            positionNotional?: string | undefined;
            unrealizedPnl?: string | undefined;
            marginRatioMark?: string | undefined;
            marginRatioIndex?: string | undefined;
            blockNumber?: string | number | Long.Long | undefined;
        }[] | undefined;
    } & {
        positions?: ({
            position?: {
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                blockNumber?: string | number | Long.Long | undefined;
            } | undefined;
            positionNotional?: string | undefined;
            unrealizedPnl?: string | undefined;
            marginRatioMark?: string | undefined;
            marginRatioIndex?: string | undefined;
            blockNumber?: string | number | Long.Long | undefined;
        }[] & ({
            position?: {
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                blockNumber?: string | number | Long.Long | undefined;
            } | undefined;
            positionNotional?: string | undefined;
            unrealizedPnl?: string | undefined;
            marginRatioMark?: string | undefined;
            marginRatioIndex?: string | undefined;
            blockNumber?: string | number | Long.Long | undefined;
        } & {
            position?: ({
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                blockNumber?: string | number | Long.Long | undefined;
            } & {
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                blockNumber?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["positions"][number]["position"]["blockNumber"], keyof Long.Long>, never>) | undefined;
            } & Record<Exclude<keyof I["positions"][number]["position"], keyof Position>, never>) | undefined;
            positionNotional?: string | undefined;
            unrealizedPnl?: string | undefined;
            marginRatioMark?: string | undefined;
            marginRatioIndex?: string | undefined;
            blockNumber?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["positions"][number]["blockNumber"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["positions"][number], keyof QueryPositionResponse>, never>)[] & Record<Exclude<keyof I["positions"], keyof {
            position?: {
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                blockNumber?: string | number | Long.Long | undefined;
            } | undefined;
            positionNotional?: string | undefined;
            unrealizedPnl?: string | undefined;
            marginRatioMark?: string | undefined;
            marginRatioIndex?: string | undefined;
            blockNumber?: string | number | Long.Long | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "positions">, never>>(object: I): QueryPositionsResponse;
};
export declare const QueryPositionRequest: {
    encode(message: QueryPositionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryPositionRequest;
    fromJSON(object: any): QueryPositionRequest;
    toJSON(message: QueryPositionRequest): unknown;
    fromPartial<I extends {
        pair?: string | undefined;
        trader?: string | undefined;
    } & {
        pair?: string | undefined;
        trader?: string | undefined;
    } & Record<Exclude<keyof I, keyof QueryPositionRequest>, never>>(object: I): QueryPositionRequest;
};
export declare const QueryPositionResponse: {
    encode(message: QueryPositionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryPositionResponse;
    fromJSON(object: any): QueryPositionResponse;
    toJSON(message: QueryPositionResponse): unknown;
    fromPartial<I extends {
        position?: {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            blockNumber?: string | number | Long.Long | undefined;
        } | undefined;
        positionNotional?: string | undefined;
        unrealizedPnl?: string | undefined;
        marginRatioMark?: string | undefined;
        marginRatioIndex?: string | undefined;
        blockNumber?: string | number | Long.Long | undefined;
    } & {
        position?: ({
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            blockNumber?: string | number | Long.Long | undefined;
        } & {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            blockNumber?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["position"]["blockNumber"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["position"], keyof Position>, never>) | undefined;
        positionNotional?: string | undefined;
        unrealizedPnl?: string | undefined;
        marginRatioMark?: string | undefined;
        marginRatioIndex?: string | undefined;
        blockNumber?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["blockNumber"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof QueryPositionResponse>, never>>(object: I): QueryPositionResponse;
};
export declare const QueryCumulativePremiumFractionRequest: {
    encode(message: QueryCumulativePremiumFractionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryCumulativePremiumFractionRequest;
    fromJSON(object: any): QueryCumulativePremiumFractionRequest;
    toJSON(message: QueryCumulativePremiumFractionRequest): unknown;
    fromPartial<I extends {
        pair?: string | undefined;
    } & {
        pair?: string | undefined;
    } & Record<Exclude<keyof I, "pair">, never>>(object: I): QueryCumulativePremiumFractionRequest;
};
export declare const QueryCumulativePremiumFractionResponse: {
    encode(message: QueryCumulativePremiumFractionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryCumulativePremiumFractionResponse;
    fromJSON(object: any): QueryCumulativePremiumFractionResponse;
    toJSON(message: QueryCumulativePremiumFractionResponse): unknown;
    fromPartial<I extends {
        cumulativePremiumFraction?: string | undefined;
        estimatedNextCumulativePremiumFraction?: string | undefined;
    } & {
        cumulativePremiumFraction?: string | undefined;
        estimatedNextCumulativePremiumFraction?: string | undefined;
    } & Record<Exclude<keyof I, keyof QueryCumulativePremiumFractionResponse>, never>>(object: I): QueryCumulativePremiumFractionResponse;
};
export declare const QueryMetricsRequest: {
    encode(message: QueryMetricsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryMetricsRequest;
    fromJSON(object: any): QueryMetricsRequest;
    toJSON(message: QueryMetricsRequest): unknown;
    fromPartial<I extends {
        pair?: string | undefined;
    } & {
        pair?: string | undefined;
    } & Record<Exclude<keyof I, "pair">, never>>(object: I): QueryMetricsRequest;
};
export declare const QueryMetricsResponse: {
    encode(message: QueryMetricsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryMetricsResponse;
    fromJSON(object: any): QueryMetricsResponse;
    toJSON(message: QueryMetricsResponse): unknown;
    fromPartial<I extends {
        metrics?: {
            pair?: string | undefined;
            netSize?: string | undefined;
            volumeQuote?: string | undefined;
            volumeBase?: string | undefined;
        } | undefined;
    } & {
        metrics?: ({
            pair?: string | undefined;
            netSize?: string | undefined;
            volumeQuote?: string | undefined;
            volumeBase?: string | undefined;
        } & {
            pair?: string | undefined;
            netSize?: string | undefined;
            volumeQuote?: string | undefined;
            volumeBase?: string | undefined;
        } & Record<Exclude<keyof I["metrics"], keyof Metrics>, never>) | undefined;
    } & Record<Exclude<keyof I, "metrics">, never>>(object: I): QueryMetricsResponse;
};
/** Query defines the gRPC querier service. */
export interface Query {
    /** Parameters queries the parameters of the x/perp module. */
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
    QueryPosition(request: QueryPositionRequest): Promise<QueryPositionResponse>;
    QueryPositions(request: QueryPositionsRequest): Promise<QueryPositionsResponse>;
    /** Queries the latest cumulative premium fraction and the estimated next cumulative premium fraction. */
    CumulativePremiumFraction(request: QueryCumulativePremiumFractionRequest): Promise<QueryCumulativePremiumFractionResponse>;
    Metrics(request: QueryMetricsRequest): Promise<QueryMetricsResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
    QueryPosition(request: QueryPositionRequest): Promise<QueryPositionResponse>;
    QueryPositions(request: QueryPositionsRequest): Promise<QueryPositionsResponse>;
    CumulativePremiumFraction(request: QueryCumulativePremiumFractionRequest): Promise<QueryCumulativePremiumFractionResponse>;
    Metrics(request: QueryMetricsRequest): Promise<QueryMetricsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
//# sourceMappingURL=query.d.ts.map