"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryMetricsResponse = exports.QueryMetricsRequest = exports.QueryCumulativePremiumFractionResponse = exports.QueryCumulativePremiumFractionRequest = exports.QueryPositionResponse = exports.QueryPositionRequest = exports.QueryPositionsResponse = exports.QueryPositionsRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const state_1 = require("./state");
const long_1 = __importDefault(require("long"));
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "nibiru.perp.v1";
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            state_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = state_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? state_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined &&
            (obj.params = message.params ? state_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params =
            object.params !== undefined && object.params !== null
                ? state_1.Params.fromPartial(object.params)
                : undefined;
        return message;
    },
};
function createBaseQueryPositionsRequest() {
    return { trader: "" };
}
exports.QueryPositionsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.trader !== "") {
            writer.uint32(10).string(message.trader);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPositionsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.trader = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            trader: isSet(object.trader) ? String(object.trader) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.trader !== undefined && (obj.trader = message.trader);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryPositionsRequest();
        message.trader = (_a = object.trader) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryPositionsResponse() {
    return { positions: [] };
}
exports.QueryPositionsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.positions) {
            exports.QueryPositionResponse.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPositionsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.positions.push(exports.QueryPositionResponse.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            positions: Array.isArray(object === null || object === void 0 ? void 0 : object.positions)
                ? object.positions.map((e) => exports.QueryPositionResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.positions) {
            obj.positions = message.positions.map((e) => e ? exports.QueryPositionResponse.toJSON(e) : undefined);
        }
        else {
            obj.positions = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryPositionsResponse();
        message.positions =
            ((_a = object.positions) === null || _a === void 0 ? void 0 : _a.map((e) => exports.QueryPositionResponse.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryPositionRequest() {
    return { pair: "", trader: "" };
}
exports.QueryPositionRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(10).string(message.pair);
        }
        if (message.trader !== "") {
            writer.uint32(18).string(message.trader);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPositionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pair = reader.string();
                    break;
                case 2:
                    message.trader = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
            trader: isSet(object.trader) ? String(object.trader) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        message.trader !== undefined && (obj.trader = message.trader);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryPositionRequest();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        message.trader = (_b = object.trader) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryPositionResponse() {
    return {
        position: undefined,
        positionNotional: "",
        unrealizedPnl: "",
        marginRatioMark: "",
        marginRatioIndex: "",
        blockNumber: long_1.default.ZERO,
    };
}
exports.QueryPositionResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.position !== undefined) {
            state_1.Position.encode(message.position, writer.uint32(10).fork()).ldelim();
        }
        if (message.positionNotional !== "") {
            writer.uint32(18).string(message.positionNotional);
        }
        if (message.unrealizedPnl !== "") {
            writer.uint32(26).string(message.unrealizedPnl);
        }
        if (message.marginRatioMark !== "") {
            writer.uint32(34).string(message.marginRatioMark);
        }
        if (message.marginRatioIndex !== "") {
            writer.uint32(42).string(message.marginRatioIndex);
        }
        if (!message.blockNumber.isZero()) {
            writer.uint32(56).int64(message.blockNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPositionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.position = state_1.Position.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.positionNotional = reader.string();
                    break;
                case 3:
                    message.unrealizedPnl = reader.string();
                    break;
                case 4:
                    message.marginRatioMark = reader.string();
                    break;
                case 5:
                    message.marginRatioIndex = reader.string();
                    break;
                case 7:
                    message.blockNumber = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            position: isSet(object.position) ? state_1.Position.fromJSON(object.position) : undefined,
            positionNotional: isSet(object.positionNotional)
                ? String(object.positionNotional)
                : "",
            unrealizedPnl: isSet(object.unrealizedPnl) ? String(object.unrealizedPnl) : "",
            marginRatioMark: isSet(object.marginRatioMark)
                ? String(object.marginRatioMark)
                : "",
            marginRatioIndex: isSet(object.marginRatioIndex)
                ? String(object.marginRatioIndex)
                : "",
            blockNumber: isSet(object.blockNumber)
                ? long_1.default.fromValue(object.blockNumber)
                : long_1.default.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.position !== undefined &&
            (obj.position = message.position ? state_1.Position.toJSON(message.position) : undefined);
        message.positionNotional !== undefined &&
            (obj.positionNotional = message.positionNotional);
        message.unrealizedPnl !== undefined && (obj.unrealizedPnl = message.unrealizedPnl);
        message.marginRatioMark !== undefined &&
            (obj.marginRatioMark = message.marginRatioMark);
        message.marginRatioIndex !== undefined &&
            (obj.marginRatioIndex = message.marginRatioIndex);
        message.blockNumber !== undefined &&
            (obj.blockNumber = (message.blockNumber || long_1.default.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseQueryPositionResponse();
        message.position =
            object.position !== undefined && object.position !== null
                ? state_1.Position.fromPartial(object.position)
                : undefined;
        message.positionNotional = (_a = object.positionNotional) !== null && _a !== void 0 ? _a : "";
        message.unrealizedPnl = (_b = object.unrealizedPnl) !== null && _b !== void 0 ? _b : "";
        message.marginRatioMark = (_c = object.marginRatioMark) !== null && _c !== void 0 ? _c : "";
        message.marginRatioIndex = (_d = object.marginRatioIndex) !== null && _d !== void 0 ? _d : "";
        message.blockNumber =
            object.blockNumber !== undefined && object.blockNumber !== null
                ? long_1.default.fromValue(object.blockNumber)
                : long_1.default.ZERO;
        return message;
    },
};
function createBaseQueryCumulativePremiumFractionRequest() {
    return { pair: "" };
}
exports.QueryCumulativePremiumFractionRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(10).string(message.pair);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCumulativePremiumFractionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pair = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryCumulativePremiumFractionRequest();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryCumulativePremiumFractionResponse() {
    return { cumulativePremiumFraction: "", estimatedNextCumulativePremiumFraction: "" };
}
exports.QueryCumulativePremiumFractionResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.cumulativePremiumFraction !== "") {
            writer.uint32(10).string(message.cumulativePremiumFraction);
        }
        if (message.estimatedNextCumulativePremiumFraction !== "") {
            writer.uint32(18).string(message.estimatedNextCumulativePremiumFraction);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCumulativePremiumFractionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.cumulativePremiumFraction = reader.string();
                    break;
                case 2:
                    message.estimatedNextCumulativePremiumFraction = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            cumulativePremiumFraction: isSet(object.cumulativePremiumFraction)
                ? String(object.cumulativePremiumFraction)
                : "",
            estimatedNextCumulativePremiumFraction: isSet(object.estimatedNextCumulativePremiumFraction)
                ? String(object.estimatedNextCumulativePremiumFraction)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.cumulativePremiumFraction !== undefined &&
            (obj.cumulativePremiumFraction = message.cumulativePremiumFraction);
        message.estimatedNextCumulativePremiumFraction !== undefined &&
            (obj.estimatedNextCumulativePremiumFraction =
                message.estimatedNextCumulativePremiumFraction);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryCumulativePremiumFractionResponse();
        message.cumulativePremiumFraction = (_a = object.cumulativePremiumFraction) !== null && _a !== void 0 ? _a : "";
        message.estimatedNextCumulativePremiumFraction =
            (_b = object.estimatedNextCumulativePremiumFraction) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryMetricsRequest() {
    return { pair: "" };
}
exports.QueryMetricsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(10).string(message.pair);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryMetricsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pair = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryMetricsRequest();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryMetricsResponse() {
    return { metrics: undefined };
}
exports.QueryMetricsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.metrics !== undefined) {
            state_1.Metrics.encode(message.metrics, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryMetricsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.metrics = state_1.Metrics.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            metrics: isSet(object.metrics) ? state_1.Metrics.fromJSON(object.metrics) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.metrics !== undefined &&
            (obj.metrics = message.metrics ? state_1.Metrics.toJSON(message.metrics) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryMetricsResponse();
        message.metrics =
            object.metrics !== undefined && object.metrics !== null
                ? state_1.Metrics.fromPartial(object.metrics)
                : undefined;
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.QueryPosition = this.QueryPosition.bind(this);
        this.QueryPositions = this.QueryPositions.bind(this);
        this.CumulativePremiumFraction = this.CumulativePremiumFraction.bind(this);
        this.Metrics = this.Metrics.bind(this);
    }
    Params(request) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.perp.v1.Query", "Params", data);
        return promise.then((data) => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
    }
    QueryPosition(request) {
        const data = exports.QueryPositionRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.perp.v1.Query", "QueryPosition", data);
        return promise.then((data) => exports.QueryPositionResponse.decode(new _m0.Reader(data)));
    }
    QueryPositions(request) {
        const data = exports.QueryPositionsRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.perp.v1.Query", "QueryPositions", data);
        return promise.then((data) => exports.QueryPositionsResponse.decode(new _m0.Reader(data)));
    }
    CumulativePremiumFraction(request) {
        const data = exports.QueryCumulativePremiumFractionRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.perp.v1.Query", "CumulativePremiumFraction", data);
        return promise.then((data) => exports.QueryCumulativePremiumFractionResponse.decode(new _m0.Reader(data)));
    }
    Metrics(request) {
        const data = exports.QueryMetricsRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.perp.v1.Query", "Metrics", data);
        return promise.then((data) => exports.QueryMetricsResponse.decode(new _m0.Reader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
if (_m0.util.Long !== long_1.default) {
    _m0.util.Long = long_1.default;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=query.js.map