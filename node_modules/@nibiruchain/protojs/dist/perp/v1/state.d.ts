import { Duration } from "../../google/protobuf/duration";
import Long from "long";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "nibiru.perp.v1";
export declare enum Side {
    SIDE_UNSPECIFIED = 0,
    BUY = 1,
    SELL = 2,
    UNRECOGNIZED = -1
}
export declare function sideFromJSON(object: any): Side;
export declare function sideToJSON(object: Side): string;
export declare enum PnLCalcOption {
    PNL_CALC_OPTION_UNSPECIFIED = 0,
    SPOT_PRICE = 1,
    TWAP = 2,
    ORACLE = 3,
    UNRECOGNIZED = -1
}
export declare function pnLCalcOptionFromJSON(object: any): PnLCalcOption;
export declare function pnLCalcOptionToJSON(object: PnLCalcOption): string;
export declare enum PnLPreferenceOption {
    PNL_PREFERENCE_UNSPECIFIED = 0,
    MAX = 1,
    MIN = 2,
    UNRECOGNIZED = -1
}
export declare function pnLPreferenceOptionFromJSON(object: any): PnLPreferenceOption;
export declare function pnLPreferenceOptionToJSON(object: PnLPreferenceOption): string;
export declare enum MarginCalculationPriceOption {
    MARGIN_CALCULATION_PRICE_OPTION_UNSPECIFIED = 0,
    SPOT = 1,
    INDEX = 2,
    MAX_PNL = 3,
    UNRECOGNIZED = -1
}
export declare function marginCalculationPriceOptionFromJSON(object: any): MarginCalculationPriceOption;
export declare function marginCalculationPriceOptionToJSON(object: MarginCalculationPriceOption): string;
export interface Params {
    /** stopped identifies if the perp exchange is stopped or not */
    stopped: boolean;
    /** FeePoolFeeRatio is the ratio transferred to the the fee pool */
    feePoolFeeRatio: string;
    /** EcosystemFundFeeRatio is the ratio transferred to the PerpEF. */
    ecosystemFundFeeRatio: string;
    /**
     * LiquidationFeeRatio is the percentage of liquidated position that will be
     * given to out as a reward. Half of the liquidation fee is given to the
     * liquidator, and the other half is given to the ecosystem fund.
     */
    liquidationFeeRatio: string;
    /**
     * PartialLiquidationRatio is the share we try to liquidate if the margin is
     * higher than liquidation fee
     */
    partialLiquidationRatio: string;
    /** specifies the interval on which the funding rate is updated */
    fundingRateInterval: string;
    /** amount of time to look back for TWAP calculations */
    twapLookbackWindow?: Duration;
    /**
     * whitelisted_liquidators defines the list of addresses
     * which are allowed to liquidate a position.
     */
    whitelistedLiquidators: string[];
}
/**
 * Position identifies and records information on a user's position on one of
 * the virtual liquidity pools.
 */
export interface Position {
    /** address identifies the address owner of this position */
    traderAddress: string;
    /** pair identifies the pair associated with this position */
    pair: string;
    /** Position size. */
    size: string;
    /** Amount of margin remaining in the position. */
    margin: string;
    /**
     * OpenNotional is the quote denom value of the position when opening.
     * Used to calculate PnL.
     */
    openNotional: string;
    /**
     * The most recent cumulative premium fraction this position has.
     * Used to calculate the next funding payment.
     */
    latestCumulativePremiumFraction: string;
    /** BlockNumber is the last block number when this position was updated. */
    blockNumber: Long;
}
export interface PairMetadata {
    pair: string;
    /**
     * Latest cumulative premium fraction for a given pair.
     * Calculated once per funding rate interval.
     * A premium fraction is the difference between mark and index, divided by the number of payments per day.
     * (mark - index) / # payments in a day
     */
    latestCumulativePremiumFraction: string;
}
export interface PrepaidBadDebt {
    denom: string;
    amount: string;
}
export interface PositionResp {
    position?: Position;
    /** The amount of quote assets exchanged. */
    exchangedNotionalValue: string;
    /** The amount of base assets exchanged. */
    exchangedPositionSize: string;
    /**
     * The amount of bad debt accrued during this position change.
     * Measured in absolute value of quote units.
     * If greater than zero, then the position change event will likely fail.
     */
    badDebt: string;
    /** The funding payment applied on this position change. */
    fundingPayment: string;
    /**
     * The amount of PnL realized on this position changed, measured in quote
     * units.
     */
    realizedPnl: string;
    /** The unrealized PnL in the position after the position change. */
    unrealizedPnlAfter: string;
    /**
     * The amount of margin the trader has to give to the vault.
     * A negative value means the vault pays the trader.
     */
    marginToVault: string;
    /**
     * The position's notional value after the position change, measured in quote
     * units.
     */
    positionNotional: string;
}
export interface LiquidateResp {
    /** Amount of bad debt created by the liquidation event */
    badDebt: string;
    /** Fee paid to the liquidator */
    feeToLiquidator: string;
    /** Fee paid to the Perp EF fund */
    feeToPerpEcosystemFund: string;
    /** Address of the liquidator */
    liquidator: string;
    /** Position response from the close or open reverse position */
    positionResp?: PositionResp;
}
/** PoolMetrics is a structure that displays a snapshot of perp metrics for each pair. */
export interface Metrics {
    /** Pair identifier for the two assets. Always in format 'base:quote' */
    pair: string;
    /** Sum of all active position sizes for the pair. */
    netSize: string;
    /** Total notional volume for the pair. */
    volumeQuote: string;
    /** Total size volume for the pair. */
    volumeBase: string;
}
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    fromPartial<I extends {
        stopped?: boolean | undefined;
        feePoolFeeRatio?: string | undefined;
        ecosystemFundFeeRatio?: string | undefined;
        liquidationFeeRatio?: string | undefined;
        partialLiquidationRatio?: string | undefined;
        fundingRateInterval?: string | undefined;
        twapLookbackWindow?: {
            seconds?: string | number | Long.Long | undefined;
            nanos?: number | undefined;
        } | undefined;
        whitelistedLiquidators?: string[] | undefined;
    } & {
        stopped?: boolean | undefined;
        feePoolFeeRatio?: string | undefined;
        ecosystemFundFeeRatio?: string | undefined;
        liquidationFeeRatio?: string | undefined;
        partialLiquidationRatio?: string | undefined;
        fundingRateInterval?: string | undefined;
        twapLookbackWindow?: ({
            seconds?: string | number | Long.Long | undefined;
            nanos?: number | undefined;
        } & {
            seconds?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["twapLookbackWindow"]["seconds"], keyof Long.Long>, never>) | undefined;
            nanos?: number | undefined;
        } & Record<Exclude<keyof I["twapLookbackWindow"], keyof Duration>, never>) | undefined;
        whitelistedLiquidators?: (string[] & string[] & Record<Exclude<keyof I["whitelistedLiquidators"], keyof string[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Params>, never>>(object: I): Params;
};
export declare const Position: {
    encode(message: Position, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Position;
    fromJSON(object: any): Position;
    toJSON(message: Position): unknown;
    fromPartial<I extends {
        traderAddress?: string | undefined;
        pair?: string | undefined;
        size?: string | undefined;
        margin?: string | undefined;
        openNotional?: string | undefined;
        latestCumulativePremiumFraction?: string | undefined;
        blockNumber?: string | number | Long.Long | undefined;
    } & {
        traderAddress?: string | undefined;
        pair?: string | undefined;
        size?: string | undefined;
        margin?: string | undefined;
        openNotional?: string | undefined;
        latestCumulativePremiumFraction?: string | undefined;
        blockNumber?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["blockNumber"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Position>, never>>(object: I): Position;
};
export declare const PairMetadata: {
    encode(message: PairMetadata, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PairMetadata;
    fromJSON(object: any): PairMetadata;
    toJSON(message: PairMetadata): unknown;
    fromPartial<I extends {
        pair?: string | undefined;
        latestCumulativePremiumFraction?: string | undefined;
    } & {
        pair?: string | undefined;
        latestCumulativePremiumFraction?: string | undefined;
    } & Record<Exclude<keyof I, keyof PairMetadata>, never>>(object: I): PairMetadata;
};
export declare const PrepaidBadDebt: {
    encode(message: PrepaidBadDebt, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PrepaidBadDebt;
    fromJSON(object: any): PrepaidBadDebt;
    toJSON(message: PrepaidBadDebt): unknown;
    fromPartial<I extends {
        denom?: string | undefined;
        amount?: string | undefined;
    } & {
        denom?: string | undefined;
        amount?: string | undefined;
    } & Record<Exclude<keyof I, keyof PrepaidBadDebt>, never>>(object: I): PrepaidBadDebt;
};
export declare const PositionResp: {
    encode(message: PositionResp, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PositionResp;
    fromJSON(object: any): PositionResp;
    toJSON(message: PositionResp): unknown;
    fromPartial<I extends {
        position?: {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            blockNumber?: string | number | Long.Long | undefined;
        } | undefined;
        exchangedNotionalValue?: string | undefined;
        exchangedPositionSize?: string | undefined;
        badDebt?: string | undefined;
        fundingPayment?: string | undefined;
        realizedPnl?: string | undefined;
        unrealizedPnlAfter?: string | undefined;
        marginToVault?: string | undefined;
        positionNotional?: string | undefined;
    } & {
        position?: ({
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            blockNumber?: string | number | Long.Long | undefined;
        } & {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            blockNumber?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["position"]["blockNumber"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["position"], keyof Position>, never>) | undefined;
        exchangedNotionalValue?: string | undefined;
        exchangedPositionSize?: string | undefined;
        badDebt?: string | undefined;
        fundingPayment?: string | undefined;
        realizedPnl?: string | undefined;
        unrealizedPnlAfter?: string | undefined;
        marginToVault?: string | undefined;
        positionNotional?: string | undefined;
    } & Record<Exclude<keyof I, keyof PositionResp>, never>>(object: I): PositionResp;
};
export declare const LiquidateResp: {
    encode(message: LiquidateResp, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LiquidateResp;
    fromJSON(object: any): LiquidateResp;
    toJSON(message: LiquidateResp): unknown;
    fromPartial<I extends {
        badDebt?: string | undefined;
        feeToLiquidator?: string | undefined;
        feeToPerpEcosystemFund?: string | undefined;
        liquidator?: string | undefined;
        positionResp?: {
            position?: {
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                blockNumber?: string | number | Long.Long | undefined;
            } | undefined;
            exchangedNotionalValue?: string | undefined;
            exchangedPositionSize?: string | undefined;
            badDebt?: string | undefined;
            fundingPayment?: string | undefined;
            realizedPnl?: string | undefined;
            unrealizedPnlAfter?: string | undefined;
            marginToVault?: string | undefined;
            positionNotional?: string | undefined;
        } | undefined;
    } & {
        badDebt?: string | undefined;
        feeToLiquidator?: string | undefined;
        feeToPerpEcosystemFund?: string | undefined;
        liquidator?: string | undefined;
        positionResp?: ({
            position?: {
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                blockNumber?: string | number | Long.Long | undefined;
            } | undefined;
            exchangedNotionalValue?: string | undefined;
            exchangedPositionSize?: string | undefined;
            badDebt?: string | undefined;
            fundingPayment?: string | undefined;
            realizedPnl?: string | undefined;
            unrealizedPnlAfter?: string | undefined;
            marginToVault?: string | undefined;
            positionNotional?: string | undefined;
        } & {
            position?: ({
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                blockNumber?: string | number | Long.Long | undefined;
            } & {
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                blockNumber?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["positionResp"]["position"]["blockNumber"], keyof Long.Long>, never>) | undefined;
            } & Record<Exclude<keyof I["positionResp"]["position"], keyof Position>, never>) | undefined;
            exchangedNotionalValue?: string | undefined;
            exchangedPositionSize?: string | undefined;
            badDebt?: string | undefined;
            fundingPayment?: string | undefined;
            realizedPnl?: string | undefined;
            unrealizedPnlAfter?: string | undefined;
            marginToVault?: string | undefined;
            positionNotional?: string | undefined;
        } & Record<Exclude<keyof I["positionResp"], keyof PositionResp>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof LiquidateResp>, never>>(object: I): LiquidateResp;
};
export declare const Metrics: {
    encode(message: Metrics, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Metrics;
    fromJSON(object: any): Metrics;
    toJSON(message: Metrics): unknown;
    fromPartial<I extends {
        pair?: string | undefined;
        netSize?: string | undefined;
        volumeQuote?: string | undefined;
        volumeBase?: string | undefined;
    } & {
        pair?: string | undefined;
        netSize?: string | undefined;
        volumeQuote?: string | undefined;
        volumeBase?: string | undefined;
    } & Record<Exclude<keyof I, keyof Metrics>, never>>(object: I): Metrics;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
//# sourceMappingURL=state.d.ts.map