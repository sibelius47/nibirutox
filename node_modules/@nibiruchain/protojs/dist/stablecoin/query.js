"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryLiquidityRatioInfoResponse = exports.QueryLiquidityRatioInfoRequest = exports.LiquidityRatioInfo = exports.QueryGovToMintStableResponse = exports.QueryGovToMintStable = exports.QueryCirculatingSuppliesResponse = exports.QueryCirculatingSupplies = exports.QueryModuleAccountBalancesResponse = exports.QueryModuleAccountBalances = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const params_1 = require("./params");
const coin_1 = require("../cosmos/base/v1beta1/coin");
const long_1 = __importDefault(require("long"));
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "nibiru.stablecoin.v1";
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined &&
            (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params =
            object.params !== undefined && object.params !== null
                ? params_1.Params.fromPartial(object.params)
                : undefined;
        return message;
    },
};
function createBaseQueryModuleAccountBalances() {
    return {};
}
exports.QueryModuleAccountBalances = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryModuleAccountBalances();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryModuleAccountBalances();
        return message;
    },
};
function createBaseQueryModuleAccountBalancesResponse() {
    return { moduleAccountBalances: [] };
}
exports.QueryModuleAccountBalancesResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.moduleAccountBalances) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryModuleAccountBalancesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.moduleAccountBalances.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            moduleAccountBalances: Array.isArray(object === null || object === void 0 ? void 0 : object.moduleAccountBalances)
                ? object.moduleAccountBalances.map((e) => coin_1.Coin.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.moduleAccountBalances) {
            obj.moduleAccountBalances = message.moduleAccountBalances.map((e) => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.moduleAccountBalances = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryModuleAccountBalancesResponse();
        message.moduleAccountBalances =
            ((_a = object.moduleAccountBalances) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryCirculatingSupplies() {
    return {};
}
exports.QueryCirculatingSupplies = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCirculatingSupplies();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryCirculatingSupplies();
        return message;
    },
};
function createBaseQueryCirculatingSuppliesResponse() {
    return { nibi: undefined, nusd: undefined };
}
exports.QueryCirculatingSuppliesResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.nibi !== undefined) {
            coin_1.Coin.encode(message.nibi, writer.uint32(10).fork()).ldelim();
        }
        if (message.nusd !== undefined) {
            coin_1.Coin.encode(message.nusd, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCirculatingSuppliesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.nibi = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.nusd = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            nibi: isSet(object.nibi) ? coin_1.Coin.fromJSON(object.nibi) : undefined,
            nusd: isSet(object.nusd) ? coin_1.Coin.fromJSON(object.nusd) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.nibi !== undefined &&
            (obj.nibi = message.nibi ? coin_1.Coin.toJSON(message.nibi) : undefined);
        message.nusd !== undefined &&
            (obj.nusd = message.nusd ? coin_1.Coin.toJSON(message.nusd) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryCirculatingSuppliesResponse();
        message.nibi =
            object.nibi !== undefined && object.nibi !== null
                ? coin_1.Coin.fromPartial(object.nibi)
                : undefined;
        message.nusd =
            object.nusd !== undefined && object.nusd !== null
                ? coin_1.Coin.fromPartial(object.nusd)
                : undefined;
        return message;
    },
};
function createBaseQueryGovToMintStable() {
    return { collateral: undefined };
}
exports.QueryGovToMintStable = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.collateral !== undefined) {
            coin_1.Coin.encode(message.collateral, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGovToMintStable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.collateral = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            collateral: isSet(object.collateral)
                ? coin_1.Coin.fromJSON(object.collateral)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.collateral !== undefined &&
            (obj.collateral = message.collateral
                ? coin_1.Coin.toJSON(message.collateral)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGovToMintStable();
        message.collateral =
            object.collateral !== undefined && object.collateral !== null
                ? coin_1.Coin.fromPartial(object.collateral)
                : undefined;
        return message;
    },
};
function createBaseQueryGovToMintStableResponse() {
    return { gov: undefined };
}
exports.QueryGovToMintStableResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.gov !== undefined) {
            coin_1.Coin.encode(message.gov, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGovToMintStableResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.gov = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            gov: isSet(object.gov) ? coin_1.Coin.fromJSON(object.gov) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.gov !== undefined &&
            (obj.gov = message.gov ? coin_1.Coin.toJSON(message.gov) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryGovToMintStableResponse();
        message.gov =
            object.gov !== undefined && object.gov !== null
                ? coin_1.Coin.fromPartial(object.gov)
                : undefined;
        return message;
    },
};
function createBaseLiquidityRatioInfo() {
    return { liquidityRatio: "", upperBand: "", lowerBand: "" };
}
exports.LiquidityRatioInfo = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.liquidityRatio !== "") {
            writer.uint32(10).string(message.liquidityRatio);
        }
        if (message.upperBand !== "") {
            writer.uint32(18).string(message.upperBand);
        }
        if (message.lowerBand !== "") {
            writer.uint32(26).string(message.lowerBand);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLiquidityRatioInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.liquidityRatio = reader.string();
                    break;
                case 2:
                    message.upperBand = reader.string();
                    break;
                case 3:
                    message.lowerBand = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            liquidityRatio: isSet(object.liquidityRatio) ? String(object.liquidityRatio) : "",
            upperBand: isSet(object.upperBand) ? String(object.upperBand) : "",
            lowerBand: isSet(object.lowerBand) ? String(object.lowerBand) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.liquidityRatio !== undefined &&
            (obj.liquidityRatio = message.liquidityRatio);
        message.upperBand !== undefined && (obj.upperBand = message.upperBand);
        message.lowerBand !== undefined && (obj.lowerBand = message.lowerBand);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseLiquidityRatioInfo();
        message.liquidityRatio = (_a = object.liquidityRatio) !== null && _a !== void 0 ? _a : "";
        message.upperBand = (_b = object.upperBand) !== null && _b !== void 0 ? _b : "";
        message.lowerBand = (_c = object.lowerBand) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseQueryLiquidityRatioInfoRequest() {
    return {};
}
exports.QueryLiquidityRatioInfoRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLiquidityRatioInfoRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryLiquidityRatioInfoRequest();
        return message;
    },
};
function createBaseQueryLiquidityRatioInfoResponse() {
    return { info: undefined };
}
exports.QueryLiquidityRatioInfoResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.info !== undefined) {
            exports.LiquidityRatioInfo.encode(message.info, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryLiquidityRatioInfoResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.info = exports.LiquidityRatioInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            info: isSet(object.info) ? exports.LiquidityRatioInfo.fromJSON(object.info) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.info !== undefined &&
            (obj.info = message.info ? exports.LiquidityRatioInfo.toJSON(message.info) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryLiquidityRatioInfoResponse();
        message.info =
            object.info !== undefined && object.info !== null
                ? exports.LiquidityRatioInfo.fromPartial(object.info)
                : undefined;
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.ModuleAccountBalances = this.ModuleAccountBalances.bind(this);
        this.CirculatingSupplies = this.CirculatingSupplies.bind(this);
        this.LiquidityRatioInfo = this.LiquidityRatioInfo.bind(this);
    }
    Params(request) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.stablecoin.v1.Query", "Params", data);
        return promise.then((data) => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
    }
    ModuleAccountBalances(request) {
        const data = exports.QueryModuleAccountBalances.encode(request).finish();
        const promise = this.rpc.request("nibiru.stablecoin.v1.Query", "ModuleAccountBalances", data);
        return promise.then((data) => exports.QueryModuleAccountBalancesResponse.decode(new _m0.Reader(data)));
    }
    CirculatingSupplies(request) {
        const data = exports.QueryCirculatingSupplies.encode(request).finish();
        const promise = this.rpc.request("nibiru.stablecoin.v1.Query", "CirculatingSupplies", data);
        return promise.then((data) => exports.QueryCirculatingSuppliesResponse.decode(new _m0.Reader(data)));
    }
    LiquidityRatioInfo(request) {
        const data = exports.QueryLiquidityRatioInfoRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.stablecoin.v1.Query", "LiquidityRatioInfo", data);
        return promise.then((data) => exports.QueryLiquidityRatioInfoResponse.decode(new _m0.Reader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
if (_m0.util.Long !== long_1.default) {
    _m0.util.Long = long_1.default;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=query.js.map