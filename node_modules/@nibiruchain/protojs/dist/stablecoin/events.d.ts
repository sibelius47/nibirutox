import { Coin } from "../cosmos/base/v1beta1/coin";
import Long from "long";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "nibiru.stablecoin.v1";
export interface EventTransfer {
    coin?: Coin;
    from: string;
    to: string;
}
export interface EventMintStable {
    amount: string;
}
export interface EventBurnStable {
    amount: string;
}
export interface EventMintNIBI {
    amount: string;
}
export interface EventBurnNIBI {
    amount: string;
}
export interface EventRecollateralize {
    caller: string;
    inCoin?: Coin;
    outCoin?: Coin;
    collRatio: string;
}
export interface EventBuyback {
    caller: string;
    inCoin?: Coin;
    outCoin?: Coin;
    collRatio: string;
}
export declare const EventTransfer: {
    encode(message: EventTransfer, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventTransfer;
    fromJSON(object: any): EventTransfer;
    toJSON(message: EventTransfer): unknown;
    fromPartial<I extends {
        coin?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        from?: string | undefined;
        to?: string | undefined;
    } & {
        coin?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["coin"], keyof Coin>, never>) | undefined;
        from?: string | undefined;
        to?: string | undefined;
    } & Record<Exclude<keyof I, keyof EventTransfer>, never>>(object: I): EventTransfer;
};
export declare const EventMintStable: {
    encode(message: EventMintStable, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventMintStable;
    fromJSON(object: any): EventMintStable;
    toJSON(message: EventMintStable): unknown;
    fromPartial<I extends {
        amount?: string | undefined;
    } & {
        amount?: string | undefined;
    } & Record<Exclude<keyof I, "amount">, never>>(object: I): EventMintStable;
};
export declare const EventBurnStable: {
    encode(message: EventBurnStable, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventBurnStable;
    fromJSON(object: any): EventBurnStable;
    toJSON(message: EventBurnStable): unknown;
    fromPartial<I extends {
        amount?: string | undefined;
    } & {
        amount?: string | undefined;
    } & Record<Exclude<keyof I, "amount">, never>>(object: I): EventBurnStable;
};
export declare const EventMintNIBI: {
    encode(message: EventMintNIBI, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventMintNIBI;
    fromJSON(object: any): EventMintNIBI;
    toJSON(message: EventMintNIBI): unknown;
    fromPartial<I extends {
        amount?: string | undefined;
    } & {
        amount?: string | undefined;
    } & Record<Exclude<keyof I, "amount">, never>>(object: I): EventMintNIBI;
};
export declare const EventBurnNIBI: {
    encode(message: EventBurnNIBI, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventBurnNIBI;
    fromJSON(object: any): EventBurnNIBI;
    toJSON(message: EventBurnNIBI): unknown;
    fromPartial<I extends {
        amount?: string | undefined;
    } & {
        amount?: string | undefined;
    } & Record<Exclude<keyof I, "amount">, never>>(object: I): EventBurnNIBI;
};
export declare const EventRecollateralize: {
    encode(message: EventRecollateralize, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventRecollateralize;
    fromJSON(object: any): EventRecollateralize;
    toJSON(message: EventRecollateralize): unknown;
    fromPartial<I extends {
        caller?: string | undefined;
        inCoin?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        outCoin?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        collRatio?: string | undefined;
    } & {
        caller?: string | undefined;
        inCoin?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["inCoin"], keyof Coin>, never>) | undefined;
        outCoin?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["outCoin"], keyof Coin>, never>) | undefined;
        collRatio?: string | undefined;
    } & Record<Exclude<keyof I, keyof EventRecollateralize>, never>>(object: I): EventRecollateralize;
};
export declare const EventBuyback: {
    encode(message: EventBuyback, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventBuyback;
    fromJSON(object: any): EventBuyback;
    toJSON(message: EventBuyback): unknown;
    fromPartial<I extends {
        caller?: string | undefined;
        inCoin?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        outCoin?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        collRatio?: string | undefined;
    } & {
        caller?: string | undefined;
        inCoin?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["inCoin"], keyof Coin>, never>) | undefined;
        outCoin?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["outCoin"], keyof Coin>, never>) | undefined;
        collRatio?: string | undefined;
    } & Record<Exclude<keyof I, keyof EventBuyback>, never>>(object: I): EventBuyback;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
//# sourceMappingURL=events.d.ts.map