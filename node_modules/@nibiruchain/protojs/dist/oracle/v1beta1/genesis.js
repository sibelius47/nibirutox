"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MissCounter = exports.FeederDelegation = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const oracle_1 = require("./oracle");
const long_1 = __importDefault(require("long"));
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "nibiru.oracle.v1beta1";
function createBaseGenesisState() {
    return {
        params: undefined,
        feederDelegations: [],
        exchangeRates: [],
        missCounters: [],
        aggregateExchangeRatePrevotes: [],
        aggregateExchangeRateVotes: [],
        pairs: [],
        pairRewards: [],
    };
}
exports.GenesisState = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            oracle_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.feederDelegations) {
            exports.FeederDelegation.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.exchangeRates) {
            oracle_1.ExchangeRateTuple.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.missCounters) {
            exports.MissCounter.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.aggregateExchangeRatePrevotes) {
            oracle_1.AggregateExchangeRatePrevote.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.aggregateExchangeRateVotes) {
            oracle_1.AggregateExchangeRateVote.encode(v, writer.uint32(50).fork()).ldelim();
        }
        for (const v of message.pairs) {
            writer.uint32(58).string(v);
        }
        for (const v of message.pairRewards) {
            oracle_1.PairReward.encode(v, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = oracle_1.Params.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.feederDelegations.push(exports.FeederDelegation.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.exchangeRates.push(oracle_1.ExchangeRateTuple.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.missCounters.push(exports.MissCounter.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.aggregateExchangeRatePrevotes.push(oracle_1.AggregateExchangeRatePrevote.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.aggregateExchangeRateVotes.push(oracle_1.AggregateExchangeRateVote.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.pairs.push(reader.string());
                    break;
                case 8:
                    message.pairRewards.push(oracle_1.PairReward.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? oracle_1.Params.fromJSON(object.params) : undefined,
            feederDelegations: Array.isArray(object === null || object === void 0 ? void 0 : object.feederDelegations)
                ? object.feederDelegations.map((e) => exports.FeederDelegation.fromJSON(e))
                : [],
            exchangeRates: Array.isArray(object === null || object === void 0 ? void 0 : object.exchangeRates)
                ? object.exchangeRates.map((e) => oracle_1.ExchangeRateTuple.fromJSON(e))
                : [],
            missCounters: Array.isArray(object === null || object === void 0 ? void 0 : object.missCounters)
                ? object.missCounters.map((e) => exports.MissCounter.fromJSON(e))
                : [],
            aggregateExchangeRatePrevotes: Array.isArray(object === null || object === void 0 ? void 0 : object.aggregateExchangeRatePrevotes)
                ? object.aggregateExchangeRatePrevotes.map((e) => oracle_1.AggregateExchangeRatePrevote.fromJSON(e))
                : [],
            aggregateExchangeRateVotes: Array.isArray(object === null || object === void 0 ? void 0 : object.aggregateExchangeRateVotes)
                ? object.aggregateExchangeRateVotes.map((e) => oracle_1.AggregateExchangeRateVote.fromJSON(e))
                : [],
            pairs: Array.isArray(object === null || object === void 0 ? void 0 : object.pairs)
                ? object.pairs.map((e) => String(e))
                : [],
            pairRewards: Array.isArray(object === null || object === void 0 ? void 0 : object.pairRewards)
                ? object.pairRewards.map((e) => oracle_1.PairReward.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined &&
            (obj.params = message.params ? oracle_1.Params.toJSON(message.params) : undefined);
        if (message.feederDelegations) {
            obj.feederDelegations = message.feederDelegations.map((e) => e ? exports.FeederDelegation.toJSON(e) : undefined);
        }
        else {
            obj.feederDelegations = [];
        }
        if (message.exchangeRates) {
            obj.exchangeRates = message.exchangeRates.map((e) => e ? oracle_1.ExchangeRateTuple.toJSON(e) : undefined);
        }
        else {
            obj.exchangeRates = [];
        }
        if (message.missCounters) {
            obj.missCounters = message.missCounters.map((e) => e ? exports.MissCounter.toJSON(e) : undefined);
        }
        else {
            obj.missCounters = [];
        }
        if (message.aggregateExchangeRatePrevotes) {
            obj.aggregateExchangeRatePrevotes = message.aggregateExchangeRatePrevotes.map((e) => (e ? oracle_1.AggregateExchangeRatePrevote.toJSON(e) : undefined));
        }
        else {
            obj.aggregateExchangeRatePrevotes = [];
        }
        if (message.aggregateExchangeRateVotes) {
            obj.aggregateExchangeRateVotes = message.aggregateExchangeRateVotes.map((e) => e ? oracle_1.AggregateExchangeRateVote.toJSON(e) : undefined);
        }
        else {
            obj.aggregateExchangeRateVotes = [];
        }
        if (message.pairs) {
            obj.pairs = message.pairs.map((e) => e);
        }
        else {
            obj.pairs = [];
        }
        if (message.pairRewards) {
            obj.pairRewards = message.pairRewards.map((e) => e ? oracle_1.PairReward.toJSON(e) : undefined);
        }
        else {
            obj.pairRewards = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseGenesisState();
        message.params =
            object.params !== undefined && object.params !== null
                ? oracle_1.Params.fromPartial(object.params)
                : undefined;
        message.feederDelegations =
            ((_a = object.feederDelegations) === null || _a === void 0 ? void 0 : _a.map((e) => exports.FeederDelegation.fromPartial(e))) || [];
        message.exchangeRates =
            ((_b = object.exchangeRates) === null || _b === void 0 ? void 0 : _b.map((e) => oracle_1.ExchangeRateTuple.fromPartial(e))) || [];
        message.missCounters =
            ((_c = object.missCounters) === null || _c === void 0 ? void 0 : _c.map((e) => exports.MissCounter.fromPartial(e))) || [];
        message.aggregateExchangeRatePrevotes =
            ((_d = object.aggregateExchangeRatePrevotes) === null || _d === void 0 ? void 0 : _d.map((e) => oracle_1.AggregateExchangeRatePrevote.fromPartial(e))) || [];
        message.aggregateExchangeRateVotes =
            ((_e = object.aggregateExchangeRateVotes) === null || _e === void 0 ? void 0 : _e.map((e) => oracle_1.AggregateExchangeRateVote.fromPartial(e))) || [];
        message.pairs = ((_f = object.pairs) === null || _f === void 0 ? void 0 : _f.map((e) => e)) || [];
        message.pairRewards =
            ((_g = object.pairRewards) === null || _g === void 0 ? void 0 : _g.map((e) => oracle_1.PairReward.fromPartial(e))) || [];
        return message;
    },
};
function createBaseFeederDelegation() {
    return { feederAddress: "", validatorAddress: "" };
}
exports.FeederDelegation = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.feederAddress !== "") {
            writer.uint32(10).string(message.feederAddress);
        }
        if (message.validatorAddress !== "") {
            writer.uint32(18).string(message.validatorAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeederDelegation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.feederAddress = reader.string();
                    break;
                case 2:
                    message.validatorAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            feederAddress: isSet(object.feederAddress) ? String(object.feederAddress) : "",
            validatorAddress: isSet(object.validatorAddress)
                ? String(object.validatorAddress)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.feederAddress !== undefined && (obj.feederAddress = message.feederAddress);
        message.validatorAddress !== undefined &&
            (obj.validatorAddress = message.validatorAddress);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseFeederDelegation();
        message.feederAddress = (_a = object.feederAddress) !== null && _a !== void 0 ? _a : "";
        message.validatorAddress = (_b = object.validatorAddress) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMissCounter() {
    return { validatorAddress: "", missCounter: long_1.default.UZERO };
}
exports.MissCounter = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.validatorAddress !== "") {
            writer.uint32(10).string(message.validatorAddress);
        }
        if (!message.missCounter.isZero()) {
            writer.uint32(16).uint64(message.missCounter);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMissCounter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.validatorAddress = reader.string();
                    break;
                case 2:
                    message.missCounter = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            validatorAddress: isSet(object.validatorAddress)
                ? String(object.validatorAddress)
                : "",
            missCounter: isSet(object.missCounter)
                ? long_1.default.fromValue(object.missCounter)
                : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.validatorAddress !== undefined &&
            (obj.validatorAddress = message.validatorAddress);
        message.missCounter !== undefined &&
            (obj.missCounter = (message.missCounter || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMissCounter();
        message.validatorAddress = (_a = object.validatorAddress) !== null && _a !== void 0 ? _a : "";
        message.missCounter =
            object.missCounter !== undefined && object.missCounter !== null
                ? long_1.default.fromValue(object.missCounter)
                : long_1.default.UZERO;
        return message;
    },
};
if (_m0.util.Long !== long_1.default) {
    _m0.util.Long = long_1.default;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=genesis.js.map