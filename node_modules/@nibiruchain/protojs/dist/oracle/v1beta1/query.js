"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryAggregateVotesResponse = exports.QueryAggregateVotesRequest = exports.QueryAggregateVoteResponse = exports.QueryAggregateVoteRequest = exports.QueryAggregatePrevotesResponse = exports.QueryAggregatePrevotesRequest = exports.QueryAggregatePrevoteResponse = exports.QueryAggregatePrevoteRequest = exports.QueryMissCounterResponse = exports.QueryMissCounterRequest = exports.QueryFeederDelegationResponse = exports.QueryFeederDelegationRequest = exports.QueryVoteTargetsResponse = exports.QueryVoteTargetsRequest = exports.QueryActivesResponse = exports.QueryActivesRequest = exports.QueryExchangeRatesResponse = exports.QueryExchangeRatesRequest = exports.QueryExchangeRateResponse = exports.QueryExchangeRateRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const oracle_1 = require("./oracle");
const long_1 = __importDefault(require("long"));
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "nibiru.oracle.v1beta1";
function createBaseQueryExchangeRateRequest() {
    return { pair: "" };
}
exports.QueryExchangeRateRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(10).string(message.pair);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryExchangeRateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pair = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryExchangeRateRequest();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryExchangeRateResponse() {
    return { exchangeRate: "" };
}
exports.QueryExchangeRateResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.exchangeRate !== "") {
            writer.uint32(10).string(message.exchangeRate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryExchangeRateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.exchangeRate = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            exchangeRate: isSet(object.exchangeRate) ? String(object.exchangeRate) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.exchangeRate !== undefined && (obj.exchangeRate = message.exchangeRate);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryExchangeRateResponse();
        message.exchangeRate = (_a = object.exchangeRate) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryExchangeRatesRequest() {
    return {};
}
exports.QueryExchangeRatesRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryExchangeRatesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryExchangeRatesRequest();
        return message;
    },
};
function createBaseQueryExchangeRatesResponse() {
    return { exchangeRates: [] };
}
exports.QueryExchangeRatesResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.exchangeRates) {
            oracle_1.ExchangeRateTuple.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryExchangeRatesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.exchangeRates.push(oracle_1.ExchangeRateTuple.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            exchangeRates: Array.isArray(object === null || object === void 0 ? void 0 : object.exchangeRates)
                ? object.exchangeRates.map((e) => oracle_1.ExchangeRateTuple.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.exchangeRates) {
            obj.exchangeRates = message.exchangeRates.map((e) => e ? oracle_1.ExchangeRateTuple.toJSON(e) : undefined);
        }
        else {
            obj.exchangeRates = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryExchangeRatesResponse();
        message.exchangeRates =
            ((_a = object.exchangeRates) === null || _a === void 0 ? void 0 : _a.map((e) => oracle_1.ExchangeRateTuple.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryActivesRequest() {
    return {};
}
exports.QueryActivesRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryActivesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryActivesRequest();
        return message;
    },
};
function createBaseQueryActivesResponse() {
    return { actives: [] };
}
exports.QueryActivesResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.actives) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryActivesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.actives.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            actives: Array.isArray(object === null || object === void 0 ? void 0 : object.actives)
                ? object.actives.map((e) => String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.actives) {
            obj.actives = message.actives.map((e) => e);
        }
        else {
            obj.actives = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryActivesResponse();
        message.actives = ((_a = object.actives) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseQueryVoteTargetsRequest() {
    return {};
}
exports.QueryVoteTargetsRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryVoteTargetsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryVoteTargetsRequest();
        return message;
    },
};
function createBaseQueryVoteTargetsResponse() {
    return { voteTargets: [] };
}
exports.QueryVoteTargetsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.voteTargets) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryVoteTargetsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.voteTargets.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            voteTargets: Array.isArray(object === null || object === void 0 ? void 0 : object.voteTargets)
                ? object.voteTargets.map((e) => String(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.voteTargets) {
            obj.voteTargets = message.voteTargets.map((e) => e);
        }
        else {
            obj.voteTargets = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryVoteTargetsResponse();
        message.voteTargets = ((_a = object.voteTargets) === null || _a === void 0 ? void 0 : _a.map((e) => e)) || [];
        return message;
    },
};
function createBaseQueryFeederDelegationRequest() {
    return { validatorAddr: "" };
}
exports.QueryFeederDelegationRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.validatorAddr !== "") {
            writer.uint32(10).string(message.validatorAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFeederDelegationRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.validatorAddr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            validatorAddr: isSet(object.validatorAddr) ? String(object.validatorAddr) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryFeederDelegationRequest();
        message.validatorAddr = (_a = object.validatorAddr) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryFeederDelegationResponse() {
    return { feederAddr: "" };
}
exports.QueryFeederDelegationResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.feederAddr !== "") {
            writer.uint32(10).string(message.feederAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryFeederDelegationResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.feederAddr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            feederAddr: isSet(object.feederAddr) ? String(object.feederAddr) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.feederAddr !== undefined && (obj.feederAddr = message.feederAddr);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryFeederDelegationResponse();
        message.feederAddr = (_a = object.feederAddr) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryMissCounterRequest() {
    return { validatorAddr: "" };
}
exports.QueryMissCounterRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.validatorAddr !== "") {
            writer.uint32(10).string(message.validatorAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryMissCounterRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.validatorAddr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            validatorAddr: isSet(object.validatorAddr) ? String(object.validatorAddr) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryMissCounterRequest();
        message.validatorAddr = (_a = object.validatorAddr) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryMissCounterResponse() {
    return { missCounter: long_1.default.UZERO };
}
exports.QueryMissCounterResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (!message.missCounter.isZero()) {
            writer.uint32(8).uint64(message.missCounter);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryMissCounterResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.missCounter = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            missCounter: isSet(object.missCounter)
                ? long_1.default.fromValue(object.missCounter)
                : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.missCounter !== undefined &&
            (obj.missCounter = (message.missCounter || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryMissCounterResponse();
        message.missCounter =
            object.missCounter !== undefined && object.missCounter !== null
                ? long_1.default.fromValue(object.missCounter)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryAggregatePrevoteRequest() {
    return { validatorAddr: "" };
}
exports.QueryAggregatePrevoteRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.validatorAddr !== "") {
            writer.uint32(10).string(message.validatorAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAggregatePrevoteRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.validatorAddr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            validatorAddr: isSet(object.validatorAddr) ? String(object.validatorAddr) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryAggregatePrevoteRequest();
        message.validatorAddr = (_a = object.validatorAddr) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryAggregatePrevoteResponse() {
    return { aggregatePrevote: undefined };
}
exports.QueryAggregatePrevoteResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.aggregatePrevote !== undefined) {
            oracle_1.AggregateExchangeRatePrevote.encode(message.aggregatePrevote, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAggregatePrevoteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.aggregatePrevote = oracle_1.AggregateExchangeRatePrevote.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            aggregatePrevote: isSet(object.aggregatePrevote)
                ? oracle_1.AggregateExchangeRatePrevote.fromJSON(object.aggregatePrevote)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.aggregatePrevote !== undefined &&
            (obj.aggregatePrevote = message.aggregatePrevote
                ? oracle_1.AggregateExchangeRatePrevote.toJSON(message.aggregatePrevote)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryAggregatePrevoteResponse();
        message.aggregatePrevote =
            object.aggregatePrevote !== undefined && object.aggregatePrevote !== null
                ? oracle_1.AggregateExchangeRatePrevote.fromPartial(object.aggregatePrevote)
                : undefined;
        return message;
    },
};
function createBaseQueryAggregatePrevotesRequest() {
    return {};
}
exports.QueryAggregatePrevotesRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAggregatePrevotesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryAggregatePrevotesRequest();
        return message;
    },
};
function createBaseQueryAggregatePrevotesResponse() {
    return { aggregatePrevotes: [] };
}
exports.QueryAggregatePrevotesResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.aggregatePrevotes) {
            oracle_1.AggregateExchangeRatePrevote.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAggregatePrevotesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.aggregatePrevotes.push(oracle_1.AggregateExchangeRatePrevote.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            aggregatePrevotes: Array.isArray(object === null || object === void 0 ? void 0 : object.aggregatePrevotes)
                ? object.aggregatePrevotes.map((e) => oracle_1.AggregateExchangeRatePrevote.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.aggregatePrevotes) {
            obj.aggregatePrevotes = message.aggregatePrevotes.map((e) => e ? oracle_1.AggregateExchangeRatePrevote.toJSON(e) : undefined);
        }
        else {
            obj.aggregatePrevotes = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryAggregatePrevotesResponse();
        message.aggregatePrevotes =
            ((_a = object.aggregatePrevotes) === null || _a === void 0 ? void 0 : _a.map((e) => oracle_1.AggregateExchangeRatePrevote.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryAggregateVoteRequest() {
    return { validatorAddr: "" };
}
exports.QueryAggregateVoteRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.validatorAddr !== "") {
            writer.uint32(10).string(message.validatorAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAggregateVoteRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.validatorAddr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            validatorAddr: isSet(object.validatorAddr) ? String(object.validatorAddr) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.validatorAddr !== undefined && (obj.validatorAddr = message.validatorAddr);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryAggregateVoteRequest();
        message.validatorAddr = (_a = object.validatorAddr) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryAggregateVoteResponse() {
    return { aggregateVote: undefined };
}
exports.QueryAggregateVoteResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.aggregateVote !== undefined) {
            oracle_1.AggregateExchangeRateVote.encode(message.aggregateVote, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAggregateVoteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.aggregateVote = oracle_1.AggregateExchangeRateVote.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            aggregateVote: isSet(object.aggregateVote)
                ? oracle_1.AggregateExchangeRateVote.fromJSON(object.aggregateVote)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.aggregateVote !== undefined &&
            (obj.aggregateVote = message.aggregateVote
                ? oracle_1.AggregateExchangeRateVote.toJSON(message.aggregateVote)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryAggregateVoteResponse();
        message.aggregateVote =
            object.aggregateVote !== undefined && object.aggregateVote !== null
                ? oracle_1.AggregateExchangeRateVote.fromPartial(object.aggregateVote)
                : undefined;
        return message;
    },
};
function createBaseQueryAggregateVotesRequest() {
    return {};
}
exports.QueryAggregateVotesRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAggregateVotesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryAggregateVotesRequest();
        return message;
    },
};
function createBaseQueryAggregateVotesResponse() {
    return { aggregateVotes: [] };
}
exports.QueryAggregateVotesResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.aggregateVotes) {
            oracle_1.AggregateExchangeRateVote.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAggregateVotesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.aggregateVotes.push(oracle_1.AggregateExchangeRateVote.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            aggregateVotes: Array.isArray(object === null || object === void 0 ? void 0 : object.aggregateVotes)
                ? object.aggregateVotes.map((e) => oracle_1.AggregateExchangeRateVote.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.aggregateVotes) {
            obj.aggregateVotes = message.aggregateVotes.map((e) => e ? oracle_1.AggregateExchangeRateVote.toJSON(e) : undefined);
        }
        else {
            obj.aggregateVotes = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryAggregateVotesResponse();
        message.aggregateVotes =
            ((_a = object.aggregateVotes) === null || _a === void 0 ? void 0 : _a.map((e) => oracle_1.AggregateExchangeRateVote.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.params !== undefined) {
            oracle_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = oracle_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? oracle_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined &&
            (obj.params = message.params ? oracle_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params =
            object.params !== undefined && object.params !== null
                ? oracle_1.Params.fromPartial(object.params)
                : undefined;
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.ExchangeRate = this.ExchangeRate.bind(this);
        this.ExchangeRateTwap = this.ExchangeRateTwap.bind(this);
        this.ExchangeRates = this.ExchangeRates.bind(this);
        this.Actives = this.Actives.bind(this);
        this.VoteTargets = this.VoteTargets.bind(this);
        this.FeederDelegation = this.FeederDelegation.bind(this);
        this.MissCounter = this.MissCounter.bind(this);
        this.AggregatePrevote = this.AggregatePrevote.bind(this);
        this.AggregatePrevotes = this.AggregatePrevotes.bind(this);
        this.AggregateVote = this.AggregateVote.bind(this);
        this.AggregateVotes = this.AggregateVotes.bind(this);
        this.Params = this.Params.bind(this);
    }
    ExchangeRate(request) {
        const data = exports.QueryExchangeRateRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.oracle.v1beta1.Query", "ExchangeRate", data);
        return promise.then((data) => exports.QueryExchangeRateResponse.decode(new _m0.Reader(data)));
    }
    ExchangeRateTwap(request) {
        const data = exports.QueryExchangeRateRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.oracle.v1beta1.Query", "ExchangeRateTwap", data);
        return promise.then((data) => exports.QueryExchangeRateResponse.decode(new _m0.Reader(data)));
    }
    ExchangeRates(request) {
        const data = exports.QueryExchangeRatesRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.oracle.v1beta1.Query", "ExchangeRates", data);
        return promise.then((data) => exports.QueryExchangeRatesResponse.decode(new _m0.Reader(data)));
    }
    Actives(request) {
        const data = exports.QueryActivesRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.oracle.v1beta1.Query", "Actives", data);
        return promise.then((data) => exports.QueryActivesResponse.decode(new _m0.Reader(data)));
    }
    VoteTargets(request) {
        const data = exports.QueryVoteTargetsRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.oracle.v1beta1.Query", "VoteTargets", data);
        return promise.then((data) => exports.QueryVoteTargetsResponse.decode(new _m0.Reader(data)));
    }
    FeederDelegation(request) {
        const data = exports.QueryFeederDelegationRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.oracle.v1beta1.Query", "FeederDelegation", data);
        return promise.then((data) => exports.QueryFeederDelegationResponse.decode(new _m0.Reader(data)));
    }
    MissCounter(request) {
        const data = exports.QueryMissCounterRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.oracle.v1beta1.Query", "MissCounter", data);
        return promise.then((data) => exports.QueryMissCounterResponse.decode(new _m0.Reader(data)));
    }
    AggregatePrevote(request) {
        const data = exports.QueryAggregatePrevoteRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.oracle.v1beta1.Query", "AggregatePrevote", data);
        return promise.then((data) => exports.QueryAggregatePrevoteResponse.decode(new _m0.Reader(data)));
    }
    AggregatePrevotes(request) {
        const data = exports.QueryAggregatePrevotesRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.oracle.v1beta1.Query", "AggregatePrevotes", data);
        return promise.then((data) => exports.QueryAggregatePrevotesResponse.decode(new _m0.Reader(data)));
    }
    AggregateVote(request) {
        const data = exports.QueryAggregateVoteRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.oracle.v1beta1.Query", "AggregateVote", data);
        return promise.then((data) => exports.QueryAggregateVoteResponse.decode(new _m0.Reader(data)));
    }
    AggregateVotes(request) {
        const data = exports.QueryAggregateVotesRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.oracle.v1beta1.Query", "AggregateVotes", data);
        return promise.then((data) => exports.QueryAggregateVotesResponse.decode(new _m0.Reader(data)));
    }
    Params(request) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.oracle.v1beta1.Query", "Params", data);
        return promise.then((data) => exports.QueryParamsResponse.decode(new _m0.Reader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
if (_m0.util.Long !== long_1.default) {
    _m0.util.Long = long_1.default;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=query.js.map