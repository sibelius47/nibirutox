import { AggregateExchangeRatePrevote, AggregateExchangeRateVote, Params, ExchangeRateTuple } from "./oracle";
import Long from "long";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "nibiru.oracle.v1beta1";
/** QueryExchangeRateRequest is the request type for the Query/ExchangeRate RPC method. */
export interface QueryExchangeRateRequest {
    /** pair defines the pair to query for. */
    pair: string;
}
/**
 * QueryExchangeRateResponse is response type for the
 * Query/ExchangeRate RPC method.
 */
export interface QueryExchangeRateResponse {
    /** exchange_rate defines the exchange rate of assets voted by validators */
    exchangeRate: string;
}
/** QueryExchangeRatesRequest is the request type for the Query/ExchangeRates RPC method. */
export interface QueryExchangeRatesRequest {
}
/**
 * QueryExchangeRatesResponse is response type for the
 * Query/ExchangeRates RPC method.
 */
export interface QueryExchangeRatesResponse {
    /** exchange_rates defines a list of the exchange rate for all whitelisted pairs. */
    exchangeRates: ExchangeRateTuple[];
}
/** QueryActivesRequest is the request type for the Query/Actives RPC method. */
export interface QueryActivesRequest {
}
/**
 * QueryActivesResponse is response type for the
 * Query/Actives RPC method.
 */
export interface QueryActivesResponse {
    /** actives defines a list of the pair which oracle prices agreed upon. */
    actives: string[];
}
/** QueryVoteTargetsRequest is the request type for the Query/VoteTargets RPC method. */
export interface QueryVoteTargetsRequest {
}
/**
 * QueryVoteTargetsResponse is response type for the
 * Query/VoteTargets RPC method.
 */
export interface QueryVoteTargetsResponse {
    /**
     * vote_targets defines a list of the pairs in which everyone
     * should vote in the current vote period.
     */
    voteTargets: string[];
}
/** QueryFeederDelegationRequest is the request type for the Query/FeederDelegation RPC method. */
export interface QueryFeederDelegationRequest {
    /** validator defines the validator address to query for. */
    validatorAddr: string;
}
/**
 * QueryFeederDelegationResponse is response type for the
 * Query/FeederDelegation RPC method.
 */
export interface QueryFeederDelegationResponse {
    /** feeder_addr defines the feeder delegation of a validator */
    feederAddr: string;
}
/** QueryMissCounterRequest is the request type for the Query/MissCounter RPC method. */
export interface QueryMissCounterRequest {
    /** validator defines the validator address to query for. */
    validatorAddr: string;
}
/**
 * QueryMissCounterResponse is response type for the
 * Query/MissCounter RPC method.
 */
export interface QueryMissCounterResponse {
    /** miss_counter defines the oracle miss counter of a validator */
    missCounter: Long;
}
/** QueryAggregatePrevoteRequest is the request type for the Query/AggregatePrevote RPC method. */
export interface QueryAggregatePrevoteRequest {
    /** validator defines the validator address to query for. */
    validatorAddr: string;
}
/**
 * QueryAggregatePrevoteResponse is response type for the
 * Query/AggregatePrevote RPC method.
 */
export interface QueryAggregatePrevoteResponse {
    /** aggregate_prevote defines oracle aggregate prevote submitted by a validator in the current vote period */
    aggregatePrevote?: AggregateExchangeRatePrevote;
}
/** QueryAggregatePrevotesRequest is the request type for the Query/AggregatePrevotes RPC method. */
export interface QueryAggregatePrevotesRequest {
}
/**
 * QueryAggregatePrevotesResponse is response type for the
 * Query/AggregatePrevotes RPC method.
 */
export interface QueryAggregatePrevotesResponse {
    /** aggregate_prevotes defines all oracle aggregate prevotes submitted in the current vote period */
    aggregatePrevotes: AggregateExchangeRatePrevote[];
}
/** QueryAggregateVoteRequest is the request type for the Query/AggregateVote RPC method. */
export interface QueryAggregateVoteRequest {
    /** validator defines the validator address to query for. */
    validatorAddr: string;
}
/**
 * QueryAggregateVoteResponse is response type for the
 * Query/AggregateVote RPC method.
 */
export interface QueryAggregateVoteResponse {
    /** aggregate_vote defines oracle aggregate vote submitted by a validator in the current vote period */
    aggregateVote?: AggregateExchangeRateVote;
}
/** QueryAggregateVotesRequest is the request type for the Query/AggregateVotes RPC method. */
export interface QueryAggregateVotesRequest {
}
/**
 * QueryAggregateVotesResponse is response type for the
 * Query/AggregateVotes RPC method.
 */
export interface QueryAggregateVotesResponse {
    /** aggregate_votes defines all oracle aggregate votes submitted in the current vote period */
    aggregateVotes: AggregateExchangeRateVote[];
}
/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** params defines the parameters of the module. */
    params?: Params;
}
export declare const QueryExchangeRateRequest: {
    encode(message: QueryExchangeRateRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryExchangeRateRequest;
    fromJSON(object: any): QueryExchangeRateRequest;
    toJSON(message: QueryExchangeRateRequest): unknown;
    fromPartial<I extends {
        pair?: string | undefined;
    } & {
        pair?: string | undefined;
    } & Record<Exclude<keyof I, "pair">, never>>(object: I): QueryExchangeRateRequest;
};
export declare const QueryExchangeRateResponse: {
    encode(message: QueryExchangeRateResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryExchangeRateResponse;
    fromJSON(object: any): QueryExchangeRateResponse;
    toJSON(message: QueryExchangeRateResponse): unknown;
    fromPartial<I extends {
        exchangeRate?: string | undefined;
    } & {
        exchangeRate?: string | undefined;
    } & Record<Exclude<keyof I, "exchangeRate">, never>>(object: I): QueryExchangeRateResponse;
};
export declare const QueryExchangeRatesRequest: {
    encode(_: QueryExchangeRatesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryExchangeRatesRequest;
    fromJSON(_: any): QueryExchangeRatesRequest;
    toJSON(_: QueryExchangeRatesRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryExchangeRatesRequest;
};
export declare const QueryExchangeRatesResponse: {
    encode(message: QueryExchangeRatesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryExchangeRatesResponse;
    fromJSON(object: any): QueryExchangeRatesResponse;
    toJSON(message: QueryExchangeRatesResponse): unknown;
    fromPartial<I extends {
        exchangeRates?: {
            pair?: string | undefined;
            exchangeRate?: string | undefined;
        }[] | undefined;
    } & {
        exchangeRates?: ({
            pair?: string | undefined;
            exchangeRate?: string | undefined;
        }[] & ({
            pair?: string | undefined;
            exchangeRate?: string | undefined;
        } & {
            pair?: string | undefined;
            exchangeRate?: string | undefined;
        } & Record<Exclude<keyof I["exchangeRates"][number], keyof ExchangeRateTuple>, never>)[] & Record<Exclude<keyof I["exchangeRates"], keyof {
            pair?: string | undefined;
            exchangeRate?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "exchangeRates">, never>>(object: I): QueryExchangeRatesResponse;
};
export declare const QueryActivesRequest: {
    encode(_: QueryActivesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryActivesRequest;
    fromJSON(_: any): QueryActivesRequest;
    toJSON(_: QueryActivesRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryActivesRequest;
};
export declare const QueryActivesResponse: {
    encode(message: QueryActivesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryActivesResponse;
    fromJSON(object: any): QueryActivesResponse;
    toJSON(message: QueryActivesResponse): unknown;
    fromPartial<I extends {
        actives?: string[] | undefined;
    } & {
        actives?: (string[] & string[] & Record<Exclude<keyof I["actives"], keyof string[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "actives">, never>>(object: I): QueryActivesResponse;
};
export declare const QueryVoteTargetsRequest: {
    encode(_: QueryVoteTargetsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryVoteTargetsRequest;
    fromJSON(_: any): QueryVoteTargetsRequest;
    toJSON(_: QueryVoteTargetsRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryVoteTargetsRequest;
};
export declare const QueryVoteTargetsResponse: {
    encode(message: QueryVoteTargetsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryVoteTargetsResponse;
    fromJSON(object: any): QueryVoteTargetsResponse;
    toJSON(message: QueryVoteTargetsResponse): unknown;
    fromPartial<I extends {
        voteTargets?: string[] | undefined;
    } & {
        voteTargets?: (string[] & string[] & Record<Exclude<keyof I["voteTargets"], keyof string[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "voteTargets">, never>>(object: I): QueryVoteTargetsResponse;
};
export declare const QueryFeederDelegationRequest: {
    encode(message: QueryFeederDelegationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryFeederDelegationRequest;
    fromJSON(object: any): QueryFeederDelegationRequest;
    toJSON(message: QueryFeederDelegationRequest): unknown;
    fromPartial<I extends {
        validatorAddr?: string | undefined;
    } & {
        validatorAddr?: string | undefined;
    } & Record<Exclude<keyof I, "validatorAddr">, never>>(object: I): QueryFeederDelegationRequest;
};
export declare const QueryFeederDelegationResponse: {
    encode(message: QueryFeederDelegationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryFeederDelegationResponse;
    fromJSON(object: any): QueryFeederDelegationResponse;
    toJSON(message: QueryFeederDelegationResponse): unknown;
    fromPartial<I extends {
        feederAddr?: string | undefined;
    } & {
        feederAddr?: string | undefined;
    } & Record<Exclude<keyof I, "feederAddr">, never>>(object: I): QueryFeederDelegationResponse;
};
export declare const QueryMissCounterRequest: {
    encode(message: QueryMissCounterRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryMissCounterRequest;
    fromJSON(object: any): QueryMissCounterRequest;
    toJSON(message: QueryMissCounterRequest): unknown;
    fromPartial<I extends {
        validatorAddr?: string | undefined;
    } & {
        validatorAddr?: string | undefined;
    } & Record<Exclude<keyof I, "validatorAddr">, never>>(object: I): QueryMissCounterRequest;
};
export declare const QueryMissCounterResponse: {
    encode(message: QueryMissCounterResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryMissCounterResponse;
    fromJSON(object: any): QueryMissCounterResponse;
    toJSON(message: QueryMissCounterResponse): unknown;
    fromPartial<I extends {
        missCounter?: string | number | Long.Long | undefined;
    } & {
        missCounter?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["missCounter"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, "missCounter">, never>>(object: I): QueryMissCounterResponse;
};
export declare const QueryAggregatePrevoteRequest: {
    encode(message: QueryAggregatePrevoteRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAggregatePrevoteRequest;
    fromJSON(object: any): QueryAggregatePrevoteRequest;
    toJSON(message: QueryAggregatePrevoteRequest): unknown;
    fromPartial<I extends {
        validatorAddr?: string | undefined;
    } & {
        validatorAddr?: string | undefined;
    } & Record<Exclude<keyof I, "validatorAddr">, never>>(object: I): QueryAggregatePrevoteRequest;
};
export declare const QueryAggregatePrevoteResponse: {
    encode(message: QueryAggregatePrevoteResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAggregatePrevoteResponse;
    fromJSON(object: any): QueryAggregatePrevoteResponse;
    toJSON(message: QueryAggregatePrevoteResponse): unknown;
    fromPartial<I extends {
        aggregatePrevote?: {
            hash?: string | undefined;
            voter?: string | undefined;
            submitBlock?: string | number | Long.Long | undefined;
        } | undefined;
    } & {
        aggregatePrevote?: ({
            hash?: string | undefined;
            voter?: string | undefined;
            submitBlock?: string | number | Long.Long | undefined;
        } & {
            hash?: string | undefined;
            voter?: string | undefined;
            submitBlock?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["aggregatePrevote"]["submitBlock"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["aggregatePrevote"], keyof AggregateExchangeRatePrevote>, never>) | undefined;
    } & Record<Exclude<keyof I, "aggregatePrevote">, never>>(object: I): QueryAggregatePrevoteResponse;
};
export declare const QueryAggregatePrevotesRequest: {
    encode(_: QueryAggregatePrevotesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAggregatePrevotesRequest;
    fromJSON(_: any): QueryAggregatePrevotesRequest;
    toJSON(_: QueryAggregatePrevotesRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryAggregatePrevotesRequest;
};
export declare const QueryAggregatePrevotesResponse: {
    encode(message: QueryAggregatePrevotesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAggregatePrevotesResponse;
    fromJSON(object: any): QueryAggregatePrevotesResponse;
    toJSON(message: QueryAggregatePrevotesResponse): unknown;
    fromPartial<I extends {
        aggregatePrevotes?: {
            hash?: string | undefined;
            voter?: string | undefined;
            submitBlock?: string | number | Long.Long | undefined;
        }[] | undefined;
    } & {
        aggregatePrevotes?: ({
            hash?: string | undefined;
            voter?: string | undefined;
            submitBlock?: string | number | Long.Long | undefined;
        }[] & ({
            hash?: string | undefined;
            voter?: string | undefined;
            submitBlock?: string | number | Long.Long | undefined;
        } & {
            hash?: string | undefined;
            voter?: string | undefined;
            submitBlock?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["aggregatePrevotes"][number]["submitBlock"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["aggregatePrevotes"][number], keyof AggregateExchangeRatePrevote>, never>)[] & Record<Exclude<keyof I["aggregatePrevotes"], keyof {
            hash?: string | undefined;
            voter?: string | undefined;
            submitBlock?: string | number | Long.Long | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "aggregatePrevotes">, never>>(object: I): QueryAggregatePrevotesResponse;
};
export declare const QueryAggregateVoteRequest: {
    encode(message: QueryAggregateVoteRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAggregateVoteRequest;
    fromJSON(object: any): QueryAggregateVoteRequest;
    toJSON(message: QueryAggregateVoteRequest): unknown;
    fromPartial<I extends {
        validatorAddr?: string | undefined;
    } & {
        validatorAddr?: string | undefined;
    } & Record<Exclude<keyof I, "validatorAddr">, never>>(object: I): QueryAggregateVoteRequest;
};
export declare const QueryAggregateVoteResponse: {
    encode(message: QueryAggregateVoteResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAggregateVoteResponse;
    fromJSON(object: any): QueryAggregateVoteResponse;
    toJSON(message: QueryAggregateVoteResponse): unknown;
    fromPartial<I extends {
        aggregateVote?: {
            exchangeRateTuples?: {
                pair?: string | undefined;
                exchangeRate?: string | undefined;
            }[] | undefined;
            voter?: string | undefined;
        } | undefined;
    } & {
        aggregateVote?: ({
            exchangeRateTuples?: {
                pair?: string | undefined;
                exchangeRate?: string | undefined;
            }[] | undefined;
            voter?: string | undefined;
        } & {
            exchangeRateTuples?: ({
                pair?: string | undefined;
                exchangeRate?: string | undefined;
            }[] & ({
                pair?: string | undefined;
                exchangeRate?: string | undefined;
            } & {
                pair?: string | undefined;
                exchangeRate?: string | undefined;
            } & Record<Exclude<keyof I["aggregateVote"]["exchangeRateTuples"][number], keyof ExchangeRateTuple>, never>)[] & Record<Exclude<keyof I["aggregateVote"]["exchangeRateTuples"], keyof {
                pair?: string | undefined;
                exchangeRate?: string | undefined;
            }[]>, never>) | undefined;
            voter?: string | undefined;
        } & Record<Exclude<keyof I["aggregateVote"], keyof AggregateExchangeRateVote>, never>) | undefined;
    } & Record<Exclude<keyof I, "aggregateVote">, never>>(object: I): QueryAggregateVoteResponse;
};
export declare const QueryAggregateVotesRequest: {
    encode(_: QueryAggregateVotesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAggregateVotesRequest;
    fromJSON(_: any): QueryAggregateVotesRequest;
    toJSON(_: QueryAggregateVotesRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryAggregateVotesRequest;
};
export declare const QueryAggregateVotesResponse: {
    encode(message: QueryAggregateVotesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAggregateVotesResponse;
    fromJSON(object: any): QueryAggregateVotesResponse;
    toJSON(message: QueryAggregateVotesResponse): unknown;
    fromPartial<I extends {
        aggregateVotes?: {
            exchangeRateTuples?: {
                pair?: string | undefined;
                exchangeRate?: string | undefined;
            }[] | undefined;
            voter?: string | undefined;
        }[] | undefined;
    } & {
        aggregateVotes?: ({
            exchangeRateTuples?: {
                pair?: string | undefined;
                exchangeRate?: string | undefined;
            }[] | undefined;
            voter?: string | undefined;
        }[] & ({
            exchangeRateTuples?: {
                pair?: string | undefined;
                exchangeRate?: string | undefined;
            }[] | undefined;
            voter?: string | undefined;
        } & {
            exchangeRateTuples?: ({
                pair?: string | undefined;
                exchangeRate?: string | undefined;
            }[] & ({
                pair?: string | undefined;
                exchangeRate?: string | undefined;
            } & {
                pair?: string | undefined;
                exchangeRate?: string | undefined;
            } & Record<Exclude<keyof I["aggregateVotes"][number]["exchangeRateTuples"][number], keyof ExchangeRateTuple>, never>)[] & Record<Exclude<keyof I["aggregateVotes"][number]["exchangeRateTuples"], keyof {
                pair?: string | undefined;
                exchangeRate?: string | undefined;
            }[]>, never>) | undefined;
            voter?: string | undefined;
        } & Record<Exclude<keyof I["aggregateVotes"][number], keyof AggregateExchangeRateVote>, never>)[] & Record<Exclude<keyof I["aggregateVotes"], keyof {
            exchangeRateTuples?: {
                pair?: string | undefined;
                exchangeRate?: string | undefined;
            }[] | undefined;
            voter?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, "aggregateVotes">, never>>(object: I): QueryAggregateVotesResponse;
};
export declare const QueryParamsRequest: {
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryParamsRequest;
};
export declare const QueryParamsResponse: {
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    fromPartial<I extends {
        params?: {
            votePeriod?: string | number | Long.Long | undefined;
            voteThreshold?: string | undefined;
            rewardBand?: string | undefined;
            whitelist?: string[] | undefined;
            slashFraction?: string | undefined;
            slashWindow?: string | number | Long.Long | undefined;
            minValidPerWindow?: string | undefined;
            twapLookbackWindow?: {
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            minVoters?: string | number | Long.Long | undefined;
        } | undefined;
    } & {
        params?: ({
            votePeriod?: string | number | Long.Long | undefined;
            voteThreshold?: string | undefined;
            rewardBand?: string | undefined;
            whitelist?: string[] | undefined;
            slashFraction?: string | undefined;
            slashWindow?: string | number | Long.Long | undefined;
            minValidPerWindow?: string | undefined;
            twapLookbackWindow?: {
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            minVoters?: string | number | Long.Long | undefined;
        } & {
            votePeriod?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["params"]["votePeriod"], keyof Long.Long>, never>) | undefined;
            voteThreshold?: string | undefined;
            rewardBand?: string | undefined;
            whitelist?: (string[] & string[] & Record<Exclude<keyof I["params"]["whitelist"], keyof string[]>, never>) | undefined;
            slashFraction?: string | undefined;
            slashWindow?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["params"]["slashWindow"], keyof Long.Long>, never>) | undefined;
            minValidPerWindow?: string | undefined;
            twapLookbackWindow?: ({
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["params"]["twapLookbackWindow"]["seconds"], keyof Long.Long>, never>) | undefined;
                nanos?: number | undefined;
            } & Record<Exclude<keyof I["params"]["twapLookbackWindow"], keyof import("../../google/protobuf/duration").Duration>, never>) | undefined;
            minVoters?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["params"]["minVoters"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["params"], keyof Params>, never>) | undefined;
    } & Record<Exclude<keyof I, "params">, never>>(object: I): QueryParamsResponse;
};
/** Query defines the gRPC querier service. */
export interface Query {
    /** ExchangeRate returns exchange rate of a pair */
    ExchangeRate(request: QueryExchangeRateRequest): Promise<QueryExchangeRateResponse>;
    /** ExchangeRateTwap returns twap exchange rate of a pair */
    ExchangeRateTwap(request: QueryExchangeRateRequest): Promise<QueryExchangeRateResponse>;
    /** ExchangeRates returns exchange rates of all pairs */
    ExchangeRates(request: QueryExchangeRatesRequest): Promise<QueryExchangeRatesResponse>;
    /** Actives returns all active pairs */
    Actives(request: QueryActivesRequest): Promise<QueryActivesResponse>;
    /** VoteTargets returns all vote target for pairs */
    VoteTargets(request: QueryVoteTargetsRequest): Promise<QueryVoteTargetsResponse>;
    /** FeederDelegation returns feeder delegation of a validator */
    FeederDelegation(request: QueryFeederDelegationRequest): Promise<QueryFeederDelegationResponse>;
    /** MissCounter returns oracle miss counter of a validator */
    MissCounter(request: QueryMissCounterRequest): Promise<QueryMissCounterResponse>;
    /** AggregatePrevote returns an aggregate prevote of a validator */
    AggregatePrevote(request: QueryAggregatePrevoteRequest): Promise<QueryAggregatePrevoteResponse>;
    /** AggregatePrevotes returns aggregate prevotes of all validators */
    AggregatePrevotes(request: QueryAggregatePrevotesRequest): Promise<QueryAggregatePrevotesResponse>;
    /** AggregateVote returns an aggregate vote of a validator */
    AggregateVote(request: QueryAggregateVoteRequest): Promise<QueryAggregateVoteResponse>;
    /** AggregateVotes returns aggregate votes of all validators */
    AggregateVotes(request: QueryAggregateVotesRequest): Promise<QueryAggregateVotesResponse>;
    /** Params queries all parameters. */
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    ExchangeRate(request: QueryExchangeRateRequest): Promise<QueryExchangeRateResponse>;
    ExchangeRateTwap(request: QueryExchangeRateRequest): Promise<QueryExchangeRateResponse>;
    ExchangeRates(request: QueryExchangeRatesRequest): Promise<QueryExchangeRatesResponse>;
    Actives(request: QueryActivesRequest): Promise<QueryActivesResponse>;
    VoteTargets(request: QueryVoteTargetsRequest): Promise<QueryVoteTargetsResponse>;
    FeederDelegation(request: QueryFeederDelegationRequest): Promise<QueryFeederDelegationResponse>;
    MissCounter(request: QueryMissCounterRequest): Promise<QueryMissCounterResponse>;
    AggregatePrevote(request: QueryAggregatePrevoteRequest): Promise<QueryAggregatePrevoteResponse>;
    AggregatePrevotes(request: QueryAggregatePrevotesRequest): Promise<QueryAggregatePrevotesResponse>;
    AggregateVote(request: QueryAggregateVoteRequest): Promise<QueryAggregateVoteResponse>;
    AggregateVotes(request: QueryAggregateVotesRequest): Promise<QueryAggregateVotesResponse>;
    Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
//# sourceMappingURL=query.d.ts.map