"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarkPriceChangedEvent = exports.SwapOnVpoolEvent = exports.ReserveSnapshotSavedEvent = exports.protobufPackage = void 0;
/* eslint-disable */
const timestamp_1 = require("../../google/protobuf/timestamp");
const long_1 = __importDefault(require("long"));
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "nibiru.vpool.v1";
function createBaseReserveSnapshotSavedEvent() {
    return {
        pair: "",
        quoteReserve: "",
        baseReserve: "",
        markPrice: "",
        blockHeight: long_1.default.ZERO,
        blockTimestamp: undefined,
    };
}
exports.ReserveSnapshotSavedEvent = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(10).string(message.pair);
        }
        if (message.quoteReserve !== "") {
            writer.uint32(18).string(message.quoteReserve);
        }
        if (message.baseReserve !== "") {
            writer.uint32(26).string(message.baseReserve);
        }
        if (message.markPrice !== "") {
            writer.uint32(34).string(message.markPrice);
        }
        if (!message.blockHeight.isZero()) {
            writer.uint32(40).int64(message.blockHeight);
        }
        if (message.blockTimestamp !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.blockTimestamp), writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReserveSnapshotSavedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pair = reader.string();
                    break;
                case 2:
                    message.quoteReserve = reader.string();
                    break;
                case 3:
                    message.baseReserve = reader.string();
                    break;
                case 4:
                    message.markPrice = reader.string();
                    break;
                case 5:
                    message.blockHeight = reader.int64();
                    break;
                case 6:
                    message.blockTimestamp = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
            quoteReserve: isSet(object.quoteReserve) ? String(object.quoteReserve) : "",
            baseReserve: isSet(object.baseReserve) ? String(object.baseReserve) : "",
            markPrice: isSet(object.markPrice) ? String(object.markPrice) : "",
            blockHeight: isSet(object.blockHeight)
                ? long_1.default.fromValue(object.blockHeight)
                : long_1.default.ZERO,
            blockTimestamp: isSet(object.blockTimestamp)
                ? fromJsonTimestamp(object.blockTimestamp)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        message.quoteReserve !== undefined && (obj.quoteReserve = message.quoteReserve);
        message.baseReserve !== undefined && (obj.baseReserve = message.baseReserve);
        message.markPrice !== undefined && (obj.markPrice = message.markPrice);
        message.blockHeight !== undefined &&
            (obj.blockHeight = (message.blockHeight || long_1.default.ZERO).toString());
        message.blockTimestamp !== undefined &&
            (obj.blockTimestamp = message.blockTimestamp.toISOString());
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseReserveSnapshotSavedEvent();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        message.quoteReserve = (_b = object.quoteReserve) !== null && _b !== void 0 ? _b : "";
        message.baseReserve = (_c = object.baseReserve) !== null && _c !== void 0 ? _c : "";
        message.markPrice = (_d = object.markPrice) !== null && _d !== void 0 ? _d : "";
        message.blockHeight =
            object.blockHeight !== undefined && object.blockHeight !== null
                ? long_1.default.fromValue(object.blockHeight)
                : long_1.default.ZERO;
        message.blockTimestamp = (_e = object.blockTimestamp) !== null && _e !== void 0 ? _e : undefined;
        return message;
    },
};
function createBaseSwapOnVpoolEvent() {
    return { pair: "", quoteAmount: "", baseAmount: "" };
}
exports.SwapOnVpoolEvent = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(10).string(message.pair);
        }
        if (message.quoteAmount !== "") {
            writer.uint32(18).string(message.quoteAmount);
        }
        if (message.baseAmount !== "") {
            writer.uint32(26).string(message.baseAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSwapOnVpoolEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pair = reader.string();
                    break;
                case 2:
                    message.quoteAmount = reader.string();
                    break;
                case 3:
                    message.baseAmount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
            quoteAmount: isSet(object.quoteAmount) ? String(object.quoteAmount) : "",
            baseAmount: isSet(object.baseAmount) ? String(object.baseAmount) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        message.quoteAmount !== undefined && (obj.quoteAmount = message.quoteAmount);
        message.baseAmount !== undefined && (obj.baseAmount = message.baseAmount);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseSwapOnVpoolEvent();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        message.quoteAmount = (_b = object.quoteAmount) !== null && _b !== void 0 ? _b : "";
        message.baseAmount = (_c = object.baseAmount) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseMarkPriceChangedEvent() {
    return { pair: "", price: "", blockTimestamp: undefined };
}
exports.MarkPriceChangedEvent = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(10).string(message.pair);
        }
        if (message.price !== "") {
            writer.uint32(18).string(message.price);
        }
        if (message.blockTimestamp !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.blockTimestamp), writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMarkPriceChangedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pair = reader.string();
                    break;
                case 2:
                    message.price = reader.string();
                    break;
                case 3:
                    message.blockTimestamp = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
            price: isSet(object.price) ? String(object.price) : "",
            blockTimestamp: isSet(object.blockTimestamp)
                ? fromJsonTimestamp(object.blockTimestamp)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        message.price !== undefined && (obj.price = message.price);
        message.blockTimestamp !== undefined &&
            (obj.blockTimestamp = message.blockTimestamp.toISOString());
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMarkPriceChangedEvent();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        message.price = (_b = object.price) !== null && _b !== void 0 ? _b : "";
        message.blockTimestamp = (_c = object.blockTimestamp) !== null && _c !== void 0 ? _c : undefined;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = numberToLong(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (_m0.util.Long !== long_1.default) {
    _m0.util.Long = long_1.default;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=event.js.map