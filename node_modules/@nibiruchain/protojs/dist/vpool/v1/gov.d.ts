import { VpoolConfig } from "./state";
import Long from "long";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "nibiru.vpool.v1";
export interface CreatePoolProposal {
    title: string;
    description: string;
    /** pair represents the pair of the vpool. */
    pair: string;
    /** quote_asset_reserve is the amount of quote asset the pool will be initialized with. */
    quoteAssetReserve: string;
    /** base_asset_reserve is the amount of base asset the pool will be initialized with. */
    baseAssetReserve: string;
    config?: VpoolConfig;
}
export interface EditPoolConfigProposal {
    title: string;
    description: string;
    pair: string;
    config?: VpoolConfig;
}
/**
 * EditSwapInvariantsProposal is a governance proposal to change the swap
 * invariant of the virtual pool for one or more trading pairs.
 */
export interface EditSwapInvariantsProposal {
    title: string;
    description: string;
    /**
     * Map from pair ID to a multiple on the swap invariant. For example, a proposal containing
     * "swap_invariant_maps": [{ "uatom:unusd": "5" }, { "uosmo:unusd": "0.9" }]
     * would mutliply the swap invariant of the ATOM and OSMO trading pairs by
     * 5 and 0.9 respectively. The price at which k changes is the instantaneous
     * mark price at the time of the proposal's execution.
     */
    swapInvariantMaps: EditSwapInvariantsProposal_SwapInvariantMultiple[];
}
/** A map between a trading pair and a desired multiplier for its swap invariant. */
export interface EditSwapInvariantsProposal_SwapInvariantMultiple {
    /** Pair is a string identifier for an asset pair. */
    pair: string;
    /**
     * Multiplier is a number representing the desired percentage change to the
     * swap invariant of the AMM pool underlying 'pair'
     */
    multiplier: string;
}
export declare const CreatePoolProposal: {
    encode(message: CreatePoolProposal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreatePoolProposal;
    fromJSON(object: any): CreatePoolProposal;
    toJSON(message: CreatePoolProposal): unknown;
    fromPartial<I extends {
        title?: string | undefined;
        description?: string | undefined;
        pair?: string | undefined;
        quoteAssetReserve?: string | undefined;
        baseAssetReserve?: string | undefined;
        config?: {
            tradeLimitRatio?: string | undefined;
            fluctuationLimitRatio?: string | undefined;
            maxOracleSpreadRatio?: string | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
        } | undefined;
    } & {
        title?: string | undefined;
        description?: string | undefined;
        pair?: string | undefined;
        quoteAssetReserve?: string | undefined;
        baseAssetReserve?: string | undefined;
        config?: ({
            tradeLimitRatio?: string | undefined;
            fluctuationLimitRatio?: string | undefined;
            maxOracleSpreadRatio?: string | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
        } & {
            tradeLimitRatio?: string | undefined;
            fluctuationLimitRatio?: string | undefined;
            maxOracleSpreadRatio?: string | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
        } & Record<Exclude<keyof I["config"], keyof VpoolConfig>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof CreatePoolProposal>, never>>(object: I): CreatePoolProposal;
};
export declare const EditPoolConfigProposal: {
    encode(message: EditPoolConfigProposal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EditPoolConfigProposal;
    fromJSON(object: any): EditPoolConfigProposal;
    toJSON(message: EditPoolConfigProposal): unknown;
    fromPartial<I extends {
        title?: string | undefined;
        description?: string | undefined;
        pair?: string | undefined;
        config?: {
            tradeLimitRatio?: string | undefined;
            fluctuationLimitRatio?: string | undefined;
            maxOracleSpreadRatio?: string | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
        } | undefined;
    } & {
        title?: string | undefined;
        description?: string | undefined;
        pair?: string | undefined;
        config?: ({
            tradeLimitRatio?: string | undefined;
            fluctuationLimitRatio?: string | undefined;
            maxOracleSpreadRatio?: string | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
        } & {
            tradeLimitRatio?: string | undefined;
            fluctuationLimitRatio?: string | undefined;
            maxOracleSpreadRatio?: string | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
        } & Record<Exclude<keyof I["config"], keyof VpoolConfig>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof EditPoolConfigProposal>, never>>(object: I): EditPoolConfigProposal;
};
export declare const EditSwapInvariantsProposal: {
    encode(message: EditSwapInvariantsProposal, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EditSwapInvariantsProposal;
    fromJSON(object: any): EditSwapInvariantsProposal;
    toJSON(message: EditSwapInvariantsProposal): unknown;
    fromPartial<I extends {
        title?: string | undefined;
        description?: string | undefined;
        swapInvariantMaps?: {
            pair?: string | undefined;
            multiplier?: string | undefined;
        }[] | undefined;
    } & {
        title?: string | undefined;
        description?: string | undefined;
        swapInvariantMaps?: ({
            pair?: string | undefined;
            multiplier?: string | undefined;
        }[] & ({
            pair?: string | undefined;
            multiplier?: string | undefined;
        } & {
            pair?: string | undefined;
            multiplier?: string | undefined;
        } & Record<Exclude<keyof I["swapInvariantMaps"][number], keyof EditSwapInvariantsProposal_SwapInvariantMultiple>, never>)[] & Record<Exclude<keyof I["swapInvariantMaps"], keyof {
            pair?: string | undefined;
            multiplier?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof EditSwapInvariantsProposal>, never>>(object: I): EditSwapInvariantsProposal;
};
export declare const EditSwapInvariantsProposal_SwapInvariantMultiple: {
    encode(message: EditSwapInvariantsProposal_SwapInvariantMultiple, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EditSwapInvariantsProposal_SwapInvariantMultiple;
    fromJSON(object: any): EditSwapInvariantsProposal_SwapInvariantMultiple;
    toJSON(message: EditSwapInvariantsProposal_SwapInvariantMultiple): unknown;
    fromPartial<I extends {
        pair?: string | undefined;
        multiplier?: string | undefined;
    } & {
        pair?: string | undefined;
        multiplier?: string | undefined;
    } & Record<Exclude<keyof I, keyof EditSwapInvariantsProposal_SwapInvariantMultiple>, never>>(object: I): EditSwapInvariantsProposal_SwapInvariantMultiple;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
//# sourceMappingURL=gov.d.ts.map