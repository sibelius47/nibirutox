"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryBaseAssetPriceResponse = exports.QueryBaseAssetPriceRequest = exports.QueryAllPoolsResponse = exports.QueryAllPoolsRequest = exports.QueryReserveAssetsResponse = exports.QueryReserveAssetsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const state_1 = require("./state");
const long_1 = __importDefault(require("long"));
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "nibiru.vpool.v1";
function createBaseQueryReserveAssetsRequest() {
    return { pair: "" };
}
exports.QueryReserveAssetsRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(10).string(message.pair);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryReserveAssetsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pair = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryReserveAssetsRequest();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryReserveAssetsResponse() {
    return { baseAssetReserve: "", quoteAssetReserve: "" };
}
exports.QueryReserveAssetsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.baseAssetReserve !== "") {
            writer.uint32(10).string(message.baseAssetReserve);
        }
        if (message.quoteAssetReserve !== "") {
            writer.uint32(18).string(message.quoteAssetReserve);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryReserveAssetsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.baseAssetReserve = reader.string();
                    break;
                case 2:
                    message.quoteAssetReserve = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            baseAssetReserve: isSet(object.baseAssetReserve)
                ? String(object.baseAssetReserve)
                : "",
            quoteAssetReserve: isSet(object.quoteAssetReserve)
                ? String(object.quoteAssetReserve)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.baseAssetReserve !== undefined &&
            (obj.baseAssetReserve = message.baseAssetReserve);
        message.quoteAssetReserve !== undefined &&
            (obj.quoteAssetReserve = message.quoteAssetReserve);
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryReserveAssetsResponse();
        message.baseAssetReserve = (_a = object.baseAssetReserve) !== null && _a !== void 0 ? _a : "";
        message.quoteAssetReserve = (_b = object.quoteAssetReserve) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryAllPoolsRequest() {
    return {};
}
exports.QueryAllPoolsRequest = {
    encode(_, writer = _m0.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAllPoolsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = createBaseQueryAllPoolsRequest();
        return message;
    },
};
function createBaseQueryAllPoolsResponse() {
    return { pools: [], prices: [] };
}
exports.QueryAllPoolsResponse = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.pools) {
            state_1.Vpool.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.prices) {
            state_1.PoolPrices.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryAllPoolsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pools.push(state_1.Vpool.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.prices.push(state_1.PoolPrices.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pools: Array.isArray(object === null || object === void 0 ? void 0 : object.pools)
                ? object.pools.map((e) => state_1.Vpool.fromJSON(e))
                : [],
            prices: Array.isArray(object === null || object === void 0 ? void 0 : object.prices)
                ? object.prices.map((e) => state_1.PoolPrices.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.pools) {
            obj.pools = message.pools.map((e) => (e ? state_1.Vpool.toJSON(e) : undefined));
        }
        else {
            obj.pools = [];
        }
        if (message.prices) {
            obj.prices = message.prices.map((e) => (e ? state_1.PoolPrices.toJSON(e) : undefined));
        }
        else {
            obj.prices = [];
        }
        return obj;
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryAllPoolsResponse();
        message.pools = ((_a = object.pools) === null || _a === void 0 ? void 0 : _a.map((e) => state_1.Vpool.fromPartial(e))) || [];
        message.prices = ((_b = object.prices) === null || _b === void 0 ? void 0 : _b.map((e) => state_1.PoolPrices.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryBaseAssetPriceRequest() {
    return { pair: "", direction: 0, baseAssetAmount: "" };
}
exports.QueryBaseAssetPriceRequest = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(10).string(message.pair);
        }
        if (message.direction !== 0) {
            writer.uint32(16).int32(message.direction);
        }
        if (message.baseAssetAmount !== "") {
            writer.uint32(26).string(message.baseAssetAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBaseAssetPriceRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pair = reader.string();
                    break;
                case 2:
                    message.direction = reader.int32();
                    break;
                case 3:
                    message.baseAssetAmount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
            direction: isSet(object.direction) ? (0, state_1.directionFromJSON)(object.direction) : 0,
            baseAssetAmount: isSet(object.baseAssetAmount)
                ? String(object.baseAssetAmount)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        message.direction !== undefined &&
            (obj.direction = (0, state_1.directionToJSON)(message.direction));
        message.baseAssetAmount !== undefined &&
            (obj.baseAssetAmount = message.baseAssetAmount);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseQueryBaseAssetPriceRequest();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        message.direction = (_b = object.direction) !== null && _b !== void 0 ? _b : 0;
        message.baseAssetAmount = (_c = object.baseAssetAmount) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseQueryBaseAssetPriceResponse() {
    return { priceInQuoteDenom: "" };
}
exports.QueryBaseAssetPriceResponse = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.priceInQuoteDenom !== "") {
            writer.uint32(10).string(message.priceInQuoteDenom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryBaseAssetPriceResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.priceInQuoteDenom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            priceInQuoteDenom: isSet(object.priceInQuoteDenom)
                ? String(object.priceInQuoteDenom)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.priceInQuoteDenom !== undefined &&
            (obj.priceInQuoteDenom = message.priceInQuoteDenom);
        return obj;
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryBaseAssetPriceResponse();
        message.priceInQuoteDenom = (_a = object.priceInQuoteDenom) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.ReserveAssets = this.ReserveAssets.bind(this);
        this.AllPools = this.AllPools.bind(this);
        this.BaseAssetPrice = this.BaseAssetPrice.bind(this);
    }
    ReserveAssets(request) {
        const data = exports.QueryReserveAssetsRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.vpool.v1.Query", "ReserveAssets", data);
        return promise.then((data) => exports.QueryReserveAssetsResponse.decode(new _m0.Reader(data)));
    }
    AllPools(request) {
        const data = exports.QueryAllPoolsRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.vpool.v1.Query", "AllPools", data);
        return promise.then((data) => exports.QueryAllPoolsResponse.decode(new _m0.Reader(data)));
    }
    BaseAssetPrice(request) {
        const data = exports.QueryBaseAssetPriceRequest.encode(request).finish();
        const promise = this.rpc.request("nibiru.vpool.v1.Query", "BaseAssetPrice", data);
        return promise.then((data) => exports.QueryBaseAssetPriceResponse.decode(new _m0.Reader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
if (_m0.util.Long !== long_1.default) {
    _m0.util.Long = long_1.default;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=query.js.map