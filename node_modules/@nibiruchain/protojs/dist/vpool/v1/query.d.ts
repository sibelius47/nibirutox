import { Direction, Vpool, PoolPrices } from "./state";
import Long from "long";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "nibiru.vpool.v1";
export interface QueryReserveAssetsRequest {
    /** always BASE:QUOTE, e.g. BTC:NUSD or ETH:NUSD */
    pair: string;
}
export interface QueryReserveAssetsResponse {
    /** base asset is the crypto asset, e.g. BTC or ETH */
    baseAssetReserve: string;
    /** quote asset is usually stablecoin, in our case NUSD */
    quoteAssetReserve: string;
}
export interface QueryAllPoolsRequest {
}
export interface QueryAllPoolsResponse {
    pools: Vpool[];
    prices: PoolPrices[];
}
export interface QueryBaseAssetPriceRequest {
    pair: string;
    direction: Direction;
    /** base asset is the crypto asset, e.g. BTC or ETH */
    baseAssetAmount: string;
}
export interface QueryBaseAssetPriceResponse {
    priceInQuoteDenom: string;
}
export declare const QueryReserveAssetsRequest: {
    encode(message: QueryReserveAssetsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryReserveAssetsRequest;
    fromJSON(object: any): QueryReserveAssetsRequest;
    toJSON(message: QueryReserveAssetsRequest): unknown;
    fromPartial<I extends {
        pair?: string | undefined;
    } & {
        pair?: string | undefined;
    } & Record<Exclude<keyof I, "pair">, never>>(object: I): QueryReserveAssetsRequest;
};
export declare const QueryReserveAssetsResponse: {
    encode(message: QueryReserveAssetsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryReserveAssetsResponse;
    fromJSON(object: any): QueryReserveAssetsResponse;
    toJSON(message: QueryReserveAssetsResponse): unknown;
    fromPartial<I extends {
        baseAssetReserve?: string | undefined;
        quoteAssetReserve?: string | undefined;
    } & {
        baseAssetReserve?: string | undefined;
        quoteAssetReserve?: string | undefined;
    } & Record<Exclude<keyof I, keyof QueryReserveAssetsResponse>, never>>(object: I): QueryReserveAssetsResponse;
};
export declare const QueryAllPoolsRequest: {
    encode(_: QueryAllPoolsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllPoolsRequest;
    fromJSON(_: any): QueryAllPoolsRequest;
    toJSON(_: QueryAllPoolsRequest): unknown;
    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): QueryAllPoolsRequest;
};
export declare const QueryAllPoolsResponse: {
    encode(message: QueryAllPoolsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryAllPoolsResponse;
    fromJSON(object: any): QueryAllPoolsResponse;
    toJSON(message: QueryAllPoolsResponse): unknown;
    fromPartial<I extends {
        pools?: {
            pair?: string | undefined;
            baseAssetReserve?: string | undefined;
            quoteAssetReserve?: string | undefined;
            config?: {
                tradeLimitRatio?: string | undefined;
                fluctuationLimitRatio?: string | undefined;
                maxOracleSpreadRatio?: string | undefined;
                maintenanceMarginRatio?: string | undefined;
                maxLeverage?: string | undefined;
            } | undefined;
        }[] | undefined;
        prices?: {
            pair?: string | undefined;
            markPrice?: string | undefined;
            indexPrice?: string | undefined;
            twapMark?: string | undefined;
            swapInvariant?: string | undefined;
            blockNumber?: string | number | Long.Long | undefined;
        }[] | undefined;
    } & {
        pools?: ({
            pair?: string | undefined;
            baseAssetReserve?: string | undefined;
            quoteAssetReserve?: string | undefined;
            config?: {
                tradeLimitRatio?: string | undefined;
                fluctuationLimitRatio?: string | undefined;
                maxOracleSpreadRatio?: string | undefined;
                maintenanceMarginRatio?: string | undefined;
                maxLeverage?: string | undefined;
            } | undefined;
        }[] & ({
            pair?: string | undefined;
            baseAssetReserve?: string | undefined;
            quoteAssetReserve?: string | undefined;
            config?: {
                tradeLimitRatio?: string | undefined;
                fluctuationLimitRatio?: string | undefined;
                maxOracleSpreadRatio?: string | undefined;
                maintenanceMarginRatio?: string | undefined;
                maxLeverage?: string | undefined;
            } | undefined;
        } & {
            pair?: string | undefined;
            baseAssetReserve?: string | undefined;
            quoteAssetReserve?: string | undefined;
            config?: ({
                tradeLimitRatio?: string | undefined;
                fluctuationLimitRatio?: string | undefined;
                maxOracleSpreadRatio?: string | undefined;
                maintenanceMarginRatio?: string | undefined;
                maxLeverage?: string | undefined;
            } & {
                tradeLimitRatio?: string | undefined;
                fluctuationLimitRatio?: string | undefined;
                maxOracleSpreadRatio?: string | undefined;
                maintenanceMarginRatio?: string | undefined;
                maxLeverage?: string | undefined;
            } & Record<Exclude<keyof I["pools"][number]["config"], keyof import("./state").VpoolConfig>, never>) | undefined;
        } & Record<Exclude<keyof I["pools"][number], keyof Vpool>, never>)[] & Record<Exclude<keyof I["pools"], keyof {
            pair?: string | undefined;
            baseAssetReserve?: string | undefined;
            quoteAssetReserve?: string | undefined;
            config?: {
                tradeLimitRatio?: string | undefined;
                fluctuationLimitRatio?: string | undefined;
                maxOracleSpreadRatio?: string | undefined;
                maintenanceMarginRatio?: string | undefined;
                maxLeverage?: string | undefined;
            } | undefined;
        }[]>, never>) | undefined;
        prices?: ({
            pair?: string | undefined;
            markPrice?: string | undefined;
            indexPrice?: string | undefined;
            twapMark?: string | undefined;
            swapInvariant?: string | undefined;
            blockNumber?: string | number | Long.Long | undefined;
        }[] & ({
            pair?: string | undefined;
            markPrice?: string | undefined;
            indexPrice?: string | undefined;
            twapMark?: string | undefined;
            swapInvariant?: string | undefined;
            blockNumber?: string | number | Long.Long | undefined;
        } & {
            pair?: string | undefined;
            markPrice?: string | undefined;
            indexPrice?: string | undefined;
            twapMark?: string | undefined;
            swapInvariant?: string | undefined;
            blockNumber?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["prices"][number]["blockNumber"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["prices"][number], keyof PoolPrices>, never>)[] & Record<Exclude<keyof I["prices"], keyof {
            pair?: string | undefined;
            markPrice?: string | undefined;
            indexPrice?: string | undefined;
            twapMark?: string | undefined;
            swapInvariant?: string | undefined;
            blockNumber?: string | number | Long.Long | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof QueryAllPoolsResponse>, never>>(object: I): QueryAllPoolsResponse;
};
export declare const QueryBaseAssetPriceRequest: {
    encode(message: QueryBaseAssetPriceRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryBaseAssetPriceRequest;
    fromJSON(object: any): QueryBaseAssetPriceRequest;
    toJSON(message: QueryBaseAssetPriceRequest): unknown;
    fromPartial<I extends {
        pair?: string | undefined;
        direction?: Direction | undefined;
        baseAssetAmount?: string | undefined;
    } & {
        pair?: string | undefined;
        direction?: Direction | undefined;
        baseAssetAmount?: string | undefined;
    } & Record<Exclude<keyof I, keyof QueryBaseAssetPriceRequest>, never>>(object: I): QueryBaseAssetPriceRequest;
};
export declare const QueryBaseAssetPriceResponse: {
    encode(message: QueryBaseAssetPriceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryBaseAssetPriceResponse;
    fromJSON(object: any): QueryBaseAssetPriceResponse;
    toJSON(message: QueryBaseAssetPriceResponse): unknown;
    fromPartial<I extends {
        priceInQuoteDenom?: string | undefined;
    } & {
        priceInQuoteDenom?: string | undefined;
    } & Record<Exclude<keyof I, "priceInQuoteDenom">, never>>(object: I): QueryBaseAssetPriceResponse;
};
/** Query defines the gRPC querier service. */
export interface Query {
    /** Queries the reserve assets in a given pool, identified by a token pair. */
    ReserveAssets(request: QueryReserveAssetsRequest): Promise<QueryReserveAssetsResponse>;
    /** Queries all virtual pools. */
    AllPools(request: QueryAllPoolsRequest): Promise<QueryAllPoolsResponse>;
    /** Queries prices */
    BaseAssetPrice(request: QueryBaseAssetPriceRequest): Promise<QueryBaseAssetPriceResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    ReserveAssets(request: QueryReserveAssetsRequest): Promise<QueryReserveAssetsResponse>;
    AllPools(request: QueryAllPoolsRequest): Promise<QueryAllPoolsResponse>;
    BaseAssetPrice(request: QueryBaseAssetPriceRequest): Promise<QueryBaseAssetPriceResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
//# sourceMappingURL=query.d.ts.map