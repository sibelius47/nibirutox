"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PoolPrices = exports.ReserveSnapshot = exports.CurrentTWAP = exports.VpoolConfig = exports.Vpool = exports.twapCalcOptionToJSON = exports.twapCalcOptionFromJSON = exports.TwapCalcOption = exports.directionToJSON = exports.directionFromJSON = exports.Direction = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const _m0 = __importStar(require("protobufjs/minimal"));
exports.protobufPackage = "nibiru.vpool.v1";
var Direction;
(function (Direction) {
    Direction[Direction["DIRECTION_UNSPECIFIED"] = 0] = "DIRECTION_UNSPECIFIED";
    Direction[Direction["ADD_TO_POOL"] = 1] = "ADD_TO_POOL";
    Direction[Direction["REMOVE_FROM_POOL"] = 2] = "REMOVE_FROM_POOL";
    Direction[Direction["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Direction = exports.Direction || (exports.Direction = {}));
function directionFromJSON(object) {
    switch (object) {
        case 0:
        case "DIRECTION_UNSPECIFIED":
            return Direction.DIRECTION_UNSPECIFIED;
        case 1:
        case "ADD_TO_POOL":
            return Direction.ADD_TO_POOL;
        case 2:
        case "REMOVE_FROM_POOL":
            return Direction.REMOVE_FROM_POOL;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Direction.UNRECOGNIZED;
    }
}
exports.directionFromJSON = directionFromJSON;
function directionToJSON(object) {
    switch (object) {
        case Direction.DIRECTION_UNSPECIFIED:
            return "DIRECTION_UNSPECIFIED";
        case Direction.ADD_TO_POOL:
            return "ADD_TO_POOL";
        case Direction.REMOVE_FROM_POOL:
            return "REMOVE_FROM_POOL";
        case Direction.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.directionToJSON = directionToJSON;
/** Enumerates different options of calculating twap. */
var TwapCalcOption;
(function (TwapCalcOption) {
    TwapCalcOption[TwapCalcOption["TWAP_CALC_OPTION_UNSPECIFIED"] = 0] = "TWAP_CALC_OPTION_UNSPECIFIED";
    /** SPOT - Spot price from quote asset reserve / base asset reserve */
    TwapCalcOption[TwapCalcOption["SPOT"] = 1] = "SPOT";
    /** QUOTE_ASSET_SWAP - Swapping with quote assets, output denominated in base assets */
    TwapCalcOption[TwapCalcOption["QUOTE_ASSET_SWAP"] = 2] = "QUOTE_ASSET_SWAP";
    /** BASE_ASSET_SWAP - Swapping with base assets, output denominated in quote assets */
    TwapCalcOption[TwapCalcOption["BASE_ASSET_SWAP"] = 3] = "BASE_ASSET_SWAP";
    TwapCalcOption[TwapCalcOption["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(TwapCalcOption = exports.TwapCalcOption || (exports.TwapCalcOption = {}));
function twapCalcOptionFromJSON(object) {
    switch (object) {
        case 0:
        case "TWAP_CALC_OPTION_UNSPECIFIED":
            return TwapCalcOption.TWAP_CALC_OPTION_UNSPECIFIED;
        case 1:
        case "SPOT":
            return TwapCalcOption.SPOT;
        case 2:
        case "QUOTE_ASSET_SWAP":
            return TwapCalcOption.QUOTE_ASSET_SWAP;
        case 3:
        case "BASE_ASSET_SWAP":
            return TwapCalcOption.BASE_ASSET_SWAP;
        case -1:
        case "UNRECOGNIZED":
        default:
            return TwapCalcOption.UNRECOGNIZED;
    }
}
exports.twapCalcOptionFromJSON = twapCalcOptionFromJSON;
function twapCalcOptionToJSON(object) {
    switch (object) {
        case TwapCalcOption.TWAP_CALC_OPTION_UNSPECIFIED:
            return "TWAP_CALC_OPTION_UNSPECIFIED";
        case TwapCalcOption.SPOT:
            return "SPOT";
        case TwapCalcOption.QUOTE_ASSET_SWAP:
            return "QUOTE_ASSET_SWAP";
        case TwapCalcOption.BASE_ASSET_SWAP:
            return "BASE_ASSET_SWAP";
        case TwapCalcOption.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.twapCalcOptionToJSON = twapCalcOptionToJSON;
function createBaseVpool() {
    return { pair: "", baseAssetReserve: "", quoteAssetReserve: "", config: undefined };
}
exports.Vpool = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(10).string(message.pair);
        }
        if (message.baseAssetReserve !== "") {
            writer.uint32(18).string(message.baseAssetReserve);
        }
        if (message.quoteAssetReserve !== "") {
            writer.uint32(26).string(message.quoteAssetReserve);
        }
        if (message.config !== undefined) {
            exports.VpoolConfig.encode(message.config, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVpool();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pair = reader.string();
                    break;
                case 2:
                    message.baseAssetReserve = reader.string();
                    break;
                case 3:
                    message.quoteAssetReserve = reader.string();
                    break;
                case 4:
                    message.config = exports.VpoolConfig.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
            baseAssetReserve: isSet(object.baseAssetReserve)
                ? String(object.baseAssetReserve)
                : "",
            quoteAssetReserve: isSet(object.quoteAssetReserve)
                ? String(object.quoteAssetReserve)
                : "",
            config: isSet(object.config) ? exports.VpoolConfig.fromJSON(object.config) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        message.baseAssetReserve !== undefined &&
            (obj.baseAssetReserve = message.baseAssetReserve);
        message.quoteAssetReserve !== undefined &&
            (obj.quoteAssetReserve = message.quoteAssetReserve);
        message.config !== undefined &&
            (obj.config = message.config ? exports.VpoolConfig.toJSON(message.config) : undefined);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseVpool();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        message.baseAssetReserve = (_b = object.baseAssetReserve) !== null && _b !== void 0 ? _b : "";
        message.quoteAssetReserve = (_c = object.quoteAssetReserve) !== null && _c !== void 0 ? _c : "";
        message.config =
            object.config !== undefined && object.config !== null
                ? exports.VpoolConfig.fromPartial(object.config)
                : undefined;
        return message;
    },
};
function createBaseVpoolConfig() {
    return {
        tradeLimitRatio: "",
        fluctuationLimitRatio: "",
        maxOracleSpreadRatio: "",
        maintenanceMarginRatio: "",
        maxLeverage: "",
    };
}
exports.VpoolConfig = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.tradeLimitRatio !== "") {
            writer.uint32(10).string(message.tradeLimitRatio);
        }
        if (message.fluctuationLimitRatio !== "") {
            writer.uint32(18).string(message.fluctuationLimitRatio);
        }
        if (message.maxOracleSpreadRatio !== "") {
            writer.uint32(26).string(message.maxOracleSpreadRatio);
        }
        if (message.maintenanceMarginRatio !== "") {
            writer.uint32(34).string(message.maintenanceMarginRatio);
        }
        if (message.maxLeverage !== "") {
            writer.uint32(42).string(message.maxLeverage);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVpoolConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tradeLimitRatio = reader.string();
                    break;
                case 2:
                    message.fluctuationLimitRatio = reader.string();
                    break;
                case 3:
                    message.maxOracleSpreadRatio = reader.string();
                    break;
                case 4:
                    message.maintenanceMarginRatio = reader.string();
                    break;
                case 5:
                    message.maxLeverage = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            tradeLimitRatio: isSet(object.tradeLimitRatio)
                ? String(object.tradeLimitRatio)
                : "",
            fluctuationLimitRatio: isSet(object.fluctuationLimitRatio)
                ? String(object.fluctuationLimitRatio)
                : "",
            maxOracleSpreadRatio: isSet(object.maxOracleSpreadRatio)
                ? String(object.maxOracleSpreadRatio)
                : "",
            maintenanceMarginRatio: isSet(object.maintenanceMarginRatio)
                ? String(object.maintenanceMarginRatio)
                : "",
            maxLeverage: isSet(object.maxLeverage) ? String(object.maxLeverage) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.tradeLimitRatio !== undefined &&
            (obj.tradeLimitRatio = message.tradeLimitRatio);
        message.fluctuationLimitRatio !== undefined &&
            (obj.fluctuationLimitRatio = message.fluctuationLimitRatio);
        message.maxOracleSpreadRatio !== undefined &&
            (obj.maxOracleSpreadRatio = message.maxOracleSpreadRatio);
        message.maintenanceMarginRatio !== undefined &&
            (obj.maintenanceMarginRatio = message.maintenanceMarginRatio);
        message.maxLeverage !== undefined && (obj.maxLeverage = message.maxLeverage);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseVpoolConfig();
        message.tradeLimitRatio = (_a = object.tradeLimitRatio) !== null && _a !== void 0 ? _a : "";
        message.fluctuationLimitRatio = (_b = object.fluctuationLimitRatio) !== null && _b !== void 0 ? _b : "";
        message.maxOracleSpreadRatio = (_c = object.maxOracleSpreadRatio) !== null && _c !== void 0 ? _c : "";
        message.maintenanceMarginRatio = (_d = object.maintenanceMarginRatio) !== null && _d !== void 0 ? _d : "";
        message.maxLeverage = (_e = object.maxLeverage) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseCurrentTWAP() {
    return { pairId: "", numerator: "", denominator: "", price: "" };
}
exports.CurrentTWAP = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pairId !== "") {
            writer.uint32(10).string(message.pairId);
        }
        if (message.numerator !== "") {
            writer.uint32(18).string(message.numerator);
        }
        if (message.denominator !== "") {
            writer.uint32(26).string(message.denominator);
        }
        if (message.price !== "") {
            writer.uint32(34).string(message.price);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCurrentTWAP();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pairId = reader.string();
                    break;
                case 2:
                    message.numerator = reader.string();
                    break;
                case 3:
                    message.denominator = reader.string();
                    break;
                case 4:
                    message.price = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pairId: isSet(object.pairId) ? String(object.pairId) : "",
            numerator: isSet(object.numerator) ? String(object.numerator) : "",
            denominator: isSet(object.denominator) ? String(object.denominator) : "",
            price: isSet(object.price) ? String(object.price) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.pairId !== undefined && (obj.pairId = message.pairId);
        message.numerator !== undefined && (obj.numerator = message.numerator);
        message.denominator !== undefined && (obj.denominator = message.denominator);
        message.price !== undefined && (obj.price = message.price);
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseCurrentTWAP();
        message.pairId = (_a = object.pairId) !== null && _a !== void 0 ? _a : "";
        message.numerator = (_b = object.numerator) !== null && _b !== void 0 ? _b : "";
        message.denominator = (_c = object.denominator) !== null && _c !== void 0 ? _c : "";
        message.price = (_d = object.price) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseReserveSnapshot() {
    return {
        pair: "",
        baseAssetReserve: "",
        quoteAssetReserve: "",
        timestampMs: long_1.default.ZERO,
    };
}
exports.ReserveSnapshot = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(42).string(message.pair);
        }
        if (message.baseAssetReserve !== "") {
            writer.uint32(10).string(message.baseAssetReserve);
        }
        if (message.quoteAssetReserve !== "") {
            writer.uint32(18).string(message.quoteAssetReserve);
        }
        if (!message.timestampMs.isZero()) {
            writer.uint32(24).int64(message.timestampMs);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReserveSnapshot();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 5:
                    message.pair = reader.string();
                    break;
                case 1:
                    message.baseAssetReserve = reader.string();
                    break;
                case 2:
                    message.quoteAssetReserve = reader.string();
                    break;
                case 3:
                    message.timestampMs = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
            baseAssetReserve: isSet(object.baseAssetReserve)
                ? String(object.baseAssetReserve)
                : "",
            quoteAssetReserve: isSet(object.quoteAssetReserve)
                ? String(object.quoteAssetReserve)
                : "",
            timestampMs: isSet(object.timestampMs)
                ? long_1.default.fromValue(object.timestampMs)
                : long_1.default.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        message.baseAssetReserve !== undefined &&
            (obj.baseAssetReserve = message.baseAssetReserve);
        message.quoteAssetReserve !== undefined &&
            (obj.quoteAssetReserve = message.quoteAssetReserve);
        message.timestampMs !== undefined &&
            (obj.timestampMs = (message.timestampMs || long_1.default.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseReserveSnapshot();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        message.baseAssetReserve = (_b = object.baseAssetReserve) !== null && _b !== void 0 ? _b : "";
        message.quoteAssetReserve = (_c = object.quoteAssetReserve) !== null && _c !== void 0 ? _c : "";
        message.timestampMs =
            object.timestampMs !== undefined && object.timestampMs !== null
                ? long_1.default.fromValue(object.timestampMs)
                : long_1.default.ZERO;
        return message;
    },
};
function createBasePoolPrices() {
    return {
        pair: "",
        markPrice: "",
        indexPrice: "",
        twapMark: "",
        swapInvariant: "",
        blockNumber: long_1.default.ZERO,
    };
}
exports.PoolPrices = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(74).string(message.pair);
        }
        if (message.markPrice !== "") {
            writer.uint32(82).string(message.markPrice);
        }
        if (message.indexPrice !== "") {
            writer.uint32(90).string(message.indexPrice);
        }
        if (message.twapMark !== "") {
            writer.uint32(98).string(message.twapMark);
        }
        if (message.swapInvariant !== "") {
            writer.uint32(106).string(message.swapInvariant);
        }
        if (!message.blockNumber.isZero()) {
            writer.uint32(112).int64(message.blockNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePoolPrices();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 9:
                    message.pair = reader.string();
                    break;
                case 10:
                    message.markPrice = reader.string();
                    break;
                case 11:
                    message.indexPrice = reader.string();
                    break;
                case 12:
                    message.twapMark = reader.string();
                    break;
                case 13:
                    message.swapInvariant = reader.string();
                    break;
                case 14:
                    message.blockNumber = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
            markPrice: isSet(object.markPrice) ? String(object.markPrice) : "",
            indexPrice: isSet(object.indexPrice) ? String(object.indexPrice) : "",
            twapMark: isSet(object.twapMark) ? String(object.twapMark) : "",
            swapInvariant: isSet(object.swapInvariant) ? String(object.swapInvariant) : "",
            blockNumber: isSet(object.blockNumber)
                ? long_1.default.fromValue(object.blockNumber)
                : long_1.default.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        message.markPrice !== undefined && (obj.markPrice = message.markPrice);
        message.indexPrice !== undefined && (obj.indexPrice = message.indexPrice);
        message.twapMark !== undefined && (obj.twapMark = message.twapMark);
        message.swapInvariant !== undefined && (obj.swapInvariant = message.swapInvariant);
        message.blockNumber !== undefined &&
            (obj.blockNumber = (message.blockNumber || long_1.default.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBasePoolPrices();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        message.markPrice = (_b = object.markPrice) !== null && _b !== void 0 ? _b : "";
        message.indexPrice = (_c = object.indexPrice) !== null && _c !== void 0 ? _c : "";
        message.twapMark = (_d = object.twapMark) !== null && _d !== void 0 ? _d : "";
        message.swapInvariant = (_e = object.swapInvariant) !== null && _e !== void 0 ? _e : "";
        message.blockNumber =
            object.blockNumber !== undefined && object.blockNumber !== null
                ? long_1.default.fromValue(object.blockNumber)
                : long_1.default.ZERO;
        return message;
    },
};
if (_m0.util.Long !== long_1.default) {
    _m0.util.Long = long_1.default;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=state.js.map