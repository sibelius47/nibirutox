import Long from "long";
import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "nibiru.vpool.v1";
export interface ReserveSnapshotSavedEvent {
    pair: string;
    quoteReserve: string;
    baseReserve: string;
    /**
     * MarkPrice at the end of the block.
     * (instantaneous) markPrice := quoteReserve / baseReserve
     */
    markPrice: string;
    blockHeight: Long;
    blockTimestamp?: Date;
}
/**
 * A swap on the vpool represented by 'pair'.
 * Amounts are negative or positive base on the perspective of the pool, i.e.
 * a negative quote means the trader has gained quote and the vpool lost quote.
 */
export interface SwapOnVpoolEvent {
    pair: string;
    /** delta in the quote reserves of the vpool */
    quoteAmount: string;
    /** delta in the base reserves of the vpool */
    baseAmount: string;
}
export interface MarkPriceChangedEvent {
    pair: string;
    price: string;
    blockTimestamp?: Date;
}
export declare const ReserveSnapshotSavedEvent: {
    encode(message: ReserveSnapshotSavedEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReserveSnapshotSavedEvent;
    fromJSON(object: any): ReserveSnapshotSavedEvent;
    toJSON(message: ReserveSnapshotSavedEvent): unknown;
    fromPartial<I extends {
        pair?: string | undefined;
        quoteReserve?: string | undefined;
        baseReserve?: string | undefined;
        markPrice?: string | undefined;
        blockHeight?: string | number | Long.Long | undefined;
        blockTimestamp?: Date | undefined;
    } & {
        pair?: string | undefined;
        quoteReserve?: string | undefined;
        baseReserve?: string | undefined;
        markPrice?: string | undefined;
        blockHeight?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["blockHeight"], keyof Long.Long>, never>) | undefined;
        blockTimestamp?: Date | undefined;
    } & Record<Exclude<keyof I, keyof ReserveSnapshotSavedEvent>, never>>(object: I): ReserveSnapshotSavedEvent;
};
export declare const SwapOnVpoolEvent: {
    encode(message: SwapOnVpoolEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SwapOnVpoolEvent;
    fromJSON(object: any): SwapOnVpoolEvent;
    toJSON(message: SwapOnVpoolEvent): unknown;
    fromPartial<I extends {
        pair?: string | undefined;
        quoteAmount?: string | undefined;
        baseAmount?: string | undefined;
    } & {
        pair?: string | undefined;
        quoteAmount?: string | undefined;
        baseAmount?: string | undefined;
    } & Record<Exclude<keyof I, keyof SwapOnVpoolEvent>, never>>(object: I): SwapOnVpoolEvent;
};
export declare const MarkPriceChangedEvent: {
    encode(message: MarkPriceChangedEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MarkPriceChangedEvent;
    fromJSON(object: any): MarkPriceChangedEvent;
    toJSON(message: MarkPriceChangedEvent): unknown;
    fromPartial<I extends {
        pair?: string | undefined;
        price?: string | undefined;
        blockTimestamp?: Date | undefined;
    } & {
        pair?: string | undefined;
        price?: string | undefined;
        blockTimestamp?: Date | undefined;
    } & Record<Exclude<keyof I, keyof MarkPriceChangedEvent>, never>>(object: I): MarkPriceChangedEvent;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
//# sourceMappingURL=event.d.ts.map