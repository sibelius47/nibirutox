import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
export declare const protobufPackage = "nibiru.stablecoin.v1";
/**
 * MsgMintStable: Msg to mint NUSD. A user deposits NIBI and collateral and gets
 * NUSD in return. The amount of NUSD received depends on the current price set
 * by the oracle library and the current collateral ratio for the protocol.
 */
export interface MsgMintStable {
    creator: string;
    stable?: Coin;
}
/**
 * MsgMintStableResponse specifies the amount of NUSD token the user will
 * receive after their mint transaction
 */
export interface MsgMintStableResponse {
    stable?: Coin;
    usedCoins: Coin[];
    feesPayed: Coin[];
}
/**
 * MsgBurnStable allows users to burn NUSD in exchange for NIBI and collateral.
 * The amount of NIBI and Collateral received depends on the current price set by
 * the x/oracle library and the current collateral ratio.
 */
export interface MsgBurnStable {
    creator: string;
    stable?: Coin;
}
/**
 * MsgBurnStableResponse specifies the amount of collateral and governance
 * token the user will receive after their burn transaction.
 */
export interface MsgBurnStableResponse {
    collateral?: Coin;
    gov?: Coin;
    feesPayed: Coin[];
}
/** MsgRecollateralize */
export interface MsgRecollateralize {
    creator: string;
    coll?: Coin;
}
/** MsgRecollateralizeResponse is the output of a successful 'Recollateralize' */
export interface MsgRecollateralizeResponse {
    /**
     * Gov (sdk.Coin): Tokens rewarded to the caller in exchange for her
     * collateral.
     */
    gov?: Coin;
}
/** MsgBuyback */
export interface MsgBuyback {
    creator: string;
    /**
     * Gov (sdk.Coin): Tokens the caller wants to sell to the protocol in exchange
     * for collateral.
     */
    gov?: Coin;
}
/** MsgBuybackResponse is the output of a successful 'Buyback' */
export interface MsgBuybackResponse {
    /** Coll (sdk.Coin): Tokens sold to the caller in exchange for her collateral. */
    coll?: Coin;
}
export declare const MsgMintStable: {
    encode(message: MsgMintStable, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgMintStable;
    fromJSON(object: any): MsgMintStable;
    toJSON(message: MsgMintStable): unknown;
    create<I extends {
        creator?: string | undefined;
        stable?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        creator?: string | undefined;
        stable?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["stable"], keyof Coin>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof MsgMintStable>]: never; }>(base?: I | undefined): MsgMintStable;
    fromPartial<I_1 extends {
        creator?: string | undefined;
        stable?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        creator?: string | undefined;
        stable?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_2 in Exclude<keyof I_1["stable"], keyof Coin>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof MsgMintStable>]: never; }>(object: I_1): MsgMintStable;
};
export declare const MsgMintStableResponse: {
    encode(message: MsgMintStableResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgMintStableResponse;
    fromJSON(object: any): MsgMintStableResponse;
    toJSON(message: MsgMintStableResponse): unknown;
    create<I extends {
        stable?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        usedCoins?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        feesPayed?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        stable?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["stable"], keyof Coin>]: never; }) | undefined;
        usedCoins?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_1 in Exclude<keyof I["usedCoins"][number], keyof Coin>]: never; })[] & { [K_2 in Exclude<keyof I["usedCoins"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        feesPayed?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_3 in Exclude<keyof I["feesPayed"][number], keyof Coin>]: never; })[] & { [K_4 in Exclude<keyof I["feesPayed"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I, keyof MsgMintStableResponse>]: never; }>(base?: I | undefined): MsgMintStableResponse;
    fromPartial<I_1 extends {
        stable?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        usedCoins?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        feesPayed?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        stable?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_6 in Exclude<keyof I_1["stable"], keyof Coin>]: never; }) | undefined;
        usedCoins?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_7 in Exclude<keyof I_1["usedCoins"][number], keyof Coin>]: never; })[] & { [K_8 in Exclude<keyof I_1["usedCoins"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        feesPayed?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_9 in Exclude<keyof I_1["feesPayed"][number], keyof Coin>]: never; })[] & { [K_10 in Exclude<keyof I_1["feesPayed"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_11 in Exclude<keyof I_1, keyof MsgMintStableResponse>]: never; }>(object: I_1): MsgMintStableResponse;
};
export declare const MsgBurnStable: {
    encode(message: MsgBurnStable, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgBurnStable;
    fromJSON(object: any): MsgBurnStable;
    toJSON(message: MsgBurnStable): unknown;
    create<I extends {
        creator?: string | undefined;
        stable?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        creator?: string | undefined;
        stable?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["stable"], keyof Coin>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof MsgBurnStable>]: never; }>(base?: I | undefined): MsgBurnStable;
    fromPartial<I_1 extends {
        creator?: string | undefined;
        stable?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        creator?: string | undefined;
        stable?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_2 in Exclude<keyof I_1["stable"], keyof Coin>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof MsgBurnStable>]: never; }>(object: I_1): MsgBurnStable;
};
export declare const MsgBurnStableResponse: {
    encode(message: MsgBurnStableResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgBurnStableResponse;
    fromJSON(object: any): MsgBurnStableResponse;
    toJSON(message: MsgBurnStableResponse): unknown;
    create<I extends {
        collateral?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        gov?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        feesPayed?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        collateral?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["collateral"], keyof Coin>]: never; }) | undefined;
        gov?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_1 in Exclude<keyof I["gov"], keyof Coin>]: never; }) | undefined;
        feesPayed?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_2 in Exclude<keyof I["feesPayed"][number], keyof Coin>]: never; })[] & { [K_3 in Exclude<keyof I["feesPayed"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_4 in Exclude<keyof I, keyof MsgBurnStableResponse>]: never; }>(base?: I | undefined): MsgBurnStableResponse;
    fromPartial<I_1 extends {
        collateral?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        gov?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        feesPayed?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        collateral?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_5 in Exclude<keyof I_1["collateral"], keyof Coin>]: never; }) | undefined;
        gov?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_6 in Exclude<keyof I_1["gov"], keyof Coin>]: never; }) | undefined;
        feesPayed?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_7 in Exclude<keyof I_1["feesPayed"][number], keyof Coin>]: never; })[] & { [K_8 in Exclude<keyof I_1["feesPayed"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_9 in Exclude<keyof I_1, keyof MsgBurnStableResponse>]: never; }>(object: I_1): MsgBurnStableResponse;
};
export declare const MsgRecollateralize: {
    encode(message: MsgRecollateralize, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRecollateralize;
    fromJSON(object: any): MsgRecollateralize;
    toJSON(message: MsgRecollateralize): unknown;
    create<I extends {
        creator?: string | undefined;
        coll?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        creator?: string | undefined;
        coll?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["coll"], keyof Coin>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof MsgRecollateralize>]: never; }>(base?: I | undefined): MsgRecollateralize;
    fromPartial<I_1 extends {
        creator?: string | undefined;
        coll?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        creator?: string | undefined;
        coll?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_2 in Exclude<keyof I_1["coll"], keyof Coin>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof MsgRecollateralize>]: never; }>(object: I_1): MsgRecollateralize;
};
export declare const MsgRecollateralizeResponse: {
    encode(message: MsgRecollateralizeResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgRecollateralizeResponse;
    fromJSON(object: any): MsgRecollateralizeResponse;
    toJSON(message: MsgRecollateralizeResponse): unknown;
    create<I extends {
        gov?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        gov?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["gov"], keyof Coin>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "gov">]: never; }>(base?: I | undefined): MsgRecollateralizeResponse;
    fromPartial<I_1 extends {
        gov?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        gov?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_2 in Exclude<keyof I_1["gov"], keyof Coin>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, "gov">]: never; }>(object: I_1): MsgRecollateralizeResponse;
};
export declare const MsgBuyback: {
    encode(message: MsgBuyback, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgBuyback;
    fromJSON(object: any): MsgBuyback;
    toJSON(message: MsgBuyback): unknown;
    create<I extends {
        creator?: string | undefined;
        gov?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        creator?: string | undefined;
        gov?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["gov"], keyof Coin>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof MsgBuyback>]: never; }>(base?: I | undefined): MsgBuyback;
    fromPartial<I_1 extends {
        creator?: string | undefined;
        gov?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        creator?: string | undefined;
        gov?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_2 in Exclude<keyof I_1["gov"], keyof Coin>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof MsgBuyback>]: never; }>(object: I_1): MsgBuyback;
};
export declare const MsgBuybackResponse: {
    encode(message: MsgBuybackResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgBuybackResponse;
    fromJSON(object: any): MsgBuybackResponse;
    toJSON(message: MsgBuybackResponse): unknown;
    create<I extends {
        coll?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        coll?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["coll"], keyof Coin>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "coll">]: never; }>(base?: I | undefined): MsgBuybackResponse;
    fromPartial<I_1 extends {
        coll?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        coll?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_2 in Exclude<keyof I_1["coll"], keyof Coin>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, "coll">]: never; }>(object: I_1): MsgBuybackResponse;
};
/** Msg defines the x/stablecoin Msg service. */
export interface Msg {
    /**
     * MintStable defines a method for trading a mixture of GOV and COLL to mint
     * an equivalent value of stablecoins.
     */
    MintStable(request: MsgMintStable): Promise<MsgMintStableResponse>;
    /**
     * BurnStable defines a method for redeeming/burning stablecoins to receive an
     * equivalent value as a mixture of governance and collateral tokens.
     */
    BurnStable(request: MsgBurnStable): Promise<MsgBurnStableResponse>;
    /**
     * Recollateralize defines a method for manually adding collateral to the
     * protocol in exchange for an equivalent stablecoin value in governance tokens
     * plus a small bonus.
     */
    Recollateralize(request: MsgRecollateralize): Promise<MsgRecollateralizeResponse>;
    /**
     * Buyback defines a method for manually adding NIBI to the protocol
     * in exchange for an equivalent stablecoin value in collateral, effectively
     * executing a share buyback for Nibiru Chain. The NIBI purchased by the protocol
     * is then burned, distributing value to all NIBI hodlers.
     */
    Buyback(request: MsgBuyback): Promise<MsgBuybackResponse>;
}
export declare const MsgServiceName = "nibiru.stablecoin.v1.Msg";
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    MintStable(request: MsgMintStable): Promise<MsgMintStableResponse>;
    BurnStable(request: MsgBurnStable): Promise<MsgBurnStableResponse>;
    Recollateralize(request: MsgRecollateralize): Promise<MsgRecollateralizeResponse>;
    Buyback(request: MsgBuyback): Promise<MsgBuybackResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
//# sourceMappingURL=tx.d.ts.map