"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgServiceName = exports.MsgBuybackResponse = exports.MsgBuyback = exports.MsgRecollateralizeResponse = exports.MsgRecollateralize = exports.MsgBurnStableResponse = exports.MsgBurnStable = exports.MsgMintStableResponse = exports.MsgMintStable = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = "nibiru.stablecoin.v1";
function createBaseMsgMintStable() {
    return { creator: "", stable: undefined };
}
exports.MsgMintStable = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.stable !== undefined) {
            coin_1.Coin.encode(message.stable, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgMintStable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.stable = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: isSet(object.creator) ? String(object.creator) : "",
            stable: isSet(object.stable) ? coin_1.Coin.fromJSON(object.stable) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.creator !== undefined && (obj.creator = message.creator);
        message.stable !== undefined &&
            (obj.stable = message.stable ? coin_1.Coin.toJSON(message.stable) : undefined);
        return obj;
    },
    create(base) {
        return exports.MsgMintStable.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgMintStable();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : "";
        message.stable =
            object.stable !== undefined && object.stable !== null
                ? coin_1.Coin.fromPartial(object.stable)
                : undefined;
        return message;
    },
};
function createBaseMsgMintStableResponse() {
    return { stable: undefined, usedCoins: [], feesPayed: [] };
}
exports.MsgMintStableResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.stable !== undefined) {
            coin_1.Coin.encode(message.stable, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.usedCoins) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.feesPayed) {
            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgMintStableResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.stable = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.usedCoins.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.feesPayed.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            stable: isSet(object.stable) ? coin_1.Coin.fromJSON(object.stable) : undefined,
            usedCoins: Array.isArray(object === null || object === void 0 ? void 0 : object.usedCoins)
                ? object.usedCoins.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            feesPayed: Array.isArray(object === null || object === void 0 ? void 0 : object.feesPayed)
                ? object.feesPayed.map((e) => coin_1.Coin.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.stable !== undefined &&
            (obj.stable = message.stable ? coin_1.Coin.toJSON(message.stable) : undefined);
        if (message.usedCoins) {
            obj.usedCoins = message.usedCoins.map((e) => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.usedCoins = [];
        }
        if (message.feesPayed) {
            obj.feesPayed = message.feesPayed.map((e) => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.feesPayed = [];
        }
        return obj;
    },
    create(base) {
        return exports.MsgMintStableResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgMintStableResponse();
        message.stable =
            object.stable !== undefined && object.stable !== null
                ? coin_1.Coin.fromPartial(object.stable)
                : undefined;
        message.usedCoins = ((_a = object.usedCoins) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];
        message.feesPayed = ((_b = object.feesPayed) === null || _b === void 0 ? void 0 : _b.map((e) => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
};
function createBaseMsgBurnStable() {
    return { creator: "", stable: undefined };
}
exports.MsgBurnStable = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.stable !== undefined) {
            coin_1.Coin.encode(message.stable, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgBurnStable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.stable = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: isSet(object.creator) ? String(object.creator) : "",
            stable: isSet(object.stable) ? coin_1.Coin.fromJSON(object.stable) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.creator !== undefined && (obj.creator = message.creator);
        message.stable !== undefined &&
            (obj.stable = message.stable ? coin_1.Coin.toJSON(message.stable) : undefined);
        return obj;
    },
    create(base) {
        return exports.MsgBurnStable.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgBurnStable();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : "";
        message.stable =
            object.stable !== undefined && object.stable !== null
                ? coin_1.Coin.fromPartial(object.stable)
                : undefined;
        return message;
    },
};
function createBaseMsgBurnStableResponse() {
    return { collateral: undefined, gov: undefined, feesPayed: [] };
}
exports.MsgBurnStableResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.collateral !== undefined) {
            coin_1.Coin.encode(message.collateral, writer.uint32(10).fork()).ldelim();
        }
        if (message.gov !== undefined) {
            coin_1.Coin.encode(message.gov, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.feesPayed) {
            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgBurnStableResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.collateral = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.gov = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.feesPayed.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            collateral: isSet(object.collateral)
                ? coin_1.Coin.fromJSON(object.collateral)
                : undefined,
            gov: isSet(object.gov) ? coin_1.Coin.fromJSON(object.gov) : undefined,
            feesPayed: Array.isArray(object === null || object === void 0 ? void 0 : object.feesPayed)
                ? object.feesPayed.map((e) => coin_1.Coin.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.collateral !== undefined &&
            (obj.collateral = message.collateral
                ? coin_1.Coin.toJSON(message.collateral)
                : undefined);
        message.gov !== undefined &&
            (obj.gov = message.gov ? coin_1.Coin.toJSON(message.gov) : undefined);
        if (message.feesPayed) {
            obj.feesPayed = message.feesPayed.map((e) => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.feesPayed = [];
        }
        return obj;
    },
    create(base) {
        return exports.MsgBurnStableResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgBurnStableResponse();
        message.collateral =
            object.collateral !== undefined && object.collateral !== null
                ? coin_1.Coin.fromPartial(object.collateral)
                : undefined;
        message.gov =
            object.gov !== undefined && object.gov !== null
                ? coin_1.Coin.fromPartial(object.gov)
                : undefined;
        message.feesPayed = ((_a = object.feesPayed) === null || _a === void 0 ? void 0 : _a.map((e) => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
};
function createBaseMsgRecollateralize() {
    return { creator: "", coll: undefined };
}
exports.MsgRecollateralize = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.coll !== undefined) {
            coin_1.Coin.encode(message.coll, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRecollateralize();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.coll = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: isSet(object.creator) ? String(object.creator) : "",
            coll: isSet(object.coll) ? coin_1.Coin.fromJSON(object.coll) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.creator !== undefined && (obj.creator = message.creator);
        message.coll !== undefined &&
            (obj.coll = message.coll ? coin_1.Coin.toJSON(message.coll) : undefined);
        return obj;
    },
    create(base) {
        return exports.MsgRecollateralize.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgRecollateralize();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : "";
        message.coll =
            object.coll !== undefined && object.coll !== null
                ? coin_1.Coin.fromPartial(object.coll)
                : undefined;
        return message;
    },
};
function createBaseMsgRecollateralizeResponse() {
    return { gov: undefined };
}
exports.MsgRecollateralizeResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.gov !== undefined) {
            coin_1.Coin.encode(message.gov, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgRecollateralizeResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.gov = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { gov: isSet(object.gov) ? coin_1.Coin.fromJSON(object.gov) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.gov !== undefined &&
            (obj.gov = message.gov ? coin_1.Coin.toJSON(message.gov) : undefined);
        return obj;
    },
    create(base) {
        return exports.MsgRecollateralizeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseMsgRecollateralizeResponse();
        message.gov =
            object.gov !== undefined && object.gov !== null
                ? coin_1.Coin.fromPartial(object.gov)
                : undefined;
        return message;
    },
};
function createBaseMsgBuyback() {
    return { creator: "", gov: undefined };
}
exports.MsgBuyback = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        if (message.gov !== undefined) {
            coin_1.Coin.encode(message.gov, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgBuyback();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.gov = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: isSet(object.creator) ? String(object.creator) : "",
            gov: isSet(object.gov) ? coin_1.Coin.fromJSON(object.gov) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.creator !== undefined && (obj.creator = message.creator);
        message.gov !== undefined &&
            (obj.gov = message.gov ? coin_1.Coin.toJSON(message.gov) : undefined);
        return obj;
    },
    create(base) {
        return exports.MsgBuyback.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseMsgBuyback();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : "";
        message.gov =
            object.gov !== undefined && object.gov !== null
                ? coin_1.Coin.fromPartial(object.gov)
                : undefined;
        return message;
    },
};
function createBaseMsgBuybackResponse() {
    return { coll: undefined };
}
exports.MsgBuybackResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.coll !== undefined) {
            coin_1.Coin.encode(message.coll, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgBuybackResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.coll = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { coll: isSet(object.coll) ? coin_1.Coin.fromJSON(object.coll) : undefined };
    },
    toJSON(message) {
        const obj = {};
        message.coll !== undefined &&
            (obj.coll = message.coll ? coin_1.Coin.toJSON(message.coll) : undefined);
        return obj;
    },
    create(base) {
        return exports.MsgBuybackResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseMsgBuybackResponse();
        message.coll =
            object.coll !== undefined && object.coll !== null
                ? coin_1.Coin.fromPartial(object.coll)
                : undefined;
        return message;
    },
};
exports.MsgServiceName = "nibiru.stablecoin.v1.Msg";
class MsgClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.MsgServiceName;
        this.rpc = rpc;
        this.MintStable = this.MintStable.bind(this);
        this.BurnStable = this.BurnStable.bind(this);
        this.Recollateralize = this.Recollateralize.bind(this);
        this.Buyback = this.Buyback.bind(this);
    }
    MintStable(request) {
        const data = exports.MsgMintStable.encode(request).finish();
        const promise = this.rpc.request(this.service, "MintStable", data);
        return promise.then((data) => exports.MsgMintStableResponse.decode(minimal_1.default.Reader.create(data)));
    }
    BurnStable(request) {
        const data = exports.MsgBurnStable.encode(request).finish();
        const promise = this.rpc.request(this.service, "BurnStable", data);
        return promise.then((data) => exports.MsgBurnStableResponse.decode(minimal_1.default.Reader.create(data)));
    }
    Recollateralize(request) {
        const data = exports.MsgRecollateralize.encode(request).finish();
        const promise = this.rpc.request(this.service, "Recollateralize", data);
        return promise.then((data) => exports.MsgRecollateralizeResponse.decode(minimal_1.default.Reader.create(data)));
    }
    Buyback(request) {
        const data = exports.MsgBuyback.encode(request).finish();
        const promise = this.rpc.request(this.service, "Buyback", data);
        return promise.then((data) => exports.MsgBuybackResponse.decode(minimal_1.default.Reader.create(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=tx.js.map