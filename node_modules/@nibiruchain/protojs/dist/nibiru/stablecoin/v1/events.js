"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventBuyback = exports.EventRecollateralize = exports.EventBurnNIBI = exports.EventMintNIBI = exports.EventBurnStable = exports.EventMintStable = exports.EventTransfer = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = "nibiru.stablecoin.v1";
function createBaseEventTransfer() {
    return { coin: undefined, from: "", to: "" };
}
exports.EventTransfer = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.coin !== undefined) {
            coin_1.Coin.encode(message.coin, writer.uint32(10).fork()).ldelim();
        }
        if (message.from !== "") {
            writer.uint32(18).string(message.from);
        }
        if (message.to !== "") {
            writer.uint32(26).string(message.to);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventTransfer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.coin = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.from = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.to = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            coin: isSet(object.coin) ? coin_1.Coin.fromJSON(object.coin) : undefined,
            from: isSet(object.from) ? String(object.from) : "",
            to: isSet(object.to) ? String(object.to) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.coin !== undefined &&
            (obj.coin = message.coin ? coin_1.Coin.toJSON(message.coin) : undefined);
        message.from !== undefined && (obj.from = message.from);
        message.to !== undefined && (obj.to = message.to);
        return obj;
    },
    create(base) {
        return exports.EventTransfer.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventTransfer();
        message.coin =
            object.coin !== undefined && object.coin !== null
                ? coin_1.Coin.fromPartial(object.coin)
                : undefined;
        message.from = (_a = object.from) !== null && _a !== void 0 ? _a : "";
        message.to = (_b = object.to) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseEventMintStable() {
    return { amount: "" };
}
exports.EventMintStable = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventMintStable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? String(object.amount) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.amount !== undefined && (obj.amount = message.amount);
        return obj;
    },
    create(base) {
        return exports.EventMintStable.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEventMintStable();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseEventBurnStable() {
    return { amount: "" };
}
exports.EventBurnStable = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventBurnStable();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? String(object.amount) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.amount !== undefined && (obj.amount = message.amount);
        return obj;
    },
    create(base) {
        return exports.EventBurnStable.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEventBurnStable();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseEventMintNIBI() {
    return { amount: "" };
}
exports.EventMintNIBI = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventMintNIBI();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? String(object.amount) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.amount !== undefined && (obj.amount = message.amount);
        return obj;
    },
    create(base) {
        return exports.EventMintNIBI.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEventMintNIBI();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseEventBurnNIBI() {
    return { amount: "" };
}
exports.EventBurnNIBI = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.amount !== "") {
            writer.uint32(10).string(message.amount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventBurnNIBI();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.amount = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { amount: isSet(object.amount) ? String(object.amount) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.amount !== undefined && (obj.amount = message.amount);
        return obj;
    },
    create(base) {
        return exports.EventBurnNIBI.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEventBurnNIBI();
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseEventRecollateralize() {
    return { caller: "", inCoin: undefined, outCoin: undefined, collRatio: "" };
}
exports.EventRecollateralize = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.caller !== "") {
            writer.uint32(10).string(message.caller);
        }
        if (message.inCoin !== undefined) {
            coin_1.Coin.encode(message.inCoin, writer.uint32(18).fork()).ldelim();
        }
        if (message.outCoin !== undefined) {
            coin_1.Coin.encode(message.outCoin, writer.uint32(26).fork()).ldelim();
        }
        if (message.collRatio !== "") {
            writer.uint32(34).string(message.collRatio);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventRecollateralize();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.caller = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.inCoin = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.outCoin = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.collRatio = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            caller: isSet(object.caller) ? String(object.caller) : "",
            inCoin: isSet(object.inCoin) ? coin_1.Coin.fromJSON(object.inCoin) : undefined,
            outCoin: isSet(object.outCoin)
                ? coin_1.Coin.fromJSON(object.outCoin)
                : undefined,
            collRatio: isSet(object.collRatio) ? String(object.collRatio) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.caller !== undefined && (obj.caller = message.caller);
        message.inCoin !== undefined &&
            (obj.inCoin = message.inCoin ? coin_1.Coin.toJSON(message.inCoin) : undefined);
        message.outCoin !== undefined &&
            (obj.outCoin = message.outCoin ? coin_1.Coin.toJSON(message.outCoin) : undefined);
        message.collRatio !== undefined && (obj.collRatio = message.collRatio);
        return obj;
    },
    create(base) {
        return exports.EventRecollateralize.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventRecollateralize();
        message.caller = (_a = object.caller) !== null && _a !== void 0 ? _a : "";
        message.inCoin =
            object.inCoin !== undefined && object.inCoin !== null
                ? coin_1.Coin.fromPartial(object.inCoin)
                : undefined;
        message.outCoin =
            object.outCoin !== undefined && object.outCoin !== null
                ? coin_1.Coin.fromPartial(object.outCoin)
                : undefined;
        message.collRatio = (_b = object.collRatio) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseEventBuyback() {
    return { caller: "", inCoin: undefined, outCoin: undefined, collRatio: "" };
}
exports.EventBuyback = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.caller !== "") {
            writer.uint32(10).string(message.caller);
        }
        if (message.inCoin !== undefined) {
            coin_1.Coin.encode(message.inCoin, writer.uint32(18).fork()).ldelim();
        }
        if (message.outCoin !== undefined) {
            coin_1.Coin.encode(message.outCoin, writer.uint32(26).fork()).ldelim();
        }
        if (message.collRatio !== "") {
            writer.uint32(34).string(message.collRatio);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventBuyback();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.caller = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.inCoin = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.outCoin = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.collRatio = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            caller: isSet(object.caller) ? String(object.caller) : "",
            inCoin: isSet(object.inCoin) ? coin_1.Coin.fromJSON(object.inCoin) : undefined,
            outCoin: isSet(object.outCoin)
                ? coin_1.Coin.fromJSON(object.outCoin)
                : undefined,
            collRatio: isSet(object.collRatio) ? String(object.collRatio) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.caller !== undefined && (obj.caller = message.caller);
        message.inCoin !== undefined &&
            (obj.inCoin = message.inCoin ? coin_1.Coin.toJSON(message.inCoin) : undefined);
        message.outCoin !== undefined &&
            (obj.outCoin = message.outCoin ? coin_1.Coin.toJSON(message.outCoin) : undefined);
        message.collRatio !== undefined && (obj.collRatio = message.collRatio);
        return obj;
    },
    create(base) {
        return exports.EventBuyback.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventBuyback();
        message.caller = (_a = object.caller) !== null && _a !== void 0 ? _a : "";
        message.inCoin =
            object.inCoin !== undefined && object.inCoin !== null
                ? coin_1.Coin.fromPartial(object.inCoin)
                : undefined;
        message.outCoin =
            object.outCoin !== undefined && object.outCoin !== null
                ? coin_1.Coin.fromPartial(object.outCoin)
                : undefined;
        message.collRatio = (_b = object.collRatio) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=events.js.map