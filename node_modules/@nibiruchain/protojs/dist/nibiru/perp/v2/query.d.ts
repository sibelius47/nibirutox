import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { AMM, Market, Position } from "./state";
export declare const protobufPackage = "nibiru.perp.v2";
export interface QueryPositionsRequest {
    trader: string;
}
export interface QueryPositionsResponse {
    positions: QueryPositionResponse[];
}
/**
 * QueryPositionRequest is the request type for the position of the x/perp
 * module account.
 */
export interface QueryPositionRequest {
    pair: string;
    trader: string;
}
export interface QueryPositionResponse {
    /** The position as it exists in the blockchain state */
    position?: Position;
    /**
     * The position's current notional value, if it were to be entirely closed (in
     * margin units).
     */
    positionNotional: string;
    /** The position's unrealized PnL. */
    unrealizedPnl: string;
    /** margin ratio of the position based on the spot price */
    marginRatio: string;
}
export interface QueryModuleAccountsRequest {
}
export interface QueryModuleAccountsResponse {
    accounts: AccountWithBalance[];
}
export interface AccountWithBalance {
    name: string;
    address: string;
    balance: Coin[];
}
export interface AmmMarket {
    market?: Market;
    amm?: AMM;
}
export interface QueryMarketsRequest {
}
export interface QueryMarketsResponse {
    ammMarkets: AmmMarket[];
}
export declare const QueryPositionsRequest: {
    encode(message: QueryPositionsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryPositionsRequest;
    fromJSON(object: any): QueryPositionsRequest;
    toJSON(message: QueryPositionsRequest): unknown;
    create<I extends {
        trader?: string | undefined;
    } & {
        trader?: string | undefined;
    } & { [K in Exclude<keyof I, "trader">]: never; }>(base?: I | undefined): QueryPositionsRequest;
    fromPartial<I_1 extends {
        trader?: string | undefined;
    } & {
        trader?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, "trader">]: never; }>(object: I_1): QueryPositionsRequest;
};
export declare const QueryPositionsResponse: {
    encode(message: QueryPositionsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryPositionsResponse;
    fromJSON(object: any): QueryPositionsResponse;
    toJSON(message: QueryPositionsResponse): unknown;
    create<I extends {
        positions?: {
            position?: {
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
            } | undefined;
            positionNotional?: string | undefined;
            unrealizedPnl?: string | undefined;
            marginRatio?: string | undefined;
        }[] | undefined;
    } & {
        positions?: ({
            position?: {
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
            } | undefined;
            positionNotional?: string | undefined;
            unrealizedPnl?: string | undefined;
            marginRatio?: string | undefined;
        }[] & ({
            position?: {
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
            } | undefined;
            positionNotional?: string | undefined;
            unrealizedPnl?: string | undefined;
            marginRatio?: string | undefined;
        } & {
            position?: ({
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
            } & {
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                lastUpdatedBlockNumber?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & { [K in Exclude<keyof I["positions"][number]["position"]["lastUpdatedBlockNumber"], keyof Long.Long>]: never; }) | undefined;
            } & { [K_1 in Exclude<keyof I["positions"][number]["position"], keyof Position>]: never; }) | undefined;
            positionNotional?: string | undefined;
            unrealizedPnl?: string | undefined;
            marginRatio?: string | undefined;
        } & { [K_2 in Exclude<keyof I["positions"][number], keyof QueryPositionResponse>]: never; })[] & { [K_3 in Exclude<keyof I["positions"], keyof {
            position?: {
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
            } | undefined;
            positionNotional?: string | undefined;
            unrealizedPnl?: string | undefined;
            marginRatio?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_4 in Exclude<keyof I, "positions">]: never; }>(base?: I | undefined): QueryPositionsResponse;
    fromPartial<I_1 extends {
        positions?: {
            position?: {
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
            } | undefined;
            positionNotional?: string | undefined;
            unrealizedPnl?: string | undefined;
            marginRatio?: string | undefined;
        }[] | undefined;
    } & {
        positions?: ({
            position?: {
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
            } | undefined;
            positionNotional?: string | undefined;
            unrealizedPnl?: string | undefined;
            marginRatio?: string | undefined;
        }[] & ({
            position?: {
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
            } | undefined;
            positionNotional?: string | undefined;
            unrealizedPnl?: string | undefined;
            marginRatio?: string | undefined;
        } & {
            position?: ({
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
            } & {
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                lastUpdatedBlockNumber?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & { [K_5 in Exclude<keyof I_1["positions"][number]["position"]["lastUpdatedBlockNumber"], keyof Long.Long>]: never; }) | undefined;
            } & { [K_6 in Exclude<keyof I_1["positions"][number]["position"], keyof Position>]: never; }) | undefined;
            positionNotional?: string | undefined;
            unrealizedPnl?: string | undefined;
            marginRatio?: string | undefined;
        } & { [K_7 in Exclude<keyof I_1["positions"][number], keyof QueryPositionResponse>]: never; })[] & { [K_8 in Exclude<keyof I_1["positions"], keyof {
            position?: {
                traderAddress?: string | undefined;
                pair?: string | undefined;
                size?: string | undefined;
                margin?: string | undefined;
                openNotional?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
            } | undefined;
            positionNotional?: string | undefined;
            unrealizedPnl?: string | undefined;
            marginRatio?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_9 in Exclude<keyof I_1, "positions">]: never; }>(object: I_1): QueryPositionsResponse;
};
export declare const QueryPositionRequest: {
    encode(message: QueryPositionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryPositionRequest;
    fromJSON(object: any): QueryPositionRequest;
    toJSON(message: QueryPositionRequest): unknown;
    create<I extends {
        pair?: string | undefined;
        trader?: string | undefined;
    } & {
        pair?: string | undefined;
        trader?: string | undefined;
    } & { [K in Exclude<keyof I, keyof QueryPositionRequest>]: never; }>(base?: I | undefined): QueryPositionRequest;
    fromPartial<I_1 extends {
        pair?: string | undefined;
        trader?: string | undefined;
    } & {
        pair?: string | undefined;
        trader?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof QueryPositionRequest>]: never; }>(object: I_1): QueryPositionRequest;
};
export declare const QueryPositionResponse: {
    encode(message: QueryPositionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryPositionResponse;
    fromJSON(object: any): QueryPositionResponse;
    toJSON(message: QueryPositionResponse): unknown;
    create<I extends {
        position?: {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
        } | undefined;
        positionNotional?: string | undefined;
        unrealizedPnl?: string | undefined;
        marginRatio?: string | undefined;
    } & {
        position?: ({
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
        } & {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            lastUpdatedBlockNumber?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K in Exclude<keyof I["position"]["lastUpdatedBlockNumber"], keyof Long.Long>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["position"], keyof Position>]: never; }) | undefined;
        positionNotional?: string | undefined;
        unrealizedPnl?: string | undefined;
        marginRatio?: string | undefined;
    } & { [K_2 in Exclude<keyof I, keyof QueryPositionResponse>]: never; }>(base?: I | undefined): QueryPositionResponse;
    fromPartial<I_1 extends {
        position?: {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
        } | undefined;
        positionNotional?: string | undefined;
        unrealizedPnl?: string | undefined;
        marginRatio?: string | undefined;
    } & {
        position?: ({
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
        } & {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            lastUpdatedBlockNumber?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K_3 in Exclude<keyof I_1["position"]["lastUpdatedBlockNumber"], keyof Long.Long>]: never; }) | undefined;
        } & { [K_4 in Exclude<keyof I_1["position"], keyof Position>]: never; }) | undefined;
        positionNotional?: string | undefined;
        unrealizedPnl?: string | undefined;
        marginRatio?: string | undefined;
    } & { [K_5 in Exclude<keyof I_1, keyof QueryPositionResponse>]: never; }>(object: I_1): QueryPositionResponse;
};
export declare const QueryModuleAccountsRequest: {
    encode(_: QueryModuleAccountsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryModuleAccountsRequest;
    fromJSON(_: any): QueryModuleAccountsRequest;
    toJSON(_: QueryModuleAccountsRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): QueryModuleAccountsRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): QueryModuleAccountsRequest;
};
export declare const QueryModuleAccountsResponse: {
    encode(message: QueryModuleAccountsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryModuleAccountsResponse;
    fromJSON(object: any): QueryModuleAccountsResponse;
    toJSON(message: QueryModuleAccountsResponse): unknown;
    create<I extends {
        accounts?: {
            name?: string | undefined;
            address?: string | undefined;
            balance?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        accounts?: ({
            name?: string | undefined;
            address?: string | undefined;
            balance?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] & ({
            name?: string | undefined;
            address?: string | undefined;
            balance?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } & {
            name?: string | undefined;
            address?: string | undefined;
            balance?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K in Exclude<keyof I["accounts"][number]["balance"][number], keyof Coin>]: never; })[] & { [K_1 in Exclude<keyof I["accounts"][number]["balance"], keyof {
                denom?: string | undefined;
                amount?: string | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_2 in Exclude<keyof I["accounts"][number], keyof AccountWithBalance>]: never; })[] & { [K_3 in Exclude<keyof I["accounts"], keyof {
            name?: string | undefined;
            address?: string | undefined;
            balance?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_4 in Exclude<keyof I, "accounts">]: never; }>(base?: I | undefined): QueryModuleAccountsResponse;
    fromPartial<I_1 extends {
        accounts?: {
            name?: string | undefined;
            address?: string | undefined;
            balance?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        accounts?: ({
            name?: string | undefined;
            address?: string | undefined;
            balance?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[] & ({
            name?: string | undefined;
            address?: string | undefined;
            balance?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        } & {
            name?: string | undefined;
            address?: string | undefined;
            balance?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_5 in Exclude<keyof I_1["accounts"][number]["balance"][number], keyof Coin>]: never; })[] & { [K_6 in Exclude<keyof I_1["accounts"][number]["balance"], keyof {
                denom?: string | undefined;
                amount?: string | undefined;
            }[]>]: never; }) | undefined;
        } & { [K_7 in Exclude<keyof I_1["accounts"][number], keyof AccountWithBalance>]: never; })[] & { [K_8 in Exclude<keyof I_1["accounts"], keyof {
            name?: string | undefined;
            address?: string | undefined;
            balance?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_9 in Exclude<keyof I_1, "accounts">]: never; }>(object: I_1): QueryModuleAccountsResponse;
};
export declare const AccountWithBalance: {
    encode(message: AccountWithBalance, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccountWithBalance;
    fromJSON(object: any): AccountWithBalance;
    toJSON(message: AccountWithBalance): unknown;
    create<I extends {
        name?: string | undefined;
        address?: string | undefined;
        balance?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        name?: string | undefined;
        address?: string | undefined;
        balance?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["balance"][number], keyof Coin>]: never; })[] & { [K_1 in Exclude<keyof I["balance"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, keyof AccountWithBalance>]: never; }>(base?: I | undefined): AccountWithBalance;
    fromPartial<I_1 extends {
        name?: string | undefined;
        address?: string | undefined;
        balance?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        name?: string | undefined;
        address?: string | undefined;
        balance?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_3 in Exclude<keyof I_1["balance"][number], keyof Coin>]: never; })[] & { [K_4 in Exclude<keyof I_1["balance"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, keyof AccountWithBalance>]: never; }>(object: I_1): AccountWithBalance;
};
export declare const AmmMarket: {
    encode(message: AmmMarket, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AmmMarket;
    fromJSON(object: any): AmmMarket;
    toJSON(message: AmmMarket): unknown;
    create<I extends {
        market?: {
            pair?: string | undefined;
            enabled?: boolean | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            exchangeFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateEpochId?: string | undefined;
            twapLookbackWindow?: {
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            prepaidBadDebt?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } | undefined;
        amm?: {
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        } | undefined;
    } & {
        market?: ({
            pair?: string | undefined;
            enabled?: boolean | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            exchangeFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateEpochId?: string | undefined;
            twapLookbackWindow?: {
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            prepaidBadDebt?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            pair?: string | undefined;
            enabled?: boolean | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            exchangeFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateEpochId?: string | undefined;
            twapLookbackWindow?: ({
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & { [K in Exclude<keyof I["market"]["twapLookbackWindow"]["seconds"], keyof Long.Long>]: never; }) | undefined;
                nanos?: number | undefined;
            } & { [K_1 in Exclude<keyof I["market"]["twapLookbackWindow"], keyof import("../../../google/protobuf/duration").Duration>]: never; }) | undefined;
            prepaidBadDebt?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_2 in Exclude<keyof I["market"]["prepaidBadDebt"], keyof Coin>]: never; }) | undefined;
        } & { [K_3 in Exclude<keyof I["market"], keyof Market>]: never; }) | undefined;
        amm?: ({
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        } & {
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        } & { [K_4 in Exclude<keyof I["amm"], keyof AMM>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I, keyof AmmMarket>]: never; }>(base?: I | undefined): AmmMarket;
    fromPartial<I_1 extends {
        market?: {
            pair?: string | undefined;
            enabled?: boolean | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            exchangeFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateEpochId?: string | undefined;
            twapLookbackWindow?: {
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            prepaidBadDebt?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } | undefined;
        amm?: {
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        } | undefined;
    } & {
        market?: ({
            pair?: string | undefined;
            enabled?: boolean | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            exchangeFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateEpochId?: string | undefined;
            twapLookbackWindow?: {
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            prepaidBadDebt?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            pair?: string | undefined;
            enabled?: boolean | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            exchangeFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateEpochId?: string | undefined;
            twapLookbackWindow?: ({
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & { [K_6 in Exclude<keyof I_1["market"]["twapLookbackWindow"]["seconds"], keyof Long.Long>]: never; }) | undefined;
                nanos?: number | undefined;
            } & { [K_7 in Exclude<keyof I_1["market"]["twapLookbackWindow"], keyof import("../../../google/protobuf/duration").Duration>]: never; }) | undefined;
            prepaidBadDebt?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_8 in Exclude<keyof I_1["market"]["prepaidBadDebt"], keyof Coin>]: never; }) | undefined;
        } & { [K_9 in Exclude<keyof I_1["market"], keyof Market>]: never; }) | undefined;
        amm?: ({
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        } & {
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        } & { [K_10 in Exclude<keyof I_1["amm"], keyof AMM>]: never; }) | undefined;
    } & { [K_11 in Exclude<keyof I_1, keyof AmmMarket>]: never; }>(object: I_1): AmmMarket;
};
export declare const QueryMarketsRequest: {
    encode(_: QueryMarketsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryMarketsRequest;
    fromJSON(_: any): QueryMarketsRequest;
    toJSON(_: QueryMarketsRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I | undefined): QueryMarketsRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): QueryMarketsRequest;
};
export declare const QueryMarketsResponse: {
    encode(message: QueryMarketsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): QueryMarketsResponse;
    fromJSON(object: any): QueryMarketsResponse;
    toJSON(message: QueryMarketsResponse): unknown;
    create<I extends {
        ammMarkets?: {
            market?: {
                pair?: string | undefined;
                enabled?: boolean | undefined;
                maintenanceMarginRatio?: string | undefined;
                maxLeverage?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                exchangeFeeRatio?: string | undefined;
                ecosystemFundFeeRatio?: string | undefined;
                liquidationFeeRatio?: string | undefined;
                partialLiquidationRatio?: string | undefined;
                fundingRateEpochId?: string | undefined;
                twapLookbackWindow?: {
                    seconds?: string | number | Long.Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
                prepaidBadDebt?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            } | undefined;
            amm?: {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        ammMarkets?: ({
            market?: {
                pair?: string | undefined;
                enabled?: boolean | undefined;
                maintenanceMarginRatio?: string | undefined;
                maxLeverage?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                exchangeFeeRatio?: string | undefined;
                ecosystemFundFeeRatio?: string | undefined;
                liquidationFeeRatio?: string | undefined;
                partialLiquidationRatio?: string | undefined;
                fundingRateEpochId?: string | undefined;
                twapLookbackWindow?: {
                    seconds?: string | number | Long.Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
                prepaidBadDebt?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            } | undefined;
            amm?: {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } | undefined;
        }[] & ({
            market?: {
                pair?: string | undefined;
                enabled?: boolean | undefined;
                maintenanceMarginRatio?: string | undefined;
                maxLeverage?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                exchangeFeeRatio?: string | undefined;
                ecosystemFundFeeRatio?: string | undefined;
                liquidationFeeRatio?: string | undefined;
                partialLiquidationRatio?: string | undefined;
                fundingRateEpochId?: string | undefined;
                twapLookbackWindow?: {
                    seconds?: string | number | Long.Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
                prepaidBadDebt?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            } | undefined;
            amm?: {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } | undefined;
        } & {
            market?: ({
                pair?: string | undefined;
                enabled?: boolean | undefined;
                maintenanceMarginRatio?: string | undefined;
                maxLeverage?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                exchangeFeeRatio?: string | undefined;
                ecosystemFundFeeRatio?: string | undefined;
                liquidationFeeRatio?: string | undefined;
                partialLiquidationRatio?: string | undefined;
                fundingRateEpochId?: string | undefined;
                twapLookbackWindow?: {
                    seconds?: string | number | Long.Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
                prepaidBadDebt?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            } & {
                pair?: string | undefined;
                enabled?: boolean | undefined;
                maintenanceMarginRatio?: string | undefined;
                maxLeverage?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                exchangeFeeRatio?: string | undefined;
                ecosystemFundFeeRatio?: string | undefined;
                liquidationFeeRatio?: string | undefined;
                partialLiquidationRatio?: string | undefined;
                fundingRateEpochId?: string | undefined;
                twapLookbackWindow?: ({
                    seconds?: string | number | Long.Long | undefined;
                    nanos?: number | undefined;
                } & {
                    seconds?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & { [K in Exclude<keyof I["ammMarkets"][number]["market"]["twapLookbackWindow"]["seconds"], keyof Long.Long>]: never; }) | undefined;
                    nanos?: number | undefined;
                } & { [K_1 in Exclude<keyof I["ammMarkets"][number]["market"]["twapLookbackWindow"], keyof import("../../../google/protobuf/duration").Duration>]: never; }) | undefined;
                prepaidBadDebt?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & { [K_2 in Exclude<keyof I["ammMarkets"][number]["market"]["prepaidBadDebt"], keyof Coin>]: never; }) | undefined;
            } & { [K_3 in Exclude<keyof I["ammMarkets"][number]["market"], keyof Market>]: never; }) | undefined;
            amm?: ({
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } & {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } & { [K_4 in Exclude<keyof I["ammMarkets"][number]["amm"], keyof AMM>]: never; }) | undefined;
        } & { [K_5 in Exclude<keyof I["ammMarkets"][number], keyof AmmMarket>]: never; })[] & { [K_6 in Exclude<keyof I["ammMarkets"], keyof {
            market?: {
                pair?: string | undefined;
                enabled?: boolean | undefined;
                maintenanceMarginRatio?: string | undefined;
                maxLeverage?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                exchangeFeeRatio?: string | undefined;
                ecosystemFundFeeRatio?: string | undefined;
                liquidationFeeRatio?: string | undefined;
                partialLiquidationRatio?: string | undefined;
                fundingRateEpochId?: string | undefined;
                twapLookbackWindow?: {
                    seconds?: string | number | Long.Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
                prepaidBadDebt?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            } | undefined;
            amm?: {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_7 in Exclude<keyof I, "ammMarkets">]: never; }>(base?: I | undefined): QueryMarketsResponse;
    fromPartial<I_1 extends {
        ammMarkets?: {
            market?: {
                pair?: string | undefined;
                enabled?: boolean | undefined;
                maintenanceMarginRatio?: string | undefined;
                maxLeverage?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                exchangeFeeRatio?: string | undefined;
                ecosystemFundFeeRatio?: string | undefined;
                liquidationFeeRatio?: string | undefined;
                partialLiquidationRatio?: string | undefined;
                fundingRateEpochId?: string | undefined;
                twapLookbackWindow?: {
                    seconds?: string | number | Long.Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
                prepaidBadDebt?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            } | undefined;
            amm?: {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        ammMarkets?: ({
            market?: {
                pair?: string | undefined;
                enabled?: boolean | undefined;
                maintenanceMarginRatio?: string | undefined;
                maxLeverage?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                exchangeFeeRatio?: string | undefined;
                ecosystemFundFeeRatio?: string | undefined;
                liquidationFeeRatio?: string | undefined;
                partialLiquidationRatio?: string | undefined;
                fundingRateEpochId?: string | undefined;
                twapLookbackWindow?: {
                    seconds?: string | number | Long.Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
                prepaidBadDebt?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            } | undefined;
            amm?: {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } | undefined;
        }[] & ({
            market?: {
                pair?: string | undefined;
                enabled?: boolean | undefined;
                maintenanceMarginRatio?: string | undefined;
                maxLeverage?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                exchangeFeeRatio?: string | undefined;
                ecosystemFundFeeRatio?: string | undefined;
                liquidationFeeRatio?: string | undefined;
                partialLiquidationRatio?: string | undefined;
                fundingRateEpochId?: string | undefined;
                twapLookbackWindow?: {
                    seconds?: string | number | Long.Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
                prepaidBadDebt?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            } | undefined;
            amm?: {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } | undefined;
        } & {
            market?: ({
                pair?: string | undefined;
                enabled?: boolean | undefined;
                maintenanceMarginRatio?: string | undefined;
                maxLeverage?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                exchangeFeeRatio?: string | undefined;
                ecosystemFundFeeRatio?: string | undefined;
                liquidationFeeRatio?: string | undefined;
                partialLiquidationRatio?: string | undefined;
                fundingRateEpochId?: string | undefined;
                twapLookbackWindow?: {
                    seconds?: string | number | Long.Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
                prepaidBadDebt?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            } & {
                pair?: string | undefined;
                enabled?: boolean | undefined;
                maintenanceMarginRatio?: string | undefined;
                maxLeverage?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                exchangeFeeRatio?: string | undefined;
                ecosystemFundFeeRatio?: string | undefined;
                liquidationFeeRatio?: string | undefined;
                partialLiquidationRatio?: string | undefined;
                fundingRateEpochId?: string | undefined;
                twapLookbackWindow?: ({
                    seconds?: string | number | Long.Long | undefined;
                    nanos?: number | undefined;
                } & {
                    seconds?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & { [K_8 in Exclude<keyof I_1["ammMarkets"][number]["market"]["twapLookbackWindow"]["seconds"], keyof Long.Long>]: never; }) | undefined;
                    nanos?: number | undefined;
                } & { [K_9 in Exclude<keyof I_1["ammMarkets"][number]["market"]["twapLookbackWindow"], keyof import("../../../google/protobuf/duration").Duration>]: never; }) | undefined;
                prepaidBadDebt?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & { [K_10 in Exclude<keyof I_1["ammMarkets"][number]["market"]["prepaidBadDebt"], keyof Coin>]: never; }) | undefined;
            } & { [K_11 in Exclude<keyof I_1["ammMarkets"][number]["market"], keyof Market>]: never; }) | undefined;
            amm?: ({
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } & {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } & { [K_12 in Exclude<keyof I_1["ammMarkets"][number]["amm"], keyof AMM>]: never; }) | undefined;
        } & { [K_13 in Exclude<keyof I_1["ammMarkets"][number], keyof AmmMarket>]: never; })[] & { [K_14 in Exclude<keyof I_1["ammMarkets"], keyof {
            market?: {
                pair?: string | undefined;
                enabled?: boolean | undefined;
                maintenanceMarginRatio?: string | undefined;
                maxLeverage?: string | undefined;
                latestCumulativePremiumFraction?: string | undefined;
                exchangeFeeRatio?: string | undefined;
                ecosystemFundFeeRatio?: string | undefined;
                liquidationFeeRatio?: string | undefined;
                partialLiquidationRatio?: string | undefined;
                fundingRateEpochId?: string | undefined;
                twapLookbackWindow?: {
                    seconds?: string | number | Long.Long | undefined;
                    nanos?: number | undefined;
                } | undefined;
                prepaidBadDebt?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
            } | undefined;
            amm?: {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_15 in Exclude<keyof I_1, "ammMarkets">]: never; }>(object: I_1): QueryMarketsResponse;
};
/** Query defines the gRPC querier service. */
export interface Query {
    QueryPosition(request: QueryPositionRequest): Promise<QueryPositionResponse>;
    QueryPositions(request: QueryPositionsRequest): Promise<QueryPositionsResponse>;
    /** Queries the reserve assets in a given pool, identified by a token pair. */
    ModuleAccounts(request: QueryModuleAccountsRequest): Promise<QueryModuleAccountsResponse>;
    QueryMarkets(request: QueryMarketsRequest): Promise<QueryMarketsResponse>;
}
export declare const QueryServiceName = "nibiru.perp.v2.Query";
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    QueryPosition(request: QueryPositionRequest): Promise<QueryPositionResponse>;
    QueryPositions(request: QueryPositionsRequest): Promise<QueryPositionsResponse>;
    ModuleAccounts(request: QueryModuleAccountsRequest): Promise<QueryModuleAccountsResponse>;
    QueryMarkets(request: QueryMarketsRequest): Promise<QueryMarketsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
//# sourceMappingURL=query.d.ts.map