import Long from "long";
import _m0 from "protobufjs/minimal";
import { AMM, Market, Position, ReserveSnapshot } from "./state";
export declare const protobufPackage = "nibiru.perp.v2";
/** GenesisState defines the perp module's genesis state. */
export interface GenesisState {
    markets: Market[];
    amms: AMM[];
    positions: Position[];
    reserveSnapshots: ReserveSnapshot[];
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    create<I extends {
        markets?: {
            pair?: string | undefined;
            enabled?: boolean | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            exchangeFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateEpochId?: string | undefined;
            twapLookbackWindow?: {
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            prepaidBadDebt?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] | undefined;
        amms?: {
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        }[] | undefined;
        positions?: {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
        }[] | undefined;
        reserveSnapshots?: {
            amm?: {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } | undefined;
            timestampMs?: string | number | Long.Long | undefined;
        }[] | undefined;
    } & {
        markets?: ({
            pair?: string | undefined;
            enabled?: boolean | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            exchangeFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateEpochId?: string | undefined;
            twapLookbackWindow?: {
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            prepaidBadDebt?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] & ({
            pair?: string | undefined;
            enabled?: boolean | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            exchangeFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateEpochId?: string | undefined;
            twapLookbackWindow?: {
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            prepaidBadDebt?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            pair?: string | undefined;
            enabled?: boolean | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            exchangeFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateEpochId?: string | undefined;
            twapLookbackWindow?: ({
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & { [K in Exclude<keyof I["markets"][number]["twapLookbackWindow"]["seconds"], keyof Long.Long>]: never; }) | undefined;
                nanos?: number | undefined;
            } & { [K_1 in Exclude<keyof I["markets"][number]["twapLookbackWindow"], keyof import("../../../google/protobuf/duration").Duration>]: never; }) | undefined;
            prepaidBadDebt?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_2 in Exclude<keyof I["markets"][number]["prepaidBadDebt"], keyof import("../../../cosmos/base/v1beta1/coin").Coin>]: never; }) | undefined;
        } & { [K_3 in Exclude<keyof I["markets"][number], keyof Market>]: never; })[] & { [K_4 in Exclude<keyof I["markets"], keyof {
            pair?: string | undefined;
            enabled?: boolean | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            exchangeFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateEpochId?: string | undefined;
            twapLookbackWindow?: {
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            prepaidBadDebt?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
        amms?: ({
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        }[] & ({
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        } & {
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        } & { [K_5 in Exclude<keyof I["amms"][number], keyof AMM>]: never; })[] & { [K_6 in Exclude<keyof I["amms"], keyof {
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        }[]>]: never; }) | undefined;
        positions?: ({
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
        }[] & ({
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
        } & {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            lastUpdatedBlockNumber?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K_7 in Exclude<keyof I["positions"][number]["lastUpdatedBlockNumber"], keyof Long.Long>]: never; }) | undefined;
        } & { [K_8 in Exclude<keyof I["positions"][number], keyof Position>]: never; })[] & { [K_9 in Exclude<keyof I["positions"], keyof {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
        }[]>]: never; }) | undefined;
        reserveSnapshots?: ({
            amm?: {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } | undefined;
            timestampMs?: string | number | Long.Long | undefined;
        }[] & ({
            amm?: {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } | undefined;
            timestampMs?: string | number | Long.Long | undefined;
        } & {
            amm?: ({
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } & {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } & { [K_10 in Exclude<keyof I["reserveSnapshots"][number]["amm"], keyof AMM>]: never; }) | undefined;
            timestampMs?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K_11 in Exclude<keyof I["reserveSnapshots"][number]["timestampMs"], keyof Long.Long>]: never; }) | undefined;
        } & { [K_12 in Exclude<keyof I["reserveSnapshots"][number], keyof ReserveSnapshot>]: never; })[] & { [K_13 in Exclude<keyof I["reserveSnapshots"], keyof {
            amm?: {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } | undefined;
            timestampMs?: string | number | Long.Long | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_14 in Exclude<keyof I, keyof GenesisState>]: never; }>(base?: I | undefined): GenesisState;
    fromPartial<I_1 extends {
        markets?: {
            pair?: string | undefined;
            enabled?: boolean | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            exchangeFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateEpochId?: string | undefined;
            twapLookbackWindow?: {
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            prepaidBadDebt?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] | undefined;
        amms?: {
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        }[] | undefined;
        positions?: {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
        }[] | undefined;
        reserveSnapshots?: {
            amm?: {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } | undefined;
            timestampMs?: string | number | Long.Long | undefined;
        }[] | undefined;
    } & {
        markets?: ({
            pair?: string | undefined;
            enabled?: boolean | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            exchangeFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateEpochId?: string | undefined;
            twapLookbackWindow?: {
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            prepaidBadDebt?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] & ({
            pair?: string | undefined;
            enabled?: boolean | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            exchangeFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateEpochId?: string | undefined;
            twapLookbackWindow?: {
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            prepaidBadDebt?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            pair?: string | undefined;
            enabled?: boolean | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            exchangeFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateEpochId?: string | undefined;
            twapLookbackWindow?: ({
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & { [K_15 in Exclude<keyof I_1["markets"][number]["twapLookbackWindow"]["seconds"], keyof Long.Long>]: never; }) | undefined;
                nanos?: number | undefined;
            } & { [K_16 in Exclude<keyof I_1["markets"][number]["twapLookbackWindow"], keyof import("../../../google/protobuf/duration").Duration>]: never; }) | undefined;
            prepaidBadDebt?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_17 in Exclude<keyof I_1["markets"][number]["prepaidBadDebt"], keyof import("../../../cosmos/base/v1beta1/coin").Coin>]: never; }) | undefined;
        } & { [K_18 in Exclude<keyof I_1["markets"][number], keyof Market>]: never; })[] & { [K_19 in Exclude<keyof I_1["markets"], keyof {
            pair?: string | undefined;
            enabled?: boolean | undefined;
            maintenanceMarginRatio?: string | undefined;
            maxLeverage?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            exchangeFeeRatio?: string | undefined;
            ecosystemFundFeeRatio?: string | undefined;
            liquidationFeeRatio?: string | undefined;
            partialLiquidationRatio?: string | undefined;
            fundingRateEpochId?: string | undefined;
            twapLookbackWindow?: {
                seconds?: string | number | Long.Long | undefined;
                nanos?: number | undefined;
            } | undefined;
            prepaidBadDebt?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
        amms?: ({
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        }[] & ({
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        } & {
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        } & { [K_20 in Exclude<keyof I_1["amms"][number], keyof AMM>]: never; })[] & { [K_21 in Exclude<keyof I_1["amms"], keyof {
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        }[]>]: never; }) | undefined;
        positions?: ({
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
        }[] & ({
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
        } & {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            lastUpdatedBlockNumber?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K_22 in Exclude<keyof I_1["positions"][number]["lastUpdatedBlockNumber"], keyof Long.Long>]: never; }) | undefined;
        } & { [K_23 in Exclude<keyof I_1["positions"][number], keyof Position>]: never; })[] & { [K_24 in Exclude<keyof I_1["positions"], keyof {
            traderAddress?: string | undefined;
            pair?: string | undefined;
            size?: string | undefined;
            margin?: string | undefined;
            openNotional?: string | undefined;
            latestCumulativePremiumFraction?: string | undefined;
            lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
        }[]>]: never; }) | undefined;
        reserveSnapshots?: ({
            amm?: {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } | undefined;
            timestampMs?: string | number | Long.Long | undefined;
        }[] & ({
            amm?: {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } | undefined;
            timestampMs?: string | number | Long.Long | undefined;
        } & {
            amm?: ({
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } & {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } & { [K_25 in Exclude<keyof I_1["reserveSnapshots"][number]["amm"], keyof AMM>]: never; }) | undefined;
            timestampMs?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K_26 in Exclude<keyof I_1["reserveSnapshots"][number]["timestampMs"], keyof Long.Long>]: never; }) | undefined;
        } & { [K_27 in Exclude<keyof I_1["reserveSnapshots"][number], keyof ReserveSnapshot>]: never; })[] & { [K_28 in Exclude<keyof I_1["reserveSnapshots"], keyof {
            amm?: {
                pair?: string | undefined;
                baseReserve?: string | undefined;
                quoteReserve?: string | undefined;
                sqrtDepth?: string | undefined;
                priceMultiplier?: string | undefined;
                totalLong?: string | undefined;
                totalShort?: string | undefined;
            } | undefined;
            timestampMs?: string | number | Long.Long | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_29 in Exclude<keyof I_1, keyof GenesisState>]: never; }>(object: I_1): GenesisState;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
//# sourceMappingURL=genesis.d.ts.map