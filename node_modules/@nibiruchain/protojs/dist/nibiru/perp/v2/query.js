"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryServiceName = exports.QueryMarketsResponse = exports.QueryMarketsRequest = exports.AmmMarket = exports.AccountWithBalance = exports.QueryModuleAccountsResponse = exports.QueryModuleAccountsRequest = exports.QueryPositionResponse = exports.QueryPositionRequest = exports.QueryPositionsResponse = exports.QueryPositionsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const state_1 = require("./state");
exports.protobufPackage = "nibiru.perp.v2";
function createBaseQueryPositionsRequest() {
    return { trader: "" };
}
exports.QueryPositionsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.trader !== "") {
            writer.uint32(10).string(message.trader);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPositionsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.trader = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { trader: isSet(object.trader) ? String(object.trader) : "" };
    },
    toJSON(message) {
        const obj = {};
        message.trader !== undefined && (obj.trader = message.trader);
        return obj;
    },
    create(base) {
        return exports.QueryPositionsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryPositionsRequest();
        message.trader = (_a = object.trader) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryPositionsResponse() {
    return { positions: [] };
}
exports.QueryPositionsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.positions) {
            exports.QueryPositionResponse.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPositionsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.positions.push(exports.QueryPositionResponse.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            positions: Array.isArray(object === null || object === void 0 ? void 0 : object.positions)
                ? object.positions.map((e) => exports.QueryPositionResponse.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.positions) {
            obj.positions = message.positions.map((e) => e ? exports.QueryPositionResponse.toJSON(e) : undefined);
        }
        else {
            obj.positions = [];
        }
        return obj;
    },
    create(base) {
        return exports.QueryPositionsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryPositionsResponse();
        message.positions =
            ((_a = object.positions) === null || _a === void 0 ? void 0 : _a.map((e) => exports.QueryPositionResponse.fromPartial(e))) || [];
        return message;
    },
};
function createBaseQueryPositionRequest() {
    return { pair: "", trader: "" };
}
exports.QueryPositionRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(10).string(message.pair);
        }
        if (message.trader !== "") {
            writer.uint32(18).string(message.trader);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPositionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.pair = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.trader = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
            trader: isSet(object.trader) ? String(object.trader) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        message.trader !== undefined && (obj.trader = message.trader);
        return obj;
    },
    create(base) {
        return exports.QueryPositionRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseQueryPositionRequest();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        message.trader = (_b = object.trader) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryPositionResponse() {
    return {
        position: undefined,
        positionNotional: "",
        unrealizedPnl: "",
        marginRatio: "",
    };
}
exports.QueryPositionResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.position !== undefined) {
            state_1.Position.encode(message.position, writer.uint32(10).fork()).ldelim();
        }
        if (message.positionNotional !== "") {
            writer.uint32(18).string(message.positionNotional);
        }
        if (message.unrealizedPnl !== "") {
            writer.uint32(26).string(message.unrealizedPnl);
        }
        if (message.marginRatio !== "") {
            writer.uint32(34).string(message.marginRatio);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPositionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.position = state_1.Position.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.positionNotional = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.unrealizedPnl = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.marginRatio = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            position: isSet(object.position)
                ? state_1.Position.fromJSON(object.position)
                : undefined,
            positionNotional: isSet(object.positionNotional)
                ? String(object.positionNotional)
                : "",
            unrealizedPnl: isSet(object.unrealizedPnl)
                ? String(object.unrealizedPnl)
                : "",
            marginRatio: isSet(object.marginRatio) ? String(object.marginRatio) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.position !== undefined &&
            (obj.position = message.position
                ? state_1.Position.toJSON(message.position)
                : undefined);
        message.positionNotional !== undefined &&
            (obj.positionNotional = message.positionNotional);
        message.unrealizedPnl !== undefined &&
            (obj.unrealizedPnl = message.unrealizedPnl);
        message.marginRatio !== undefined && (obj.marginRatio = message.marginRatio);
        return obj;
    },
    create(base) {
        return exports.QueryPositionResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseQueryPositionResponse();
        message.position =
            object.position !== undefined && object.position !== null
                ? state_1.Position.fromPartial(object.position)
                : undefined;
        message.positionNotional = (_a = object.positionNotional) !== null && _a !== void 0 ? _a : "";
        message.unrealizedPnl = (_b = object.unrealizedPnl) !== null && _b !== void 0 ? _b : "";
        message.marginRatio = (_c = object.marginRatio) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseQueryModuleAccountsRequest() {
    return {};
}
exports.QueryModuleAccountsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryModuleAccountsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryModuleAccountsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryModuleAccountsRequest();
        return message;
    },
};
function createBaseQueryModuleAccountsResponse() {
    return { accounts: [] };
}
exports.QueryModuleAccountsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.accounts) {
            exports.AccountWithBalance.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryModuleAccountsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.accounts.push(exports.AccountWithBalance.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            accounts: Array.isArray(object === null || object === void 0 ? void 0 : object.accounts)
                ? object.accounts.map((e) => exports.AccountWithBalance.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.accounts) {
            obj.accounts = message.accounts.map((e) => e ? exports.AccountWithBalance.toJSON(e) : undefined);
        }
        else {
            obj.accounts = [];
        }
        return obj;
    },
    create(base) {
        return exports.QueryModuleAccountsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryModuleAccountsResponse();
        message.accounts =
            ((_a = object.accounts) === null || _a === void 0 ? void 0 : _a.map((e) => exports.AccountWithBalance.fromPartial(e))) || [];
        return message;
    },
};
function createBaseAccountWithBalance() {
    return { name: "", address: "", balance: [] };
}
exports.AccountWithBalance = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        for (const v of message.balance) {
            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAccountWithBalance();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.balance.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            address: isSet(object.address) ? String(object.address) : "",
            balance: Array.isArray(object === null || object === void 0 ? void 0 : object.balance)
                ? object.balance.map((e) => coin_1.Coin.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.address !== undefined && (obj.address = message.address);
        if (message.balance) {
            obj.balance = message.balance.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.balance = [];
        }
        return obj;
    },
    create(base) {
        return exports.AccountWithBalance.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseAccountWithBalance();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.address = (_b = object.address) !== null && _b !== void 0 ? _b : "";
        message.balance = ((_c = object.balance) === null || _c === void 0 ? void 0 : _c.map((e) => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
};
function createBaseAmmMarket() {
    return { market: undefined, amm: undefined };
}
exports.AmmMarket = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.market !== undefined) {
            state_1.Market.encode(message.market, writer.uint32(10).fork()).ldelim();
        }
        if (message.amm !== undefined) {
            state_1.AMM.encode(message.amm, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAmmMarket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.market = state_1.Market.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.amm = state_1.AMM.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            market: isSet(object.market) ? state_1.Market.fromJSON(object.market) : undefined,
            amm: isSet(object.amm) ? state_1.AMM.fromJSON(object.amm) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.market !== undefined &&
            (obj.market = message.market ? state_1.Market.toJSON(message.market) : undefined);
        message.amm !== undefined &&
            (obj.amm = message.amm ? state_1.AMM.toJSON(message.amm) : undefined);
        return obj;
    },
    create(base) {
        return exports.AmmMarket.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseAmmMarket();
        message.market =
            object.market !== undefined && object.market !== null
                ? state_1.Market.fromPartial(object.market)
                : undefined;
        message.amm =
            object.amm !== undefined && object.amm !== null
                ? state_1.AMM.fromPartial(object.amm)
                : undefined;
        return message;
    },
};
function createBaseQueryMarketsRequest() {
    return {};
}
exports.QueryMarketsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryMarketsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryMarketsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryMarketsRequest();
        return message;
    },
};
function createBaseQueryMarketsResponse() {
    return { ammMarkets: [] };
}
exports.QueryMarketsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.ammMarkets) {
            exports.AmmMarket.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryMarketsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.ammMarkets.push(exports.AmmMarket.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            ammMarkets: Array.isArray(object === null || object === void 0 ? void 0 : object.ammMarkets)
                ? object.ammMarkets.map((e) => exports.AmmMarket.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.ammMarkets) {
            obj.ammMarkets = message.ammMarkets.map((e) => e ? exports.AmmMarket.toJSON(e) : undefined);
        }
        else {
            obj.ammMarkets = [];
        }
        return obj;
    },
    create(base) {
        return exports.QueryMarketsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryMarketsResponse();
        message.ammMarkets =
            ((_a = object.ammMarkets) === null || _a === void 0 ? void 0 : _a.map((e) => exports.AmmMarket.fromPartial(e))) || [];
        return message;
    },
};
exports.QueryServiceName = "nibiru.perp.v2.Query";
class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.QueryServiceName;
        this.rpc = rpc;
        this.QueryPosition = this.QueryPosition.bind(this);
        this.QueryPositions = this.QueryPositions.bind(this);
        this.ModuleAccounts = this.ModuleAccounts.bind(this);
        this.QueryMarkets = this.QueryMarkets.bind(this);
    }
    QueryPosition(request) {
        const data = exports.QueryPositionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "QueryPosition", data);
        return promise.then((data) => exports.QueryPositionResponse.decode(minimal_1.default.Reader.create(data)));
    }
    QueryPositions(request) {
        const data = exports.QueryPositionsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "QueryPositions", data);
        return promise.then((data) => exports.QueryPositionsResponse.decode(minimal_1.default.Reader.create(data)));
    }
    ModuleAccounts(request) {
        const data = exports.QueryModuleAccountsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "ModuleAccounts", data);
        return promise.then((data) => exports.QueryModuleAccountsResponse.decode(minimal_1.default.Reader.create(data)));
    }
    QueryMarkets(request) {
        const data = exports.QueryMarketsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "QueryMarkets", data);
        return promise.then((data) => exports.QueryMarketsResponse.decode(minimal_1.default.Reader.create(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=query.js.map