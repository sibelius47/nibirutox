"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReserveSnapshot = exports.Position = exports.AMM = exports.Market = exports.twapCalcOptionToJSON = exports.twapCalcOptionFromJSON = exports.TwapCalcOption = exports.directionToJSON = exports.directionFromJSON = exports.Direction = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const duration_1 = require("../../../google/protobuf/duration");
exports.protobufPackage = "nibiru.perp.v2";
/**
 * The direction that the user is trading in
 * LONG means the user is going long the base asset (e.g. buy BTC)
 * SHORT means the user is shorting the base asset (e.g. sell BTC)
 */
var Direction;
(function (Direction) {
    Direction[Direction["DIRECTION_UNSPECIFIED"] = 0] = "DIRECTION_UNSPECIFIED";
    Direction[Direction["LONG"] = 1] = "LONG";
    Direction[Direction["SHORT"] = 2] = "SHORT";
    Direction[Direction["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Direction = exports.Direction || (exports.Direction = {}));
function directionFromJSON(object) {
    switch (object) {
        case 0:
        case "DIRECTION_UNSPECIFIED":
            return Direction.DIRECTION_UNSPECIFIED;
        case 1:
        case "LONG":
            return Direction.LONG;
        case 2:
        case "SHORT":
            return Direction.SHORT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Direction.UNRECOGNIZED;
    }
}
exports.directionFromJSON = directionFromJSON;
function directionToJSON(object) {
    switch (object) {
        case Direction.DIRECTION_UNSPECIFIED:
            return "DIRECTION_UNSPECIFIED";
        case Direction.LONG:
            return "LONG";
        case Direction.SHORT:
            return "SHORT";
        case Direction.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.directionToJSON = directionToJSON;
/** Enumerates different options of calculating twap. */
var TwapCalcOption;
(function (TwapCalcOption) {
    TwapCalcOption[TwapCalcOption["TWAP_CALC_OPTION_UNSPECIFIED"] = 0] = "TWAP_CALC_OPTION_UNSPECIFIED";
    /** SPOT - Spot price from quote asset reserve / base asset reserve */
    TwapCalcOption[TwapCalcOption["SPOT"] = 1] = "SPOT";
    /** QUOTE_ASSET_SWAP - Swapping with quote assets, output denominated in base assets */
    TwapCalcOption[TwapCalcOption["QUOTE_ASSET_SWAP"] = 2] = "QUOTE_ASSET_SWAP";
    /** BASE_ASSET_SWAP - Swapping with base assets, output denominated in quote assets */
    TwapCalcOption[TwapCalcOption["BASE_ASSET_SWAP"] = 3] = "BASE_ASSET_SWAP";
    TwapCalcOption[TwapCalcOption["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(TwapCalcOption = exports.TwapCalcOption || (exports.TwapCalcOption = {}));
function twapCalcOptionFromJSON(object) {
    switch (object) {
        case 0:
        case "TWAP_CALC_OPTION_UNSPECIFIED":
            return TwapCalcOption.TWAP_CALC_OPTION_UNSPECIFIED;
        case 1:
        case "SPOT":
            return TwapCalcOption.SPOT;
        case 2:
        case "QUOTE_ASSET_SWAP":
            return TwapCalcOption.QUOTE_ASSET_SWAP;
        case 3:
        case "BASE_ASSET_SWAP":
            return TwapCalcOption.BASE_ASSET_SWAP;
        case -1:
        case "UNRECOGNIZED":
        default:
            return TwapCalcOption.UNRECOGNIZED;
    }
}
exports.twapCalcOptionFromJSON = twapCalcOptionFromJSON;
function twapCalcOptionToJSON(object) {
    switch (object) {
        case TwapCalcOption.TWAP_CALC_OPTION_UNSPECIFIED:
            return "TWAP_CALC_OPTION_UNSPECIFIED";
        case TwapCalcOption.SPOT:
            return "SPOT";
        case TwapCalcOption.QUOTE_ASSET_SWAP:
            return "QUOTE_ASSET_SWAP";
        case TwapCalcOption.BASE_ASSET_SWAP:
            return "BASE_ASSET_SWAP";
        case TwapCalcOption.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.twapCalcOptionToJSON = twapCalcOptionToJSON;
function createBaseMarket() {
    return {
        pair: "",
        enabled: false,
        maintenanceMarginRatio: "",
        maxLeverage: "",
        latestCumulativePremiumFraction: "",
        exchangeFeeRatio: "",
        ecosystemFundFeeRatio: "",
        liquidationFeeRatio: "",
        partialLiquidationRatio: "",
        fundingRateEpochId: "",
        twapLookbackWindow: undefined,
        prepaidBadDebt: undefined,
    };
}
exports.Market = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(10).string(message.pair);
        }
        if (message.enabled === true) {
            writer.uint32(16).bool(message.enabled);
        }
        if (message.maintenanceMarginRatio !== "") {
            writer.uint32(26).string(message.maintenanceMarginRatio);
        }
        if (message.maxLeverage !== "") {
            writer.uint32(34).string(message.maxLeverage);
        }
        if (message.latestCumulativePremiumFraction !== "") {
            writer.uint32(42).string(message.latestCumulativePremiumFraction);
        }
        if (message.exchangeFeeRatio !== "") {
            writer.uint32(50).string(message.exchangeFeeRatio);
        }
        if (message.ecosystemFundFeeRatio !== "") {
            writer.uint32(58).string(message.ecosystemFundFeeRatio);
        }
        if (message.liquidationFeeRatio !== "") {
            writer.uint32(66).string(message.liquidationFeeRatio);
        }
        if (message.partialLiquidationRatio !== "") {
            writer.uint32(74).string(message.partialLiquidationRatio);
        }
        if (message.fundingRateEpochId !== "") {
            writer.uint32(82).string(message.fundingRateEpochId);
        }
        if (message.twapLookbackWindow !== undefined) {
            duration_1.Duration.encode(message.twapLookbackWindow, writer.uint32(90).fork()).ldelim();
        }
        if (message.prepaidBadDebt !== undefined) {
            coin_1.Coin.encode(message.prepaidBadDebt, writer.uint32(98).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMarket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.pair = reader.string();
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.enabled = reader.bool();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.maintenanceMarginRatio = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.maxLeverage = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.latestCumulativePremiumFraction = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.exchangeFeeRatio = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.ecosystemFundFeeRatio = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.liquidationFeeRatio = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.partialLiquidationRatio = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.fundingRateEpochId = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.twapLookbackWindow = duration_1.Duration.decode(reader, reader.uint32());
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.prepaidBadDebt = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
            enabled: isSet(object.enabled) ? Boolean(object.enabled) : false,
            maintenanceMarginRatio: isSet(object.maintenanceMarginRatio)
                ? String(object.maintenanceMarginRatio)
                : "",
            maxLeverage: isSet(object.maxLeverage) ? String(object.maxLeverage) : "",
            latestCumulativePremiumFraction: isSet(object.latestCumulativePremiumFraction)
                ? String(object.latestCumulativePremiumFraction)
                : "",
            exchangeFeeRatio: isSet(object.exchangeFeeRatio)
                ? String(object.exchangeFeeRatio)
                : "",
            ecosystemFundFeeRatio: isSet(object.ecosystemFundFeeRatio)
                ? String(object.ecosystemFundFeeRatio)
                : "",
            liquidationFeeRatio: isSet(object.liquidationFeeRatio)
                ? String(object.liquidationFeeRatio)
                : "",
            partialLiquidationRatio: isSet(object.partialLiquidationRatio)
                ? String(object.partialLiquidationRatio)
                : "",
            fundingRateEpochId: isSet(object.fundingRateEpochId)
                ? String(object.fundingRateEpochId)
                : "",
            twapLookbackWindow: isSet(object.twapLookbackWindow)
                ? duration_1.Duration.fromJSON(object.twapLookbackWindow)
                : undefined,
            prepaidBadDebt: isSet(object.prepaidBadDebt)
                ? coin_1.Coin.fromJSON(object.prepaidBadDebt)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        message.enabled !== undefined && (obj.enabled = message.enabled);
        message.maintenanceMarginRatio !== undefined &&
            (obj.maintenanceMarginRatio = message.maintenanceMarginRatio);
        message.maxLeverage !== undefined && (obj.maxLeverage = message.maxLeverage);
        message.latestCumulativePremiumFraction !== undefined &&
            (obj.latestCumulativePremiumFraction =
                message.latestCumulativePremiumFraction);
        message.exchangeFeeRatio !== undefined &&
            (obj.exchangeFeeRatio = message.exchangeFeeRatio);
        message.ecosystemFundFeeRatio !== undefined &&
            (obj.ecosystemFundFeeRatio = message.ecosystemFundFeeRatio);
        message.liquidationFeeRatio !== undefined &&
            (obj.liquidationFeeRatio = message.liquidationFeeRatio);
        message.partialLiquidationRatio !== undefined &&
            (obj.partialLiquidationRatio = message.partialLiquidationRatio);
        message.fundingRateEpochId !== undefined &&
            (obj.fundingRateEpochId = message.fundingRateEpochId);
        message.twapLookbackWindow !== undefined &&
            (obj.twapLookbackWindow = message.twapLookbackWindow
                ? duration_1.Duration.toJSON(message.twapLookbackWindow)
                : undefined);
        message.prepaidBadDebt !== undefined &&
            (obj.prepaidBadDebt = message.prepaidBadDebt
                ? coin_1.Coin.toJSON(message.prepaidBadDebt)
                : undefined);
        return obj;
    },
    create(base) {
        return exports.Market.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        const message = createBaseMarket();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        message.enabled = (_b = object.enabled) !== null && _b !== void 0 ? _b : false;
        message.maintenanceMarginRatio = (_c = object.maintenanceMarginRatio) !== null && _c !== void 0 ? _c : "";
        message.maxLeverage = (_d = object.maxLeverage) !== null && _d !== void 0 ? _d : "";
        message.latestCumulativePremiumFraction =
            (_e = object.latestCumulativePremiumFraction) !== null && _e !== void 0 ? _e : "";
        message.exchangeFeeRatio = (_f = object.exchangeFeeRatio) !== null && _f !== void 0 ? _f : "";
        message.ecosystemFundFeeRatio = (_g = object.ecosystemFundFeeRatio) !== null && _g !== void 0 ? _g : "";
        message.liquidationFeeRatio = (_h = object.liquidationFeeRatio) !== null && _h !== void 0 ? _h : "";
        message.partialLiquidationRatio = (_j = object.partialLiquidationRatio) !== null && _j !== void 0 ? _j : "";
        message.fundingRateEpochId = (_k = object.fundingRateEpochId) !== null && _k !== void 0 ? _k : "";
        message.twapLookbackWindow =
            object.twapLookbackWindow !== undefined &&
                object.twapLookbackWindow !== null
                ? duration_1.Duration.fromPartial(object.twapLookbackWindow)
                : undefined;
        message.prepaidBadDebt =
            object.prepaidBadDebt !== undefined && object.prepaidBadDebt !== null
                ? coin_1.Coin.fromPartial(object.prepaidBadDebt)
                : undefined;
        return message;
    },
};
function createBaseAMM() {
    return {
        pair: "",
        baseReserve: "",
        quoteReserve: "",
        sqrtDepth: "",
        priceMultiplier: "",
        totalLong: "",
        totalShort: "",
    };
}
exports.AMM = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(10).string(message.pair);
        }
        if (message.baseReserve !== "") {
            writer.uint32(18).string(message.baseReserve);
        }
        if (message.quoteReserve !== "") {
            writer.uint32(26).string(message.quoteReserve);
        }
        if (message.sqrtDepth !== "") {
            writer.uint32(34).string(message.sqrtDepth);
        }
        if (message.priceMultiplier !== "") {
            writer.uint32(42).string(message.priceMultiplier);
        }
        if (message.totalLong !== "") {
            writer.uint32(50).string(message.totalLong);
        }
        if (message.totalShort !== "") {
            writer.uint32(58).string(message.totalShort);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAMM();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.pair = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.baseReserve = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.quoteReserve = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.sqrtDepth = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.priceMultiplier = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.totalLong = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.totalShort = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
            baseReserve: isSet(object.baseReserve) ? String(object.baseReserve) : "",
            quoteReserve: isSet(object.quoteReserve)
                ? String(object.quoteReserve)
                : "",
            sqrtDepth: isSet(object.sqrtDepth) ? String(object.sqrtDepth) : "",
            priceMultiplier: isSet(object.priceMultiplier)
                ? String(object.priceMultiplier)
                : "",
            totalLong: isSet(object.totalLong) ? String(object.totalLong) : "",
            totalShort: isSet(object.totalShort) ? String(object.totalShort) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        message.baseReserve !== undefined && (obj.baseReserve = message.baseReserve);
        message.quoteReserve !== undefined &&
            (obj.quoteReserve = message.quoteReserve);
        message.sqrtDepth !== undefined && (obj.sqrtDepth = message.sqrtDepth);
        message.priceMultiplier !== undefined &&
            (obj.priceMultiplier = message.priceMultiplier);
        message.totalLong !== undefined && (obj.totalLong = message.totalLong);
        message.totalShort !== undefined && (obj.totalShort = message.totalShort);
        return obj;
    },
    create(base) {
        return exports.AMM.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = createBaseAMM();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        message.baseReserve = (_b = object.baseReserve) !== null && _b !== void 0 ? _b : "";
        message.quoteReserve = (_c = object.quoteReserve) !== null && _c !== void 0 ? _c : "";
        message.sqrtDepth = (_d = object.sqrtDepth) !== null && _d !== void 0 ? _d : "";
        message.priceMultiplier = (_e = object.priceMultiplier) !== null && _e !== void 0 ? _e : "";
        message.totalLong = (_f = object.totalLong) !== null && _f !== void 0 ? _f : "";
        message.totalShort = (_g = object.totalShort) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBasePosition() {
    return {
        traderAddress: "",
        pair: "",
        size: "",
        margin: "",
        openNotional: "",
        latestCumulativePremiumFraction: "",
        lastUpdatedBlockNumber: long_1.default.ZERO,
    };
}
exports.Position = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.traderAddress !== "") {
            writer.uint32(10).string(message.traderAddress);
        }
        if (message.pair !== "") {
            writer.uint32(18).string(message.pair);
        }
        if (message.size !== "") {
            writer.uint32(26).string(message.size);
        }
        if (message.margin !== "") {
            writer.uint32(34).string(message.margin);
        }
        if (message.openNotional !== "") {
            writer.uint32(42).string(message.openNotional);
        }
        if (message.latestCumulativePremiumFraction !== "") {
            writer.uint32(50).string(message.latestCumulativePremiumFraction);
        }
        if (!message.lastUpdatedBlockNumber.isZero()) {
            writer.uint32(56).int64(message.lastUpdatedBlockNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePosition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.traderAddress = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.pair = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.size = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.margin = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.openNotional = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.latestCumulativePremiumFraction = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.lastUpdatedBlockNumber = reader.int64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            traderAddress: isSet(object.traderAddress)
                ? String(object.traderAddress)
                : "",
            pair: isSet(object.pair) ? String(object.pair) : "",
            size: isSet(object.size) ? String(object.size) : "",
            margin: isSet(object.margin) ? String(object.margin) : "",
            openNotional: isSet(object.openNotional)
                ? String(object.openNotional)
                : "",
            latestCumulativePremiumFraction: isSet(object.latestCumulativePremiumFraction)
                ? String(object.latestCumulativePremiumFraction)
                : "",
            lastUpdatedBlockNumber: isSet(object.lastUpdatedBlockNumber)
                ? long_1.default.fromValue(object.lastUpdatedBlockNumber)
                : long_1.default.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.traderAddress !== undefined &&
            (obj.traderAddress = message.traderAddress);
        message.pair !== undefined && (obj.pair = message.pair);
        message.size !== undefined && (obj.size = message.size);
        message.margin !== undefined && (obj.margin = message.margin);
        message.openNotional !== undefined &&
            (obj.openNotional = message.openNotional);
        message.latestCumulativePremiumFraction !== undefined &&
            (obj.latestCumulativePremiumFraction =
                message.latestCumulativePremiumFraction);
        message.lastUpdatedBlockNumber !== undefined &&
            (obj.lastUpdatedBlockNumber = (message.lastUpdatedBlockNumber || long_1.default.ZERO).toString());
        return obj;
    },
    create(base) {
        return exports.Position.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e, _f;
        const message = createBasePosition();
        message.traderAddress = (_a = object.traderAddress) !== null && _a !== void 0 ? _a : "";
        message.pair = (_b = object.pair) !== null && _b !== void 0 ? _b : "";
        message.size = (_c = object.size) !== null && _c !== void 0 ? _c : "";
        message.margin = (_d = object.margin) !== null && _d !== void 0 ? _d : "";
        message.openNotional = (_e = object.openNotional) !== null && _e !== void 0 ? _e : "";
        message.latestCumulativePremiumFraction =
            (_f = object.latestCumulativePremiumFraction) !== null && _f !== void 0 ? _f : "";
        message.lastUpdatedBlockNumber =
            object.lastUpdatedBlockNumber !== undefined &&
                object.lastUpdatedBlockNumber !== null
                ? long_1.default.fromValue(object.lastUpdatedBlockNumber)
                : long_1.default.ZERO;
        return message;
    },
};
function createBaseReserveSnapshot() {
    return { amm: undefined, timestampMs: long_1.default.ZERO };
}
exports.ReserveSnapshot = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.amm !== undefined) {
            exports.AMM.encode(message.amm, writer.uint32(10).fork()).ldelim();
        }
        if (!message.timestampMs.isZero()) {
            writer.uint32(16).int64(message.timestampMs);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReserveSnapshot();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.amm = exports.AMM.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 16) {
                        break;
                    }
                    message.timestampMs = reader.int64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            amm: isSet(object.amm) ? exports.AMM.fromJSON(object.amm) : undefined,
            timestampMs: isSet(object.timestampMs)
                ? long_1.default.fromValue(object.timestampMs)
                : long_1.default.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.amm !== undefined &&
            (obj.amm = message.amm ? exports.AMM.toJSON(message.amm) : undefined);
        message.timestampMs !== undefined &&
            (obj.timestampMs = (message.timestampMs || long_1.default.ZERO).toString());
        return obj;
    },
    create(base) {
        return exports.ReserveSnapshot.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseReserveSnapshot();
        message.amm =
            object.amm !== undefined && object.amm !== null
                ? exports.AMM.fromPartial(object.amm)
                : undefined;
        message.timestampMs =
            object.timestampMs !== undefined && object.timestampMs !== null
                ? long_1.default.fromValue(object.timestampMs)
                : long_1.default.ZERO;
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=state.js.map