import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Duration } from "../../../google/protobuf/duration";
export declare const protobufPackage = "nibiru.perp.v2";
/**
 * The direction that the user is trading in
 * LONG means the user is going long the base asset (e.g. buy BTC)
 * SHORT means the user is shorting the base asset (e.g. sell BTC)
 */
export declare enum Direction {
    DIRECTION_UNSPECIFIED = 0,
    LONG = 1,
    SHORT = 2,
    UNRECOGNIZED = -1
}
export declare function directionFromJSON(object: any): Direction;
export declare function directionToJSON(object: Direction): string;
/** Enumerates different options of calculating twap. */
export declare enum TwapCalcOption {
    TWAP_CALC_OPTION_UNSPECIFIED = 0,
    /** SPOT - Spot price from quote asset reserve / base asset reserve */
    SPOT = 1,
    /** QUOTE_ASSET_SWAP - Swapping with quote assets, output denominated in base assets */
    QUOTE_ASSET_SWAP = 2,
    /** BASE_ASSET_SWAP - Swapping with base assets, output denominated in quote assets */
    BASE_ASSET_SWAP = 3,
    UNRECOGNIZED = -1
}
export declare function twapCalcOptionFromJSON(object: any): TwapCalcOption;
export declare function twapCalcOptionToJSON(object: TwapCalcOption): string;
export interface Market {
    /**
     * the trading pair represented by this market
     * always BASE:QUOTE, e.g. BTC:NUSD or ETH:NUSD
     */
    pair: string;
    /** whether or not the market is enabled */
    enabled: boolean;
    /** the minimum margin ratio which a user must maintain on this market */
    maintenanceMarginRatio: string;
    /** the maximum leverage a user is able to be taken on this market */
    maxLeverage: string;
    /**
     * Latest cumulative premium fraction for a given pair.
     * Calculated once per funding rate interval.
     * A premium fraction is the difference between mark and index, divided by the
     * number of payments per day. (mark - index) / # payments in a day
     */
    latestCumulativePremiumFraction: string;
    /** the percentage of the notional given to the exchange when trading */
    exchangeFeeRatio: string;
    /**
     * the percentage of the notional transferred to the ecosystem fund when
     * trading
     */
    ecosystemFundFeeRatio: string;
    /**
     * the percentage of liquidated position that will be
     * given to out as a reward. Half of the liquidation fee is given to the
     * liquidator, and the other half is given to the ecosystem fund.
     */
    liquidationFeeRatio: string;
    /**
     * the portion of the position size we try to liquidate if the available
     * margin is higher than liquidation fee
     */
    partialLiquidationRatio: string;
    /** specifies the interval on which the funding rate is updated */
    fundingRateEpochId: string;
    /** amount of time to look back for TWAP calculations */
    twapLookbackWindow?: Duration;
    /** the amount of collateral already credited from the ecosystem fund */
    prepaidBadDebt?: Coin;
}
export interface AMM {
    /** identifies the market this AMM belongs to */
    pair: string;
    /** the amount of base reserves this AMM has */
    baseReserve: string;
    /** the amount of quote reserves this AMM has */
    quoteReserve: string;
    /** sqrt(k) */
    sqrtDepth: string;
    /** the price multiplier of the dynamic AMM */
    priceMultiplier: string;
    /** Total long refers to the sum of long open notional in base. */
    totalLong: string;
    /** Total short refers to the sum of short open notional in base. */
    totalShort: string;
}
export interface Position {
    /** address identifies the address owner of this position */
    traderAddress: string;
    /** pair identifies the pair associated with this position */
    pair: string;
    /** the position size */
    size: string;
    /** amount of margin remaining in the position */
    margin: string;
    /** value of position in quote assets when opened */
    openNotional: string;
    /**
     * The most recent cumulative premium fraction this position has.
     * Used to calculate the next funding payment.
     */
    latestCumulativePremiumFraction: string;
    /** last block number this position was updated */
    lastUpdatedBlockNumber: Long;
}
/** a snapshot of the perp.amm's reserves at a given point in time */
export interface ReserveSnapshot {
    amm?: AMM;
    /** milliseconds since unix epoch */
    timestampMs: Long;
}
export declare const Market: {
    encode(message: Market, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Market;
    fromJSON(object: any): Market;
    toJSON(message: Market): unknown;
    create<I extends {
        pair?: string | undefined;
        enabled?: boolean | undefined;
        maintenanceMarginRatio?: string | undefined;
        maxLeverage?: string | undefined;
        latestCumulativePremiumFraction?: string | undefined;
        exchangeFeeRatio?: string | undefined;
        ecosystemFundFeeRatio?: string | undefined;
        liquidationFeeRatio?: string | undefined;
        partialLiquidationRatio?: string | undefined;
        fundingRateEpochId?: string | undefined;
        twapLookbackWindow?: {
            seconds?: string | number | Long.Long | undefined;
            nanos?: number | undefined;
        } | undefined;
        prepaidBadDebt?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        pair?: string | undefined;
        enabled?: boolean | undefined;
        maintenanceMarginRatio?: string | undefined;
        maxLeverage?: string | undefined;
        latestCumulativePremiumFraction?: string | undefined;
        exchangeFeeRatio?: string | undefined;
        ecosystemFundFeeRatio?: string | undefined;
        liquidationFeeRatio?: string | undefined;
        partialLiquidationRatio?: string | undefined;
        fundingRateEpochId?: string | undefined;
        twapLookbackWindow?: ({
            seconds?: string | number | Long.Long | undefined;
            nanos?: number | undefined;
        } & {
            seconds?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K in Exclude<keyof I["twapLookbackWindow"]["seconds"], keyof Long.Long>]: never; }) | undefined;
            nanos?: number | undefined;
        } & { [K_1 in Exclude<keyof I["twapLookbackWindow"], keyof Duration>]: never; }) | undefined;
        prepaidBadDebt?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_2 in Exclude<keyof I["prepaidBadDebt"], keyof Coin>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I, keyof Market>]: never; }>(base?: I | undefined): Market;
    fromPartial<I_1 extends {
        pair?: string | undefined;
        enabled?: boolean | undefined;
        maintenanceMarginRatio?: string | undefined;
        maxLeverage?: string | undefined;
        latestCumulativePremiumFraction?: string | undefined;
        exchangeFeeRatio?: string | undefined;
        ecosystemFundFeeRatio?: string | undefined;
        liquidationFeeRatio?: string | undefined;
        partialLiquidationRatio?: string | undefined;
        fundingRateEpochId?: string | undefined;
        twapLookbackWindow?: {
            seconds?: string | number | Long.Long | undefined;
            nanos?: number | undefined;
        } | undefined;
        prepaidBadDebt?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        pair?: string | undefined;
        enabled?: boolean | undefined;
        maintenanceMarginRatio?: string | undefined;
        maxLeverage?: string | undefined;
        latestCumulativePremiumFraction?: string | undefined;
        exchangeFeeRatio?: string | undefined;
        ecosystemFundFeeRatio?: string | undefined;
        liquidationFeeRatio?: string | undefined;
        partialLiquidationRatio?: string | undefined;
        fundingRateEpochId?: string | undefined;
        twapLookbackWindow?: ({
            seconds?: string | number | Long.Long | undefined;
            nanos?: number | undefined;
        } & {
            seconds?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K_4 in Exclude<keyof I_1["twapLookbackWindow"]["seconds"], keyof Long.Long>]: never; }) | undefined;
            nanos?: number | undefined;
        } & { [K_5 in Exclude<keyof I_1["twapLookbackWindow"], keyof Duration>]: never; }) | undefined;
        prepaidBadDebt?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_6 in Exclude<keyof I_1["prepaidBadDebt"], keyof Coin>]: never; }) | undefined;
    } & { [K_7 in Exclude<keyof I_1, keyof Market>]: never; }>(object: I_1): Market;
};
export declare const AMM: {
    encode(message: AMM, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AMM;
    fromJSON(object: any): AMM;
    toJSON(message: AMM): unknown;
    create<I extends {
        pair?: string | undefined;
        baseReserve?: string | undefined;
        quoteReserve?: string | undefined;
        sqrtDepth?: string | undefined;
        priceMultiplier?: string | undefined;
        totalLong?: string | undefined;
        totalShort?: string | undefined;
    } & {
        pair?: string | undefined;
        baseReserve?: string | undefined;
        quoteReserve?: string | undefined;
        sqrtDepth?: string | undefined;
        priceMultiplier?: string | undefined;
        totalLong?: string | undefined;
        totalShort?: string | undefined;
    } & { [K in Exclude<keyof I, keyof AMM>]: never; }>(base?: I | undefined): AMM;
    fromPartial<I_1 extends {
        pair?: string | undefined;
        baseReserve?: string | undefined;
        quoteReserve?: string | undefined;
        sqrtDepth?: string | undefined;
        priceMultiplier?: string | undefined;
        totalLong?: string | undefined;
        totalShort?: string | undefined;
    } & {
        pair?: string | undefined;
        baseReserve?: string | undefined;
        quoteReserve?: string | undefined;
        sqrtDepth?: string | undefined;
        priceMultiplier?: string | undefined;
        totalLong?: string | undefined;
        totalShort?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof AMM>]: never; }>(object: I_1): AMM;
};
export declare const Position: {
    encode(message: Position, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Position;
    fromJSON(object: any): Position;
    toJSON(message: Position): unknown;
    create<I extends {
        traderAddress?: string | undefined;
        pair?: string | undefined;
        size?: string | undefined;
        margin?: string | undefined;
        openNotional?: string | undefined;
        latestCumulativePremiumFraction?: string | undefined;
        lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
    } & {
        traderAddress?: string | undefined;
        pair?: string | undefined;
        size?: string | undefined;
        margin?: string | undefined;
        openNotional?: string | undefined;
        latestCumulativePremiumFraction?: string | undefined;
        lastUpdatedBlockNumber?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & { [K in Exclude<keyof I["lastUpdatedBlockNumber"], keyof Long.Long>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof Position>]: never; }>(base?: I | undefined): Position;
    fromPartial<I_1 extends {
        traderAddress?: string | undefined;
        pair?: string | undefined;
        size?: string | undefined;
        margin?: string | undefined;
        openNotional?: string | undefined;
        latestCumulativePremiumFraction?: string | undefined;
        lastUpdatedBlockNumber?: string | number | Long.Long | undefined;
    } & {
        traderAddress?: string | undefined;
        pair?: string | undefined;
        size?: string | undefined;
        margin?: string | undefined;
        openNotional?: string | undefined;
        latestCumulativePremiumFraction?: string | undefined;
        lastUpdatedBlockNumber?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & { [K_2 in Exclude<keyof I_1["lastUpdatedBlockNumber"], keyof Long.Long>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof Position>]: never; }>(object: I_1): Position;
};
export declare const ReserveSnapshot: {
    encode(message: ReserveSnapshot, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ReserveSnapshot;
    fromJSON(object: any): ReserveSnapshot;
    toJSON(message: ReserveSnapshot): unknown;
    create<I extends {
        amm?: {
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        } | undefined;
        timestampMs?: string | number | Long.Long | undefined;
    } & {
        amm?: ({
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        } & {
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        } & { [K in Exclude<keyof I["amm"], keyof AMM>]: never; }) | undefined;
        timestampMs?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & { [K_1 in Exclude<keyof I["timestampMs"], keyof Long.Long>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, keyof ReserveSnapshot>]: never; }>(base?: I | undefined): ReserveSnapshot;
    fromPartial<I_1 extends {
        amm?: {
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        } | undefined;
        timestampMs?: string | number | Long.Long | undefined;
    } & {
        amm?: ({
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        } & {
            pair?: string | undefined;
            baseReserve?: string | undefined;
            quoteReserve?: string | undefined;
            sqrtDepth?: string | undefined;
            priceMultiplier?: string | undefined;
            totalLong?: string | undefined;
            totalShort?: string | undefined;
        } & { [K_3 in Exclude<keyof I_1["amm"], keyof AMM>]: never; }) | undefined;
        timestampMs?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & { [K_4 in Exclude<keyof I_1["timestampMs"], keyof Long.Long>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, keyof ReserveSnapshot>]: never; }>(object: I_1): ReserveSnapshot;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
//# sourceMappingURL=state.d.ts.map