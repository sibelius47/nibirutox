"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MarketUpdatedEvent = exports.AmmUpdatedEvent = exports.LiquidationFailedEvent = exports.FundingRateChangedEvent = exports.PositionSettledEvent = exports.PositionLiquidatedEvent = exports.PositionChangedEvent = exports.liquidationFailedEvent_LiquidationFailedReasonToJSON = exports.liquidationFailedEvent_LiquidationFailedReasonFromJSON = exports.LiquidationFailedEvent_LiquidationFailedReason = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const state_1 = require("./state");
exports.protobufPackage = "nibiru.perp.v2";
var LiquidationFailedEvent_LiquidationFailedReason;
(function (LiquidationFailedEvent_LiquidationFailedReason) {
    LiquidationFailedEvent_LiquidationFailedReason[LiquidationFailedEvent_LiquidationFailedReason["UNSPECIFIED"] = 0] = "UNSPECIFIED";
    /** POSITION_HEALTHY - the position is healthy and does not need to be liquidated. */
    LiquidationFailedEvent_LiquidationFailedReason[LiquidationFailedEvent_LiquidationFailedReason["POSITION_HEALTHY"] = 1] = "POSITION_HEALTHY";
    /** NONEXISTENT_PAIR - the pair does not exist. */
    LiquidationFailedEvent_LiquidationFailedReason[LiquidationFailedEvent_LiquidationFailedReason["NONEXISTENT_PAIR"] = 2] = "NONEXISTENT_PAIR";
    /** NONEXISTENT_POSITION - the position does not exist. */
    LiquidationFailedEvent_LiquidationFailedReason[LiquidationFailedEvent_LiquidationFailedReason["NONEXISTENT_POSITION"] = 3] = "NONEXISTENT_POSITION";
    LiquidationFailedEvent_LiquidationFailedReason[LiquidationFailedEvent_LiquidationFailedReason["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LiquidationFailedEvent_LiquidationFailedReason = exports.LiquidationFailedEvent_LiquidationFailedReason || (exports.LiquidationFailedEvent_LiquidationFailedReason = {}));
function liquidationFailedEvent_LiquidationFailedReasonFromJSON(object) {
    switch (object) {
        case 0:
        case "UNSPECIFIED":
            return LiquidationFailedEvent_LiquidationFailedReason.UNSPECIFIED;
        case 1:
        case "POSITION_HEALTHY":
            return LiquidationFailedEvent_LiquidationFailedReason.POSITION_HEALTHY;
        case 2:
        case "NONEXISTENT_PAIR":
            return LiquidationFailedEvent_LiquidationFailedReason.NONEXISTENT_PAIR;
        case 3:
        case "NONEXISTENT_POSITION":
            return LiquidationFailedEvent_LiquidationFailedReason.NONEXISTENT_POSITION;
        case -1:
        case "UNRECOGNIZED":
        default:
            return LiquidationFailedEvent_LiquidationFailedReason.UNRECOGNIZED;
    }
}
exports.liquidationFailedEvent_LiquidationFailedReasonFromJSON = liquidationFailedEvent_LiquidationFailedReasonFromJSON;
function liquidationFailedEvent_LiquidationFailedReasonToJSON(object) {
    switch (object) {
        case LiquidationFailedEvent_LiquidationFailedReason.UNSPECIFIED:
            return "UNSPECIFIED";
        case LiquidationFailedEvent_LiquidationFailedReason.POSITION_HEALTHY:
            return "POSITION_HEALTHY";
        case LiquidationFailedEvent_LiquidationFailedReason.NONEXISTENT_PAIR:
            return "NONEXISTENT_PAIR";
        case LiquidationFailedEvent_LiquidationFailedReason.NONEXISTENT_POSITION:
            return "NONEXISTENT_POSITION";
        case LiquidationFailedEvent_LiquidationFailedReason.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.liquidationFailedEvent_LiquidationFailedReasonToJSON = liquidationFailedEvent_LiquidationFailedReasonToJSON;
function createBasePositionChangedEvent() {
    return {
        finalPosition: undefined,
        positionNotional: "",
        transactionFee: undefined,
        realizedPnl: "",
        badDebt: undefined,
        fundingPayment: "",
        blockHeight: long_1.default.ZERO,
        marginToUser: "",
        changeReason: "",
    };
}
exports.PositionChangedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.finalPosition !== undefined) {
            state_1.Position.encode(message.finalPosition, writer.uint32(10).fork()).ldelim();
        }
        if (message.positionNotional !== "") {
            writer.uint32(18).string(message.positionNotional);
        }
        if (message.transactionFee !== undefined) {
            coin_1.Coin.encode(message.transactionFee, writer.uint32(26).fork()).ldelim();
        }
        if (message.realizedPnl !== "") {
            writer.uint32(34).string(message.realizedPnl);
        }
        if (message.badDebt !== undefined) {
            coin_1.Coin.encode(message.badDebt, writer.uint32(42).fork()).ldelim();
        }
        if (message.fundingPayment !== "") {
            writer.uint32(50).string(message.fundingPayment);
        }
        if (!message.blockHeight.isZero()) {
            writer.uint32(56).int64(message.blockHeight);
        }
        if (message.marginToUser !== "") {
            writer.uint32(66).string(message.marginToUser);
        }
        if (message.changeReason !== "") {
            writer.uint32(74).string(message.changeReason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePositionChangedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.finalPosition = state_1.Position.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.positionNotional = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.transactionFee = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.realizedPnl = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.badDebt = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.fundingPayment = reader.string();
                    continue;
                case 7:
                    if (tag !== 56) {
                        break;
                    }
                    message.blockHeight = reader.int64();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.marginToUser = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.changeReason = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            finalPosition: isSet(object.finalPosition)
                ? state_1.Position.fromJSON(object.finalPosition)
                : undefined,
            positionNotional: isSet(object.positionNotional)
                ? String(object.positionNotional)
                : "",
            transactionFee: isSet(object.transactionFee)
                ? coin_1.Coin.fromJSON(object.transactionFee)
                : undefined,
            realizedPnl: isSet(object.realizedPnl) ? String(object.realizedPnl) : "",
            badDebt: isSet(object.badDebt)
                ? coin_1.Coin.fromJSON(object.badDebt)
                : undefined,
            fundingPayment: isSet(object.fundingPayment)
                ? String(object.fundingPayment)
                : "",
            blockHeight: isSet(object.blockHeight)
                ? long_1.default.fromValue(object.blockHeight)
                : long_1.default.ZERO,
            marginToUser: isSet(object.marginToUser)
                ? String(object.marginToUser)
                : "",
            changeReason: isSet(object.changeReason)
                ? String(object.changeReason)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.finalPosition !== undefined &&
            (obj.finalPosition = message.finalPosition
                ? state_1.Position.toJSON(message.finalPosition)
                : undefined);
        message.positionNotional !== undefined &&
            (obj.positionNotional = message.positionNotional);
        message.transactionFee !== undefined &&
            (obj.transactionFee = message.transactionFee
                ? coin_1.Coin.toJSON(message.transactionFee)
                : undefined);
        message.realizedPnl !== undefined && (obj.realizedPnl = message.realizedPnl);
        message.badDebt !== undefined &&
            (obj.badDebt = message.badDebt ? coin_1.Coin.toJSON(message.badDebt) : undefined);
        message.fundingPayment !== undefined &&
            (obj.fundingPayment = message.fundingPayment);
        message.blockHeight !== undefined &&
            (obj.blockHeight = (message.blockHeight || long_1.default.ZERO).toString());
        message.marginToUser !== undefined &&
            (obj.marginToUser = message.marginToUser);
        message.changeReason !== undefined &&
            (obj.changeReason = message.changeReason);
        return obj;
    },
    create(base) {
        return exports.PositionChangedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBasePositionChangedEvent();
        message.finalPosition =
            object.finalPosition !== undefined && object.finalPosition !== null
                ? state_1.Position.fromPartial(object.finalPosition)
                : undefined;
        message.positionNotional = (_a = object.positionNotional) !== null && _a !== void 0 ? _a : "";
        message.transactionFee =
            object.transactionFee !== undefined && object.transactionFee !== null
                ? coin_1.Coin.fromPartial(object.transactionFee)
                : undefined;
        message.realizedPnl = (_b = object.realizedPnl) !== null && _b !== void 0 ? _b : "";
        message.badDebt =
            object.badDebt !== undefined && object.badDebt !== null
                ? coin_1.Coin.fromPartial(object.badDebt)
                : undefined;
        message.fundingPayment = (_c = object.fundingPayment) !== null && _c !== void 0 ? _c : "";
        message.blockHeight =
            object.blockHeight !== undefined && object.blockHeight !== null
                ? long_1.default.fromValue(object.blockHeight)
                : long_1.default.ZERO;
        message.marginToUser = (_d = object.marginToUser) !== null && _d !== void 0 ? _d : "";
        message.changeReason = (_e = object.changeReason) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBasePositionLiquidatedEvent() {
    return {
        positionChangedEvent: undefined,
        liquidatorAddress: "",
        feeToLiquidator: undefined,
        feeToEcosystemFund: undefined,
    };
}
exports.PositionLiquidatedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.positionChangedEvent !== undefined) {
            exports.PositionChangedEvent.encode(message.positionChangedEvent, writer.uint32(10).fork()).ldelim();
        }
        if (message.liquidatorAddress !== "") {
            writer.uint32(18).string(message.liquidatorAddress);
        }
        if (message.feeToLiquidator !== undefined) {
            coin_1.Coin.encode(message.feeToLiquidator, writer.uint32(26).fork()).ldelim();
        }
        if (message.feeToEcosystemFund !== undefined) {
            coin_1.Coin.encode(message.feeToEcosystemFund, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePositionLiquidatedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.positionChangedEvent = exports.PositionChangedEvent.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.liquidatorAddress = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.feeToLiquidator = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.feeToEcosystemFund = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            positionChangedEvent: isSet(object.positionChangedEvent)
                ? exports.PositionChangedEvent.fromJSON(object.positionChangedEvent)
                : undefined,
            liquidatorAddress: isSet(object.liquidatorAddress)
                ? String(object.liquidatorAddress)
                : "",
            feeToLiquidator: isSet(object.feeToLiquidator)
                ? coin_1.Coin.fromJSON(object.feeToLiquidator)
                : undefined,
            feeToEcosystemFund: isSet(object.feeToEcosystemFund)
                ? coin_1.Coin.fromJSON(object.feeToEcosystemFund)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.positionChangedEvent !== undefined &&
            (obj.positionChangedEvent = message.positionChangedEvent
                ? exports.PositionChangedEvent.toJSON(message.positionChangedEvent)
                : undefined);
        message.liquidatorAddress !== undefined &&
            (obj.liquidatorAddress = message.liquidatorAddress);
        message.feeToLiquidator !== undefined &&
            (obj.feeToLiquidator = message.feeToLiquidator
                ? coin_1.Coin.toJSON(message.feeToLiquidator)
                : undefined);
        message.feeToEcosystemFund !== undefined &&
            (obj.feeToEcosystemFund = message.feeToEcosystemFund
                ? coin_1.Coin.toJSON(message.feeToEcosystemFund)
                : undefined);
        return obj;
    },
    create(base) {
        return exports.PositionLiquidatedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBasePositionLiquidatedEvent();
        message.positionChangedEvent =
            object.positionChangedEvent !== undefined &&
                object.positionChangedEvent !== null
                ? exports.PositionChangedEvent.fromPartial(object.positionChangedEvent)
                : undefined;
        message.liquidatorAddress = (_a = object.liquidatorAddress) !== null && _a !== void 0 ? _a : "";
        message.feeToLiquidator =
            object.feeToLiquidator !== undefined && object.feeToLiquidator !== null
                ? coin_1.Coin.fromPartial(object.feeToLiquidator)
                : undefined;
        message.feeToEcosystemFund =
            object.feeToEcosystemFund !== undefined &&
                object.feeToEcosystemFund !== null
                ? coin_1.Coin.fromPartial(object.feeToEcosystemFund)
                : undefined;
        return message;
    },
};
function createBasePositionSettledEvent() {
    return { pair: "", traderAddress: "", settledCoins: [] };
}
exports.PositionSettledEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(10).string(message.pair);
        }
        if (message.traderAddress !== "") {
            writer.uint32(18).string(message.traderAddress);
        }
        for (const v of message.settledCoins) {
            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePositionSettledEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.pair = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.traderAddress = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.settledCoins.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
            traderAddress: isSet(object.traderAddress)
                ? String(object.traderAddress)
                : "",
            settledCoins: Array.isArray(object === null || object === void 0 ? void 0 : object.settledCoins)
                ? object.settledCoins.map((e) => coin_1.Coin.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        message.traderAddress !== undefined &&
            (obj.traderAddress = message.traderAddress);
        if (message.settledCoins) {
            obj.settledCoins = message.settledCoins.map((e) => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.settledCoins = [];
        }
        return obj;
    },
    create(base) {
        return exports.PositionSettledEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBasePositionSettledEvent();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        message.traderAddress = (_b = object.traderAddress) !== null && _b !== void 0 ? _b : "";
        message.settledCoins =
            ((_c = object.settledCoins) === null || _c === void 0 ? void 0 : _c.map((e) => coin_1.Coin.fromPartial(e))) || [];
        return message;
    },
};
function createBaseFundingRateChangedEvent() {
    return {
        pair: "",
        markPriceTwap: "",
        indexPriceTwap: "",
        premiumFraction: "",
        cumulativePremiumFraction: "",
    };
}
exports.FundingRateChangedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(10).string(message.pair);
        }
        if (message.markPriceTwap !== "") {
            writer.uint32(18).string(message.markPriceTwap);
        }
        if (message.indexPriceTwap !== "") {
            writer.uint32(26).string(message.indexPriceTwap);
        }
        if (message.premiumFraction !== "") {
            writer.uint32(42).string(message.premiumFraction);
        }
        if (message.cumulativePremiumFraction !== "") {
            writer.uint32(50).string(message.cumulativePremiumFraction);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFundingRateChangedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.pair = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.markPriceTwap = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.indexPriceTwap = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.premiumFraction = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.cumulativePremiumFraction = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
            markPriceTwap: isSet(object.markPriceTwap)
                ? String(object.markPriceTwap)
                : "",
            indexPriceTwap: isSet(object.indexPriceTwap)
                ? String(object.indexPriceTwap)
                : "",
            premiumFraction: isSet(object.premiumFraction)
                ? String(object.premiumFraction)
                : "",
            cumulativePremiumFraction: isSet(object.cumulativePremiumFraction)
                ? String(object.cumulativePremiumFraction)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        message.markPriceTwap !== undefined &&
            (obj.markPriceTwap = message.markPriceTwap);
        message.indexPriceTwap !== undefined &&
            (obj.indexPriceTwap = message.indexPriceTwap);
        message.premiumFraction !== undefined &&
            (obj.premiumFraction = message.premiumFraction);
        message.cumulativePremiumFraction !== undefined &&
            (obj.cumulativePremiumFraction = message.cumulativePremiumFraction);
        return obj;
    },
    create(base) {
        return exports.FundingRateChangedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d, _e;
        const message = createBaseFundingRateChangedEvent();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        message.markPriceTwap = (_b = object.markPriceTwap) !== null && _b !== void 0 ? _b : "";
        message.indexPriceTwap = (_c = object.indexPriceTwap) !== null && _c !== void 0 ? _c : "";
        message.premiumFraction = (_d = object.premiumFraction) !== null && _d !== void 0 ? _d : "";
        message.cumulativePremiumFraction = (_e = object.cumulativePremiumFraction) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseLiquidationFailedEvent() {
    return { pair: "", trader: "", liquidator: "", reason: 0 };
}
exports.LiquidationFailedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(10).string(message.pair);
        }
        if (message.trader !== "") {
            writer.uint32(18).string(message.trader);
        }
        if (message.liquidator !== "") {
            writer.uint32(26).string(message.liquidator);
        }
        if (message.reason !== 0) {
            writer.uint32(32).int32(message.reason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLiquidationFailedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.pair = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.trader = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.liquidator = reader.string();
                    continue;
                case 4:
                    if (tag !== 32) {
                        break;
                    }
                    message.reason = reader.int32();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
            trader: isSet(object.trader) ? String(object.trader) : "",
            liquidator: isSet(object.liquidator) ? String(object.liquidator) : "",
            reason: isSet(object.reason)
                ? liquidationFailedEvent_LiquidationFailedReasonFromJSON(object.reason)
                : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        message.trader !== undefined && (obj.trader = message.trader);
        message.liquidator !== undefined && (obj.liquidator = message.liquidator);
        message.reason !== undefined &&
            (obj.reason = liquidationFailedEvent_LiquidationFailedReasonToJSON(message.reason));
        return obj;
    },
    create(base) {
        return exports.LiquidationFailedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseLiquidationFailedEvent();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        message.trader = (_b = object.trader) !== null && _b !== void 0 ? _b : "";
        message.liquidator = (_c = object.liquidator) !== null && _c !== void 0 ? _c : "";
        message.reason = (_d = object.reason) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseAmmUpdatedEvent() {
    return { finalAmm: undefined, markPriceTwap: "", indexPriceTwap: "" };
}
exports.AmmUpdatedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.finalAmm !== undefined) {
            state_1.AMM.encode(message.finalAmm, writer.uint32(10).fork()).ldelim();
        }
        if (message.markPriceTwap !== "") {
            writer.uint32(18).string(message.markPriceTwap);
        }
        if (message.indexPriceTwap !== "") {
            writer.uint32(26).string(message.indexPriceTwap);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAmmUpdatedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.finalAmm = state_1.AMM.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.markPriceTwap = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.indexPriceTwap = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            finalAmm: isSet(object.finalAmm)
                ? state_1.AMM.fromJSON(object.finalAmm)
                : undefined,
            markPriceTwap: isSet(object.markPriceTwap)
                ? String(object.markPriceTwap)
                : "",
            indexPriceTwap: isSet(object.indexPriceTwap)
                ? String(object.indexPriceTwap)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.finalAmm !== undefined &&
            (obj.finalAmm = message.finalAmm
                ? state_1.AMM.toJSON(message.finalAmm)
                : undefined);
        message.markPriceTwap !== undefined &&
            (obj.markPriceTwap = message.markPriceTwap);
        message.indexPriceTwap !== undefined &&
            (obj.indexPriceTwap = message.indexPriceTwap);
        return obj;
    },
    create(base) {
        return exports.AmmUpdatedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseAmmUpdatedEvent();
        message.finalAmm =
            object.finalAmm !== undefined && object.finalAmm !== null
                ? state_1.AMM.fromPartial(object.finalAmm)
                : undefined;
        message.markPriceTwap = (_a = object.markPriceTwap) !== null && _a !== void 0 ? _a : "";
        message.indexPriceTwap = (_b = object.indexPriceTwap) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMarketUpdatedEvent() {
    return { finalMarket: undefined };
}
exports.MarketUpdatedEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.finalMarket !== undefined) {
            state_1.Market.encode(message.finalMarket, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMarketUpdatedEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.finalMarket = state_1.Market.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            finalMarket: isSet(object.finalMarket)
                ? state_1.Market.fromJSON(object.finalMarket)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.finalMarket !== undefined &&
            (obj.finalMarket = message.finalMarket
                ? state_1.Market.toJSON(message.finalMarket)
                : undefined);
        return obj;
    },
    create(base) {
        return exports.MarketUpdatedEvent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseMarketUpdatedEvent();
        message.finalMarket =
            object.finalMarket !== undefined && object.finalMarket !== null
                ? state_1.Market.fromPartial(object.finalMarket)
                : undefined;
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=event.js.map