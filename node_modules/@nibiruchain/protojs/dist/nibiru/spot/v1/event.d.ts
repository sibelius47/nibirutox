import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Pool } from "./pool";
export declare const protobufPackage = "nibiru.spot.v1";
export interface EventPoolCreated {
    /** the address of the user who created the pool */
    creator: string;
    /** the create pool fee */
    fees: Coin[];
    /** the final state of the pool */
    finalPool?: Pool;
    /** the amount of pool shares that the user received */
    finalUserPoolShares?: Coin;
}
export interface EventPoolJoined {
    /** the address of the user who joined the pool */
    address: string;
    /** the amount of tokens that the user deposited */
    tokensIn: Coin[];
    /** the amount of pool shares that the user received */
    poolSharesOut?: Coin;
    /** the amount of tokens remaining for the user */
    remCoins: Coin[];
    /** the final state of the pool */
    finalPool?: Pool;
    /** the final amount of user pool shares */
    finalUserPoolShares?: Coin;
}
export interface EventPoolExited {
    /** the address of the user who exited the pool */
    address: string;
    /** the amount of pool shares that the user exited with */
    poolSharesIn?: Coin;
    /** the amount of tokens returned to the user */
    tokensOut: Coin[];
    /** the amount of fees collected by the pool */
    fees: Coin[];
    /** the final state of the pool */
    finalPool?: Pool;
    /** the final amount of user pool shares */
    finalUserPoolShares?: Coin;
}
export interface EventAssetsSwapped {
    /** the address of the user who swapped tokens */
    address: string;
    /** the amount of tokens that the user deposited */
    tokenIn?: Coin;
    /** the amount of tokens that the user received */
    tokenOut?: Coin;
    /** the amount of fees collected by the pool */
    fee?: Coin;
    /** the final state of the pool */
    finalPool?: Pool;
}
export declare const EventPoolCreated: {
    encode(message: EventPoolCreated, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventPoolCreated;
    fromJSON(object: any): EventPoolCreated;
    toJSON(message: EventPoolCreated): unknown;
    create<I extends {
        creator?: string | undefined;
        fees?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        finalPool?: {
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } | undefined;
        finalUserPoolShares?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        creator?: string | undefined;
        fees?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["fees"][number], keyof Coin>]: never; })[] & { [K_1 in Exclude<keyof I["fees"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        finalPool?: ({
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            id?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K_2 in Exclude<keyof I["finalPool"]["id"], keyof Long.Long>]: never; }) | undefined;
            address?: string | undefined;
            poolParams?: ({
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & { [K_3 in Exclude<keyof I["finalPool"]["poolParams"], keyof import("./pool").PoolParams>]: never; }) | undefined;
            poolAssets?: ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] & ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            } & {
                token?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & { [K_4 in Exclude<keyof I["finalPool"]["poolAssets"][number]["token"], keyof Coin>]: never; }) | undefined;
                weight?: string | undefined;
            } & { [K_5 in Exclude<keyof I["finalPool"]["poolAssets"][number], keyof import("./pool").PoolAsset>]: never; })[] & { [K_6 in Exclude<keyof I["finalPool"]["poolAssets"], keyof {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[]>]: never; }) | undefined;
            totalWeight?: string | undefined;
            totalShares?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_7 in Exclude<keyof I["finalPool"]["totalShares"], keyof Coin>]: never; }) | undefined;
        } & { [K_8 in Exclude<keyof I["finalPool"], keyof Pool>]: never; }) | undefined;
        finalUserPoolShares?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_9 in Exclude<keyof I["finalUserPoolShares"], keyof Coin>]: never; }) | undefined;
    } & { [K_10 in Exclude<keyof I, keyof EventPoolCreated>]: never; }>(base?: I | undefined): EventPoolCreated;
    fromPartial<I_1 extends {
        creator?: string | undefined;
        fees?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        finalPool?: {
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } | undefined;
        finalUserPoolShares?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        creator?: string | undefined;
        fees?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_11 in Exclude<keyof I_1["fees"][number], keyof Coin>]: never; })[] & { [K_12 in Exclude<keyof I_1["fees"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        finalPool?: ({
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            id?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K_13 in Exclude<keyof I_1["finalPool"]["id"], keyof Long.Long>]: never; }) | undefined;
            address?: string | undefined;
            poolParams?: ({
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & { [K_14 in Exclude<keyof I_1["finalPool"]["poolParams"], keyof import("./pool").PoolParams>]: never; }) | undefined;
            poolAssets?: ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] & ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            } & {
                token?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & { [K_15 in Exclude<keyof I_1["finalPool"]["poolAssets"][number]["token"], keyof Coin>]: never; }) | undefined;
                weight?: string | undefined;
            } & { [K_16 in Exclude<keyof I_1["finalPool"]["poolAssets"][number], keyof import("./pool").PoolAsset>]: never; })[] & { [K_17 in Exclude<keyof I_1["finalPool"]["poolAssets"], keyof {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[]>]: never; }) | undefined;
            totalWeight?: string | undefined;
            totalShares?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_18 in Exclude<keyof I_1["finalPool"]["totalShares"], keyof Coin>]: never; }) | undefined;
        } & { [K_19 in Exclude<keyof I_1["finalPool"], keyof Pool>]: never; }) | undefined;
        finalUserPoolShares?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_20 in Exclude<keyof I_1["finalUserPoolShares"], keyof Coin>]: never; }) | undefined;
    } & { [K_21 in Exclude<keyof I_1, keyof EventPoolCreated>]: never; }>(object: I_1): EventPoolCreated;
};
export declare const EventPoolJoined: {
    encode(message: EventPoolJoined, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventPoolJoined;
    fromJSON(object: any): EventPoolJoined;
    toJSON(message: EventPoolJoined): unknown;
    create<I extends {
        address?: string | undefined;
        tokensIn?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        poolSharesOut?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        remCoins?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        finalPool?: {
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } | undefined;
        finalUserPoolShares?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        address?: string | undefined;
        tokensIn?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["tokensIn"][number], keyof Coin>]: never; })[] & { [K_1 in Exclude<keyof I["tokensIn"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        poolSharesOut?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_2 in Exclude<keyof I["poolSharesOut"], keyof Coin>]: never; }) | undefined;
        remCoins?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_3 in Exclude<keyof I["remCoins"][number], keyof Coin>]: never; })[] & { [K_4 in Exclude<keyof I["remCoins"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        finalPool?: ({
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            id?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K_5 in Exclude<keyof I["finalPool"]["id"], keyof Long.Long>]: never; }) | undefined;
            address?: string | undefined;
            poolParams?: ({
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & { [K_6 in Exclude<keyof I["finalPool"]["poolParams"], keyof import("./pool").PoolParams>]: never; }) | undefined;
            poolAssets?: ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] & ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            } & {
                token?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & { [K_7 in Exclude<keyof I["finalPool"]["poolAssets"][number]["token"], keyof Coin>]: never; }) | undefined;
                weight?: string | undefined;
            } & { [K_8 in Exclude<keyof I["finalPool"]["poolAssets"][number], keyof import("./pool").PoolAsset>]: never; })[] & { [K_9 in Exclude<keyof I["finalPool"]["poolAssets"], keyof {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[]>]: never; }) | undefined;
            totalWeight?: string | undefined;
            totalShares?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_10 in Exclude<keyof I["finalPool"]["totalShares"], keyof Coin>]: never; }) | undefined;
        } & { [K_11 in Exclude<keyof I["finalPool"], keyof Pool>]: never; }) | undefined;
        finalUserPoolShares?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_12 in Exclude<keyof I["finalUserPoolShares"], keyof Coin>]: never; }) | undefined;
    } & { [K_13 in Exclude<keyof I, keyof EventPoolJoined>]: never; }>(base?: I | undefined): EventPoolJoined;
    fromPartial<I_1 extends {
        address?: string | undefined;
        tokensIn?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        poolSharesOut?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        remCoins?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        finalPool?: {
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } | undefined;
        finalUserPoolShares?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        address?: string | undefined;
        tokensIn?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_14 in Exclude<keyof I_1["tokensIn"][number], keyof Coin>]: never; })[] & { [K_15 in Exclude<keyof I_1["tokensIn"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        poolSharesOut?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_16 in Exclude<keyof I_1["poolSharesOut"], keyof Coin>]: never; }) | undefined;
        remCoins?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_17 in Exclude<keyof I_1["remCoins"][number], keyof Coin>]: never; })[] & { [K_18 in Exclude<keyof I_1["remCoins"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        finalPool?: ({
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            id?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K_19 in Exclude<keyof I_1["finalPool"]["id"], keyof Long.Long>]: never; }) | undefined;
            address?: string | undefined;
            poolParams?: ({
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & { [K_20 in Exclude<keyof I_1["finalPool"]["poolParams"], keyof import("./pool").PoolParams>]: never; }) | undefined;
            poolAssets?: ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] & ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            } & {
                token?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & { [K_21 in Exclude<keyof I_1["finalPool"]["poolAssets"][number]["token"], keyof Coin>]: never; }) | undefined;
                weight?: string | undefined;
            } & { [K_22 in Exclude<keyof I_1["finalPool"]["poolAssets"][number], keyof import("./pool").PoolAsset>]: never; })[] & { [K_23 in Exclude<keyof I_1["finalPool"]["poolAssets"], keyof {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[]>]: never; }) | undefined;
            totalWeight?: string | undefined;
            totalShares?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_24 in Exclude<keyof I_1["finalPool"]["totalShares"], keyof Coin>]: never; }) | undefined;
        } & { [K_25 in Exclude<keyof I_1["finalPool"], keyof Pool>]: never; }) | undefined;
        finalUserPoolShares?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_26 in Exclude<keyof I_1["finalUserPoolShares"], keyof Coin>]: never; }) | undefined;
    } & { [K_27 in Exclude<keyof I_1, keyof EventPoolJoined>]: never; }>(object: I_1): EventPoolJoined;
};
export declare const EventPoolExited: {
    encode(message: EventPoolExited, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventPoolExited;
    fromJSON(object: any): EventPoolExited;
    toJSON(message: EventPoolExited): unknown;
    create<I extends {
        address?: string | undefined;
        poolSharesIn?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        tokensOut?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        fees?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        finalPool?: {
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } | undefined;
        finalUserPoolShares?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        address?: string | undefined;
        poolSharesIn?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["poolSharesIn"], keyof Coin>]: never; }) | undefined;
        tokensOut?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_1 in Exclude<keyof I["tokensOut"][number], keyof Coin>]: never; })[] & { [K_2 in Exclude<keyof I["tokensOut"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        fees?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_3 in Exclude<keyof I["fees"][number], keyof Coin>]: never; })[] & { [K_4 in Exclude<keyof I["fees"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        finalPool?: ({
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            id?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K_5 in Exclude<keyof I["finalPool"]["id"], keyof Long.Long>]: never; }) | undefined;
            address?: string | undefined;
            poolParams?: ({
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & { [K_6 in Exclude<keyof I["finalPool"]["poolParams"], keyof import("./pool").PoolParams>]: never; }) | undefined;
            poolAssets?: ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] & ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            } & {
                token?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & { [K_7 in Exclude<keyof I["finalPool"]["poolAssets"][number]["token"], keyof Coin>]: never; }) | undefined;
                weight?: string | undefined;
            } & { [K_8 in Exclude<keyof I["finalPool"]["poolAssets"][number], keyof import("./pool").PoolAsset>]: never; })[] & { [K_9 in Exclude<keyof I["finalPool"]["poolAssets"], keyof {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[]>]: never; }) | undefined;
            totalWeight?: string | undefined;
            totalShares?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_10 in Exclude<keyof I["finalPool"]["totalShares"], keyof Coin>]: never; }) | undefined;
        } & { [K_11 in Exclude<keyof I["finalPool"], keyof Pool>]: never; }) | undefined;
        finalUserPoolShares?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_12 in Exclude<keyof I["finalUserPoolShares"], keyof Coin>]: never; }) | undefined;
    } & { [K_13 in Exclude<keyof I, keyof EventPoolExited>]: never; }>(base?: I | undefined): EventPoolExited;
    fromPartial<I_1 extends {
        address?: string | undefined;
        poolSharesIn?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        tokensOut?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        fees?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        finalPool?: {
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } | undefined;
        finalUserPoolShares?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        address?: string | undefined;
        poolSharesIn?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_14 in Exclude<keyof I_1["poolSharesIn"], keyof Coin>]: never; }) | undefined;
        tokensOut?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_15 in Exclude<keyof I_1["tokensOut"][number], keyof Coin>]: never; })[] & { [K_16 in Exclude<keyof I_1["tokensOut"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        fees?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_17 in Exclude<keyof I_1["fees"][number], keyof Coin>]: never; })[] & { [K_18 in Exclude<keyof I_1["fees"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        finalPool?: ({
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            id?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K_19 in Exclude<keyof I_1["finalPool"]["id"], keyof Long.Long>]: never; }) | undefined;
            address?: string | undefined;
            poolParams?: ({
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & { [K_20 in Exclude<keyof I_1["finalPool"]["poolParams"], keyof import("./pool").PoolParams>]: never; }) | undefined;
            poolAssets?: ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] & ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            } & {
                token?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & { [K_21 in Exclude<keyof I_1["finalPool"]["poolAssets"][number]["token"], keyof Coin>]: never; }) | undefined;
                weight?: string | undefined;
            } & { [K_22 in Exclude<keyof I_1["finalPool"]["poolAssets"][number], keyof import("./pool").PoolAsset>]: never; })[] & { [K_23 in Exclude<keyof I_1["finalPool"]["poolAssets"], keyof {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[]>]: never; }) | undefined;
            totalWeight?: string | undefined;
            totalShares?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_24 in Exclude<keyof I_1["finalPool"]["totalShares"], keyof Coin>]: never; }) | undefined;
        } & { [K_25 in Exclude<keyof I_1["finalPool"], keyof Pool>]: never; }) | undefined;
        finalUserPoolShares?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_26 in Exclude<keyof I_1["finalUserPoolShares"], keyof Coin>]: never; }) | undefined;
    } & { [K_27 in Exclude<keyof I_1, keyof EventPoolExited>]: never; }>(object: I_1): EventPoolExited;
};
export declare const EventAssetsSwapped: {
    encode(message: EventAssetsSwapped, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventAssetsSwapped;
    fromJSON(object: any): EventAssetsSwapped;
    toJSON(message: EventAssetsSwapped): unknown;
    create<I extends {
        address?: string | undefined;
        tokenIn?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        tokenOut?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        fee?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        finalPool?: {
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } | undefined;
    } & {
        address?: string | undefined;
        tokenIn?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["tokenIn"], keyof Coin>]: never; }) | undefined;
        tokenOut?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_1 in Exclude<keyof I["tokenOut"], keyof Coin>]: never; }) | undefined;
        fee?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_2 in Exclude<keyof I["fee"], keyof Coin>]: never; }) | undefined;
        finalPool?: ({
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            id?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K_3 in Exclude<keyof I["finalPool"]["id"], keyof Long.Long>]: never; }) | undefined;
            address?: string | undefined;
            poolParams?: ({
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & { [K_4 in Exclude<keyof I["finalPool"]["poolParams"], keyof import("./pool").PoolParams>]: never; }) | undefined;
            poolAssets?: ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] & ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            } & {
                token?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & { [K_5 in Exclude<keyof I["finalPool"]["poolAssets"][number]["token"], keyof Coin>]: never; }) | undefined;
                weight?: string | undefined;
            } & { [K_6 in Exclude<keyof I["finalPool"]["poolAssets"][number], keyof import("./pool").PoolAsset>]: never; })[] & { [K_7 in Exclude<keyof I["finalPool"]["poolAssets"], keyof {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[]>]: never; }) | undefined;
            totalWeight?: string | undefined;
            totalShares?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_8 in Exclude<keyof I["finalPool"]["totalShares"], keyof Coin>]: never; }) | undefined;
        } & { [K_9 in Exclude<keyof I["finalPool"], keyof Pool>]: never; }) | undefined;
    } & { [K_10 in Exclude<keyof I, keyof EventAssetsSwapped>]: never; }>(base?: I | undefined): EventAssetsSwapped;
    fromPartial<I_1 extends {
        address?: string | undefined;
        tokenIn?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        tokenOut?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        fee?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        finalPool?: {
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } | undefined;
    } & {
        address?: string | undefined;
        tokenIn?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_11 in Exclude<keyof I_1["tokenIn"], keyof Coin>]: never; }) | undefined;
        tokenOut?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_12 in Exclude<keyof I_1["tokenOut"], keyof Coin>]: never; }) | undefined;
        fee?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_13 in Exclude<keyof I_1["fee"], keyof Coin>]: never; }) | undefined;
        finalPool?: ({
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            id?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K_14 in Exclude<keyof I_1["finalPool"]["id"], keyof Long.Long>]: never; }) | undefined;
            address?: string | undefined;
            poolParams?: ({
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & { [K_15 in Exclude<keyof I_1["finalPool"]["poolParams"], keyof import("./pool").PoolParams>]: never; }) | undefined;
            poolAssets?: ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] & ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            } & {
                token?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & { [K_16 in Exclude<keyof I_1["finalPool"]["poolAssets"][number]["token"], keyof Coin>]: never; }) | undefined;
                weight?: string | undefined;
            } & { [K_17 in Exclude<keyof I_1["finalPool"]["poolAssets"][number], keyof import("./pool").PoolAsset>]: never; })[] & { [K_18 in Exclude<keyof I_1["finalPool"]["poolAssets"], keyof {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[]>]: never; }) | undefined;
            totalWeight?: string | undefined;
            totalShares?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_19 in Exclude<keyof I_1["finalPool"]["totalShares"], keyof Coin>]: never; }) | undefined;
        } & { [K_20 in Exclude<keyof I_1["finalPool"], keyof Pool>]: never; }) | undefined;
    } & { [K_21 in Exclude<keyof I_1, keyof EventAssetsSwapped>]: never; }>(object: I_1): EventAssetsSwapped;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
//# sourceMappingURL=event.d.ts.map