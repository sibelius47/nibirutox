import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Pool, PoolAsset, PoolParams } from "./pool";
export declare const protobufPackage = "nibiru.spot.v1";
export interface MsgCreatePool {
    creator: string;
    poolParams?: PoolParams;
    poolAssets: PoolAsset[];
}
export interface MsgCreatePoolResponse {
    poolId: Long;
}
/** Message to join a pool (identified by poolId) with a set of tokens to deposit. */
export interface MsgJoinPool {
    sender: string;
    poolId: Long;
    tokensIn: Coin[];
    useAllCoins: boolean;
}
/** Response when a user joins a pool. */
export interface MsgJoinPoolResponse {
    /** the final state of the pool after a join */
    pool?: Pool;
    /** sum of LP tokens minted from the join */
    numPoolSharesOut?: Coin;
    /** remaining tokens from attempting to join the pool */
    remainingCoins: Coin[];
}
export interface MsgExitPool {
    sender: string;
    poolId: Long;
    poolShares?: Coin;
}
export interface MsgExitPoolResponse {
    tokensOut: Coin[];
}
export interface MsgSwapAssets {
    sender: string;
    poolId: Long;
    tokenIn?: Coin;
    tokenOutDenom: string;
}
export interface MsgSwapAssetsResponse {
    tokenOut?: Coin;
}
export declare const MsgCreatePool: {
    encode(message: MsgCreatePool, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreatePool;
    fromJSON(object: any): MsgCreatePool;
    toJSON(message: MsgCreatePool): unknown;
    create<I extends {
        creator?: string | undefined;
        poolParams?: {
            swapFee?: string | undefined;
            exitFee?: string | undefined;
            A?: string | undefined;
            poolType?: import("./pool").PoolType | undefined;
        } | undefined;
        poolAssets?: {
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[] | undefined;
    } & {
        creator?: string | undefined;
        poolParams?: ({
            swapFee?: string | undefined;
            exitFee?: string | undefined;
            A?: string | undefined;
            poolType?: import("./pool").PoolType | undefined;
        } & {
            swapFee?: string | undefined;
            exitFee?: string | undefined;
            A?: string | undefined;
            poolType?: import("./pool").PoolType | undefined;
        } & { [K in Exclude<keyof I["poolParams"], keyof PoolParams>]: never; }) | undefined;
        poolAssets?: ({
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[] & ({
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        } & {
            token?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_1 in Exclude<keyof I["poolAssets"][number]["token"], keyof Coin>]: never; }) | undefined;
            weight?: string | undefined;
        } & { [K_2 in Exclude<keyof I["poolAssets"][number], keyof PoolAsset>]: never; })[] & { [K_3 in Exclude<keyof I["poolAssets"], keyof {
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_4 in Exclude<keyof I, keyof MsgCreatePool>]: never; }>(base?: I | undefined): MsgCreatePool;
    fromPartial<I_1 extends {
        creator?: string | undefined;
        poolParams?: {
            swapFee?: string | undefined;
            exitFee?: string | undefined;
            A?: string | undefined;
            poolType?: import("./pool").PoolType | undefined;
        } | undefined;
        poolAssets?: {
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[] | undefined;
    } & {
        creator?: string | undefined;
        poolParams?: ({
            swapFee?: string | undefined;
            exitFee?: string | undefined;
            A?: string | undefined;
            poolType?: import("./pool").PoolType | undefined;
        } & {
            swapFee?: string | undefined;
            exitFee?: string | undefined;
            A?: string | undefined;
            poolType?: import("./pool").PoolType | undefined;
        } & { [K_5 in Exclude<keyof I_1["poolParams"], keyof PoolParams>]: never; }) | undefined;
        poolAssets?: ({
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[] & ({
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        } & {
            token?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_6 in Exclude<keyof I_1["poolAssets"][number]["token"], keyof Coin>]: never; }) | undefined;
            weight?: string | undefined;
        } & { [K_7 in Exclude<keyof I_1["poolAssets"][number], keyof PoolAsset>]: never; })[] & { [K_8 in Exclude<keyof I_1["poolAssets"], keyof {
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_9 in Exclude<keyof I_1, keyof MsgCreatePool>]: never; }>(object: I_1): MsgCreatePool;
};
export declare const MsgCreatePoolResponse: {
    encode(message: MsgCreatePoolResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreatePoolResponse;
    fromJSON(object: any): MsgCreatePoolResponse;
    toJSON(message: MsgCreatePoolResponse): unknown;
    create<I extends {
        poolId?: string | number | Long.Long | undefined;
    } & {
        poolId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & { [K in Exclude<keyof I["poolId"], keyof Long.Long>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "poolId">]: never; }>(base?: I | undefined): MsgCreatePoolResponse;
    fromPartial<I_1 extends {
        poolId?: string | number | Long.Long | undefined;
    } & {
        poolId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & { [K_2 in Exclude<keyof I_1["poolId"], keyof Long.Long>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, "poolId">]: never; }>(object: I_1): MsgCreatePoolResponse;
};
export declare const MsgJoinPool: {
    encode(message: MsgJoinPool, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgJoinPool;
    fromJSON(object: any): MsgJoinPool;
    toJSON(message: MsgJoinPool): unknown;
    create<I extends {
        sender?: string | undefined;
        poolId?: string | number | Long.Long | undefined;
        tokensIn?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        useAllCoins?: boolean | undefined;
    } & {
        sender?: string | undefined;
        poolId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & { [K in Exclude<keyof I["poolId"], keyof Long.Long>]: never; }) | undefined;
        tokensIn?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_1 in Exclude<keyof I["tokensIn"][number], keyof Coin>]: never; })[] & { [K_2 in Exclude<keyof I["tokensIn"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        useAllCoins?: boolean | undefined;
    } & { [K_3 in Exclude<keyof I, keyof MsgJoinPool>]: never; }>(base?: I | undefined): MsgJoinPool;
    fromPartial<I_1 extends {
        sender?: string | undefined;
        poolId?: string | number | Long.Long | undefined;
        tokensIn?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        useAllCoins?: boolean | undefined;
    } & {
        sender?: string | undefined;
        poolId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & { [K_4 in Exclude<keyof I_1["poolId"], keyof Long.Long>]: never; }) | undefined;
        tokensIn?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_5 in Exclude<keyof I_1["tokensIn"][number], keyof Coin>]: never; })[] & { [K_6 in Exclude<keyof I_1["tokensIn"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        useAllCoins?: boolean | undefined;
    } & { [K_7 in Exclude<keyof I_1, keyof MsgJoinPool>]: never; }>(object: I_1): MsgJoinPool;
};
export declare const MsgJoinPoolResponse: {
    encode(message: MsgJoinPoolResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgJoinPoolResponse;
    fromJSON(object: any): MsgJoinPoolResponse;
    toJSON(message: MsgJoinPoolResponse): unknown;
    create<I extends {
        pool?: {
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } | undefined;
        numPoolSharesOut?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        remainingCoins?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        pool?: ({
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            id?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K in Exclude<keyof I["pool"]["id"], keyof Long.Long>]: never; }) | undefined;
            address?: string | undefined;
            poolParams?: ({
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & { [K_1 in Exclude<keyof I["pool"]["poolParams"], keyof PoolParams>]: never; }) | undefined;
            poolAssets?: ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] & ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            } & {
                token?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & { [K_2 in Exclude<keyof I["pool"]["poolAssets"][number]["token"], keyof Coin>]: never; }) | undefined;
                weight?: string | undefined;
            } & { [K_3 in Exclude<keyof I["pool"]["poolAssets"][number], keyof PoolAsset>]: never; })[] & { [K_4 in Exclude<keyof I["pool"]["poolAssets"], keyof {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[]>]: never; }) | undefined;
            totalWeight?: string | undefined;
            totalShares?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_5 in Exclude<keyof I["pool"]["totalShares"], keyof Coin>]: never; }) | undefined;
        } & { [K_6 in Exclude<keyof I["pool"], keyof Pool>]: never; }) | undefined;
        numPoolSharesOut?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_7 in Exclude<keyof I["numPoolSharesOut"], keyof Coin>]: never; }) | undefined;
        remainingCoins?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_8 in Exclude<keyof I["remainingCoins"][number], keyof Coin>]: never; })[] & { [K_9 in Exclude<keyof I["remainingCoins"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_10 in Exclude<keyof I, keyof MsgJoinPoolResponse>]: never; }>(base?: I | undefined): MsgJoinPoolResponse;
    fromPartial<I_1 extends {
        pool?: {
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } | undefined;
        numPoolSharesOut?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        remainingCoins?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        pool?: ({
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            id?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K_11 in Exclude<keyof I_1["pool"]["id"], keyof Long.Long>]: never; }) | undefined;
            address?: string | undefined;
            poolParams?: ({
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & { [K_12 in Exclude<keyof I_1["pool"]["poolParams"], keyof PoolParams>]: never; }) | undefined;
            poolAssets?: ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] & ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            } & {
                token?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & { [K_13 in Exclude<keyof I_1["pool"]["poolAssets"][number]["token"], keyof Coin>]: never; }) | undefined;
                weight?: string | undefined;
            } & { [K_14 in Exclude<keyof I_1["pool"]["poolAssets"][number], keyof PoolAsset>]: never; })[] & { [K_15 in Exclude<keyof I_1["pool"]["poolAssets"], keyof {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[]>]: never; }) | undefined;
            totalWeight?: string | undefined;
            totalShares?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_16 in Exclude<keyof I_1["pool"]["totalShares"], keyof Coin>]: never; }) | undefined;
        } & { [K_17 in Exclude<keyof I_1["pool"], keyof Pool>]: never; }) | undefined;
        numPoolSharesOut?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_18 in Exclude<keyof I_1["numPoolSharesOut"], keyof Coin>]: never; }) | undefined;
        remainingCoins?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_19 in Exclude<keyof I_1["remainingCoins"][number], keyof Coin>]: never; })[] & { [K_20 in Exclude<keyof I_1["remainingCoins"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_21 in Exclude<keyof I_1, keyof MsgJoinPoolResponse>]: never; }>(object: I_1): MsgJoinPoolResponse;
};
export declare const MsgExitPool: {
    encode(message: MsgExitPool, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgExitPool;
    fromJSON(object: any): MsgExitPool;
    toJSON(message: MsgExitPool): unknown;
    create<I extends {
        sender?: string | undefined;
        poolId?: string | number | Long.Long | undefined;
        poolShares?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        sender?: string | undefined;
        poolId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & { [K in Exclude<keyof I["poolId"], keyof Long.Long>]: never; }) | undefined;
        poolShares?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_1 in Exclude<keyof I["poolShares"], keyof Coin>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, keyof MsgExitPool>]: never; }>(base?: I | undefined): MsgExitPool;
    fromPartial<I_1 extends {
        sender?: string | undefined;
        poolId?: string | number | Long.Long | undefined;
        poolShares?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        sender?: string | undefined;
        poolId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & { [K_3 in Exclude<keyof I_1["poolId"], keyof Long.Long>]: never; }) | undefined;
        poolShares?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_4 in Exclude<keyof I_1["poolShares"], keyof Coin>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, keyof MsgExitPool>]: never; }>(object: I_1): MsgExitPool;
};
export declare const MsgExitPoolResponse: {
    encode(message: MsgExitPoolResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgExitPoolResponse;
    fromJSON(object: any): MsgExitPoolResponse;
    toJSON(message: MsgExitPoolResponse): unknown;
    create<I extends {
        tokensOut?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        tokensOut?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["tokensOut"][number], keyof Coin>]: never; })[] & { [K_1 in Exclude<keyof I["tokensOut"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, "tokensOut">]: never; }>(base?: I | undefined): MsgExitPoolResponse;
    fromPartial<I_1 extends {
        tokensOut?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
    } & {
        tokensOut?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_3 in Exclude<keyof I_1["tokensOut"][number], keyof Coin>]: never; })[] & { [K_4 in Exclude<keyof I_1["tokensOut"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, "tokensOut">]: never; }>(object: I_1): MsgExitPoolResponse;
};
export declare const MsgSwapAssets: {
    encode(message: MsgSwapAssets, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgSwapAssets;
    fromJSON(object: any): MsgSwapAssets;
    toJSON(message: MsgSwapAssets): unknown;
    create<I extends {
        sender?: string | undefined;
        poolId?: string | number | Long.Long | undefined;
        tokenIn?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        tokenOutDenom?: string | undefined;
    } & {
        sender?: string | undefined;
        poolId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & { [K in Exclude<keyof I["poolId"], keyof Long.Long>]: never; }) | undefined;
        tokenIn?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_1 in Exclude<keyof I["tokenIn"], keyof Coin>]: never; }) | undefined;
        tokenOutDenom?: string | undefined;
    } & { [K_2 in Exclude<keyof I, keyof MsgSwapAssets>]: never; }>(base?: I | undefined): MsgSwapAssets;
    fromPartial<I_1 extends {
        sender?: string | undefined;
        poolId?: string | number | Long.Long | undefined;
        tokenIn?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        tokenOutDenom?: string | undefined;
    } & {
        sender?: string | undefined;
        poolId?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & { [K_3 in Exclude<keyof I_1["poolId"], keyof Long.Long>]: never; }) | undefined;
        tokenIn?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_4 in Exclude<keyof I_1["tokenIn"], keyof Coin>]: never; }) | undefined;
        tokenOutDenom?: string | undefined;
    } & { [K_5 in Exclude<keyof I_1, keyof MsgSwapAssets>]: never; }>(object: I_1): MsgSwapAssets;
};
export declare const MsgSwapAssetsResponse: {
    encode(message: MsgSwapAssetsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgSwapAssetsResponse;
    fromJSON(object: any): MsgSwapAssetsResponse;
    toJSON(message: MsgSwapAssetsResponse): unknown;
    create<I extends {
        tokenOut?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        tokenOut?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["tokenOut"], keyof Coin>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "tokenOut">]: never; }>(base?: I | undefined): MsgSwapAssetsResponse;
    fromPartial<I_1 extends {
        tokenOut?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        tokenOut?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_2 in Exclude<keyof I_1["tokenOut"], keyof Coin>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, "tokenOut">]: never; }>(object: I_1): MsgSwapAssetsResponse;
};
/** Msg defines the Msg service. */
export interface Msg {
    /** Used to create a pool. */
    CreatePool(request: MsgCreatePool): Promise<MsgCreatePoolResponse>;
    /** Join a pool as a liquidity provider. */
    JoinPool(request: MsgJoinPool): Promise<MsgJoinPoolResponse>;
    /** Exit a pool position by returning LP shares */
    ExitPool(request: MsgExitPool): Promise<MsgExitPoolResponse>;
    /** Swap assets in a pool */
    SwapAssets(request: MsgSwapAssets): Promise<MsgSwapAssetsResponse>;
}
export declare const MsgServiceName = "nibiru.spot.v1.Msg";
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    CreatePool(request: MsgCreatePool): Promise<MsgCreatePoolResponse>;
    JoinPool(request: MsgJoinPool): Promise<MsgJoinPoolResponse>;
    ExitPool(request: MsgExitPool): Promise<MsgExitPoolResponse>;
    SwapAssets(request: MsgSwapAssets): Promise<MsgSwapAssetsResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
//# sourceMappingURL=tx.d.ts.map