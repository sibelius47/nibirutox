"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventAssetsSwapped = exports.EventPoolExited = exports.EventPoolJoined = exports.EventPoolCreated = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const pool_1 = require("./pool");
exports.protobufPackage = "nibiru.spot.v1";
function createBaseEventPoolCreated() {
    return {
        creator: "",
        fees: [],
        finalPool: undefined,
        finalUserPoolShares: undefined,
    };
}
exports.EventPoolCreated = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.creator !== "") {
            writer.uint32(10).string(message.creator);
        }
        for (const v of message.fees) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.finalPool !== undefined) {
            pool_1.Pool.encode(message.finalPool, writer.uint32(34).fork()).ldelim();
        }
        if (message.finalUserPoolShares !== undefined) {
            coin_1.Coin.encode(message.finalUserPoolShares, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventPoolCreated();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.creator = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.fees.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.finalPool = pool_1.Pool.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.finalUserPoolShares = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            creator: isSet(object.creator) ? String(object.creator) : "",
            fees: Array.isArray(object === null || object === void 0 ? void 0 : object.fees)
                ? object.fees.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            finalPool: isSet(object.finalPool)
                ? pool_1.Pool.fromJSON(object.finalPool)
                : undefined,
            finalUserPoolShares: isSet(object.finalUserPoolShares)
                ? coin_1.Coin.fromJSON(object.finalUserPoolShares)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.creator !== undefined && (obj.creator = message.creator);
        if (message.fees) {
            obj.fees = message.fees.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.fees = [];
        }
        message.finalPool !== undefined &&
            (obj.finalPool = message.finalPool
                ? pool_1.Pool.toJSON(message.finalPool)
                : undefined);
        message.finalUserPoolShares !== undefined &&
            (obj.finalUserPoolShares = message.finalUserPoolShares
                ? coin_1.Coin.toJSON(message.finalUserPoolShares)
                : undefined);
        return obj;
    },
    create(base) {
        return exports.EventPoolCreated.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventPoolCreated();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : "";
        message.fees = ((_b = object.fees) === null || _b === void 0 ? void 0 : _b.map((e) => coin_1.Coin.fromPartial(e))) || [];
        message.finalPool =
            object.finalPool !== undefined && object.finalPool !== null
                ? pool_1.Pool.fromPartial(object.finalPool)
                : undefined;
        message.finalUserPoolShares =
            object.finalUserPoolShares !== undefined &&
                object.finalUserPoolShares !== null
                ? coin_1.Coin.fromPartial(object.finalUserPoolShares)
                : undefined;
        return message;
    },
};
function createBaseEventPoolJoined() {
    return {
        address: "",
        tokensIn: [],
        poolSharesOut: undefined,
        remCoins: [],
        finalPool: undefined,
        finalUserPoolShares: undefined,
    };
}
exports.EventPoolJoined = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        for (const v of message.tokensIn) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.poolSharesOut !== undefined) {
            coin_1.Coin.encode(message.poolSharesOut, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.remCoins) {
            coin_1.Coin.encode(v, writer.uint32(34).fork()).ldelim();
        }
        if (message.finalPool !== undefined) {
            pool_1.Pool.encode(message.finalPool, writer.uint32(42).fork()).ldelim();
        }
        if (message.finalUserPoolShares !== undefined) {
            coin_1.Coin.encode(message.finalUserPoolShares, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventPoolJoined();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.tokensIn.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.poolSharesOut = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.remCoins.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.finalPool = pool_1.Pool.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.finalUserPoolShares = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? String(object.address) : "",
            tokensIn: Array.isArray(object === null || object === void 0 ? void 0 : object.tokensIn)
                ? object.tokensIn.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            poolSharesOut: isSet(object.poolSharesOut)
                ? coin_1.Coin.fromJSON(object.poolSharesOut)
                : undefined,
            remCoins: Array.isArray(object === null || object === void 0 ? void 0 : object.remCoins)
                ? object.remCoins.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            finalPool: isSet(object.finalPool)
                ? pool_1.Pool.fromJSON(object.finalPool)
                : undefined,
            finalUserPoolShares: isSet(object.finalUserPoolShares)
                ? coin_1.Coin.fromJSON(object.finalUserPoolShares)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        if (message.tokensIn) {
            obj.tokensIn = message.tokensIn.map((e) => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.tokensIn = [];
        }
        message.poolSharesOut !== undefined &&
            (obj.poolSharesOut = message.poolSharesOut
                ? coin_1.Coin.toJSON(message.poolSharesOut)
                : undefined);
        if (message.remCoins) {
            obj.remCoins = message.remCoins.map((e) => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.remCoins = [];
        }
        message.finalPool !== undefined &&
            (obj.finalPool = message.finalPool
                ? pool_1.Pool.toJSON(message.finalPool)
                : undefined);
        message.finalUserPoolShares !== undefined &&
            (obj.finalUserPoolShares = message.finalUserPoolShares
                ? coin_1.Coin.toJSON(message.finalUserPoolShares)
                : undefined);
        return obj;
    },
    create(base) {
        return exports.EventPoolJoined.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseEventPoolJoined();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.tokensIn = ((_b = object.tokensIn) === null || _b === void 0 ? void 0 : _b.map((e) => coin_1.Coin.fromPartial(e))) || [];
        message.poolSharesOut =
            object.poolSharesOut !== undefined && object.poolSharesOut !== null
                ? coin_1.Coin.fromPartial(object.poolSharesOut)
                : undefined;
        message.remCoins = ((_c = object.remCoins) === null || _c === void 0 ? void 0 : _c.map((e) => coin_1.Coin.fromPartial(e))) || [];
        message.finalPool =
            object.finalPool !== undefined && object.finalPool !== null
                ? pool_1.Pool.fromPartial(object.finalPool)
                : undefined;
        message.finalUserPoolShares =
            object.finalUserPoolShares !== undefined &&
                object.finalUserPoolShares !== null
                ? coin_1.Coin.fromPartial(object.finalUserPoolShares)
                : undefined;
        return message;
    },
};
function createBaseEventPoolExited() {
    return {
        address: "",
        poolSharesIn: undefined,
        tokensOut: [],
        fees: [],
        finalPool: undefined,
        finalUserPoolShares: undefined,
    };
}
exports.EventPoolExited = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.poolSharesIn !== undefined) {
            coin_1.Coin.encode(message.poolSharesIn, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.tokensOut) {
            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.fees) {
            coin_1.Coin.encode(v, writer.uint32(34).fork()).ldelim();
        }
        if (message.finalPool !== undefined) {
            pool_1.Pool.encode(message.finalPool, writer.uint32(42).fork()).ldelim();
        }
        if (message.finalUserPoolShares !== undefined) {
            coin_1.Coin.encode(message.finalUserPoolShares, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventPoolExited();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.poolSharesIn = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.tokensOut.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.fees.push(coin_1.Coin.decode(reader, reader.uint32()));
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.finalPool = pool_1.Pool.decode(reader, reader.uint32());
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.finalUserPoolShares = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? String(object.address) : "",
            poolSharesIn: isSet(object.poolSharesIn)
                ? coin_1.Coin.fromJSON(object.poolSharesIn)
                : undefined,
            tokensOut: Array.isArray(object === null || object === void 0 ? void 0 : object.tokensOut)
                ? object.tokensOut.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            fees: Array.isArray(object === null || object === void 0 ? void 0 : object.fees)
                ? object.fees.map((e) => coin_1.Coin.fromJSON(e))
                : [],
            finalPool: isSet(object.finalPool)
                ? pool_1.Pool.fromJSON(object.finalPool)
                : undefined,
            finalUserPoolShares: isSet(object.finalUserPoolShares)
                ? coin_1.Coin.fromJSON(object.finalUserPoolShares)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.poolSharesIn !== undefined &&
            (obj.poolSharesIn = message.poolSharesIn
                ? coin_1.Coin.toJSON(message.poolSharesIn)
                : undefined);
        if (message.tokensOut) {
            obj.tokensOut = message.tokensOut.map((e) => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.tokensOut = [];
        }
        if (message.fees) {
            obj.fees = message.fees.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.fees = [];
        }
        message.finalPool !== undefined &&
            (obj.finalPool = message.finalPool
                ? pool_1.Pool.toJSON(message.finalPool)
                : undefined);
        message.finalUserPoolShares !== undefined &&
            (obj.finalUserPoolShares = message.finalUserPoolShares
                ? coin_1.Coin.toJSON(message.finalUserPoolShares)
                : undefined);
        return obj;
    },
    create(base) {
        return exports.EventPoolExited.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseEventPoolExited();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.poolSharesIn =
            object.poolSharesIn !== undefined && object.poolSharesIn !== null
                ? coin_1.Coin.fromPartial(object.poolSharesIn)
                : undefined;
        message.tokensOut = ((_b = object.tokensOut) === null || _b === void 0 ? void 0 : _b.map((e) => coin_1.Coin.fromPartial(e))) || [];
        message.fees = ((_c = object.fees) === null || _c === void 0 ? void 0 : _c.map((e) => coin_1.Coin.fromPartial(e))) || [];
        message.finalPool =
            object.finalPool !== undefined && object.finalPool !== null
                ? pool_1.Pool.fromPartial(object.finalPool)
                : undefined;
        message.finalUserPoolShares =
            object.finalUserPoolShares !== undefined &&
                object.finalUserPoolShares !== null
                ? coin_1.Coin.fromPartial(object.finalUserPoolShares)
                : undefined;
        return message;
    },
};
function createBaseEventAssetsSwapped() {
    return {
        address: "",
        tokenIn: undefined,
        tokenOut: undefined,
        fee: undefined,
        finalPool: undefined,
    };
}
exports.EventAssetsSwapped = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.tokenIn !== undefined) {
            coin_1.Coin.encode(message.tokenIn, writer.uint32(18).fork()).ldelim();
        }
        if (message.tokenOut !== undefined) {
            coin_1.Coin.encode(message.tokenOut, writer.uint32(26).fork()).ldelim();
        }
        if (message.fee !== undefined) {
            coin_1.Coin.encode(message.fee, writer.uint32(34).fork()).ldelim();
        }
        if (message.finalPool !== undefined) {
            pool_1.Pool.encode(message.finalPool, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventAssetsSwapped();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.address = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.tokenIn = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.tokenOut = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.fee = coin_1.Coin.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.finalPool = pool_1.Pool.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            address: isSet(object.address) ? String(object.address) : "",
            tokenIn: isSet(object.tokenIn)
                ? coin_1.Coin.fromJSON(object.tokenIn)
                : undefined,
            tokenOut: isSet(object.tokenOut)
                ? coin_1.Coin.fromJSON(object.tokenOut)
                : undefined,
            fee: isSet(object.fee) ? coin_1.Coin.fromJSON(object.fee) : undefined,
            finalPool: isSet(object.finalPool)
                ? pool_1.Pool.fromJSON(object.finalPool)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.tokenIn !== undefined &&
            (obj.tokenIn = message.tokenIn ? coin_1.Coin.toJSON(message.tokenIn) : undefined);
        message.tokenOut !== undefined &&
            (obj.tokenOut = message.tokenOut
                ? coin_1.Coin.toJSON(message.tokenOut)
                : undefined);
        message.fee !== undefined &&
            (obj.fee = message.fee ? coin_1.Coin.toJSON(message.fee) : undefined);
        message.finalPool !== undefined &&
            (obj.finalPool = message.finalPool
                ? pool_1.Pool.toJSON(message.finalPool)
                : undefined);
        return obj;
    },
    create(base) {
        return exports.EventAssetsSwapped.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEventAssetsSwapped();
        message.address = (_a = object.address) !== null && _a !== void 0 ? _a : "";
        message.tokenIn =
            object.tokenIn !== undefined && object.tokenIn !== null
                ? coin_1.Coin.fromPartial(object.tokenIn)
                : undefined;
        message.tokenOut =
            object.tokenOut !== undefined && object.tokenOut !== null
                ? coin_1.Coin.fromPartial(object.tokenOut)
                : undefined;
        message.fee =
            object.fee !== undefined && object.fee !== null
                ? coin_1.Coin.fromPartial(object.fee)
                : undefined;
        message.finalPool =
            object.finalPool !== undefined && object.finalPool !== null
                ? pool_1.Pool.fromPartial(object.finalPool)
                : undefined;
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=event.js.map