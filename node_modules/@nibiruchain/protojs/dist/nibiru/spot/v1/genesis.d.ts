import Long from "long";
import _m0 from "protobufjs/minimal";
import { Params } from "./params";
import { Pool } from "./pool";
export declare const protobufPackage = "nibiru.spot.v1";
/** GenesisState defines the spot module's genesis state. */
export interface GenesisState {
    /** params defines all the parameters of the module. */
    params?: Params;
    /** pools defines all the pools of the module. */
    pools: Pool[];
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    create<I extends {
        params?: {
            startingPoolNumber?: string | number | Long.Long | undefined;
            poolCreationFee?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
            whitelistedAsset?: string[] | undefined;
        } | undefined;
        pools?: {
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        params?: ({
            startingPoolNumber?: string | number | Long.Long | undefined;
            poolCreationFee?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
            whitelistedAsset?: string[] | undefined;
        } & {
            startingPoolNumber?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K in Exclude<keyof I["params"]["startingPoolNumber"], keyof Long.Long>]: never; }) | undefined;
            poolCreationFee?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_1 in Exclude<keyof I["params"]["poolCreationFee"][number], keyof import("../../../cosmos/base/v1beta1/coin").Coin>]: never; })[] & { [K_2 in Exclude<keyof I["params"]["poolCreationFee"], keyof {
                denom?: string | undefined;
                amount?: string | undefined;
            }[]>]: never; }) | undefined;
            whitelistedAsset?: (string[] & string[] & { [K_3 in Exclude<keyof I["params"]["whitelistedAsset"], keyof string[]>]: never; }) | undefined;
        } & { [K_4 in Exclude<keyof I["params"], keyof Params>]: never; }) | undefined;
        pools?: ({
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] & ({
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            id?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K_5 in Exclude<keyof I["pools"][number]["id"], keyof Long.Long>]: never; }) | undefined;
            address?: string | undefined;
            poolParams?: ({
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & { [K_6 in Exclude<keyof I["pools"][number]["poolParams"], keyof import("./pool").PoolParams>]: never; }) | undefined;
            poolAssets?: ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] & ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            } & {
                token?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & { [K_7 in Exclude<keyof I["pools"][number]["poolAssets"][number]["token"], keyof import("../../../cosmos/base/v1beta1/coin").Coin>]: never; }) | undefined;
                weight?: string | undefined;
            } & { [K_8 in Exclude<keyof I["pools"][number]["poolAssets"][number], keyof import("./pool").PoolAsset>]: never; })[] & { [K_9 in Exclude<keyof I["pools"][number]["poolAssets"], keyof {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[]>]: never; }) | undefined;
            totalWeight?: string | undefined;
            totalShares?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_10 in Exclude<keyof I["pools"][number]["totalShares"], keyof import("../../../cosmos/base/v1beta1/coin").Coin>]: never; }) | undefined;
        } & { [K_11 in Exclude<keyof I["pools"][number], keyof Pool>]: never; })[] & { [K_12 in Exclude<keyof I["pools"], keyof {
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_13 in Exclude<keyof I, keyof GenesisState>]: never; }>(base?: I | undefined): GenesisState;
    fromPartial<I_1 extends {
        params?: {
            startingPoolNumber?: string | number | Long.Long | undefined;
            poolCreationFee?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
            whitelistedAsset?: string[] | undefined;
        } | undefined;
        pools?: {
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] | undefined;
    } & {
        params?: ({
            startingPoolNumber?: string | number | Long.Long | undefined;
            poolCreationFee?: {
                denom?: string | undefined;
                amount?: string | undefined;
            }[] | undefined;
            whitelistedAsset?: string[] | undefined;
        } & {
            startingPoolNumber?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K_14 in Exclude<keyof I_1["params"]["startingPoolNumber"], keyof Long.Long>]: never; }) | undefined;
            poolCreationFee?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            }[] & ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_15 in Exclude<keyof I_1["params"]["poolCreationFee"][number], keyof import("../../../cosmos/base/v1beta1/coin").Coin>]: never; })[] & { [K_16 in Exclude<keyof I_1["params"]["poolCreationFee"], keyof {
                denom?: string | undefined;
                amount?: string | undefined;
            }[]>]: never; }) | undefined;
            whitelistedAsset?: (string[] & string[] & { [K_17 in Exclude<keyof I_1["params"]["whitelistedAsset"], keyof string[]>]: never; }) | undefined;
        } & { [K_18 in Exclude<keyof I_1["params"], keyof Params>]: never; }) | undefined;
        pools?: ({
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[] & ({
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            id?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & { [K_19 in Exclude<keyof I_1["pools"][number]["id"], keyof Long.Long>]: never; }) | undefined;
            address?: string | undefined;
            poolParams?: ({
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } & { [K_20 in Exclude<keyof I_1["pools"][number]["poolParams"], keyof import("./pool").PoolParams>]: never; }) | undefined;
            poolAssets?: ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] & ({
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            } & {
                token?: ({
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } & { [K_21 in Exclude<keyof I_1["pools"][number]["poolAssets"][number]["token"], keyof import("../../../cosmos/base/v1beta1/coin").Coin>]: never; }) | undefined;
                weight?: string | undefined;
            } & { [K_22 in Exclude<keyof I_1["pools"][number]["poolAssets"][number], keyof import("./pool").PoolAsset>]: never; })[] & { [K_23 in Exclude<keyof I_1["pools"][number]["poolAssets"], keyof {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[]>]: never; }) | undefined;
            totalWeight?: string | undefined;
            totalShares?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_24 in Exclude<keyof I_1["pools"][number]["totalShares"], keyof import("../../../cosmos/base/v1beta1/coin").Coin>]: never; }) | undefined;
        } & { [K_25 in Exclude<keyof I_1["pools"][number], keyof Pool>]: never; })[] & { [K_26 in Exclude<keyof I_1["pools"], keyof {
            id?: string | number | Long.Long | undefined;
            address?: string | undefined;
            poolParams?: {
                swapFee?: string | undefined;
                exitFee?: string | undefined;
                A?: string | undefined;
                poolType?: import("./pool").PoolType | undefined;
            } | undefined;
            poolAssets?: {
                token?: {
                    denom?: string | undefined;
                    amount?: string | undefined;
                } | undefined;
                weight?: string | undefined;
            }[] | undefined;
            totalWeight?: string | undefined;
            totalShares?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_27 in Exclude<keyof I_1, keyof GenesisState>]: never; }>(object: I_1): GenesisState;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
//# sourceMappingURL=genesis.d.ts.map