import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
export declare const protobufPackage = "nibiru.spot.v1";
/**
 * - `balancer`: Balancer are pools defined by the equation xy=k, extended by
 * the weighs introduced by Balancer.
 * - `stableswap`: Stableswap pools are defined by a combination of
 * constant-product and constant-sum pool
 */
export declare enum PoolType {
    BALANCER = 0,
    STABLESWAP = 1,
    UNRECOGNIZED = -1
}
export declare function poolTypeFromJSON(object: any): PoolType;
export declare function poolTypeToJSON(object: PoolType): string;
/** Configuration parameters for the pool. */
export interface PoolParams {
    swapFee: string;
    exitFee: string;
    /**
     * Amplification Parameter (A): Larger value of A make the curve better
     * resemble a straight line in the center (when pool is near balance).  Highly
     * volatile assets should use a lower value, while assets that are closer
     * together may be best with a higher value. This is only used if the
     * pool_type is set to 1 (stableswap)
     */
    A: string;
    poolType: PoolType;
}
/** Which assets the pool contains. */
export interface PoolAsset {
    /**
     * Coins we are talking about,
     * the denomination must be unique amongst all PoolAssets for this pool.
     */
    token?: Coin;
    /** Weight that is not normalized. This weight must be less than 2^50 */
    weight: string;
}
export interface Pool {
    /** The pool id. */
    id: Long;
    /** The pool account address. */
    address: string;
    /** Fees and other pool-specific parameters. */
    poolParams?: PoolParams;
    /**
     * These are assumed to be sorted by denomiation.
     * They contain the pool asset and the information about the weight
     */
    poolAssets: PoolAsset[];
    /** sum of all non-normalized pool weights */
    totalWeight: string;
    /** sum of all LP tokens sent out */
    totalShares?: Coin;
}
export declare const PoolParams: {
    encode(message: PoolParams, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PoolParams;
    fromJSON(object: any): PoolParams;
    toJSON(message: PoolParams): unknown;
    create<I extends {
        swapFee?: string | undefined;
        exitFee?: string | undefined;
        A?: string | undefined;
        poolType?: PoolType | undefined;
    } & {
        swapFee?: string | undefined;
        exitFee?: string | undefined;
        A?: string | undefined;
        poolType?: PoolType | undefined;
    } & { [K in Exclude<keyof I, keyof PoolParams>]: never; }>(base?: I | undefined): PoolParams;
    fromPartial<I_1 extends {
        swapFee?: string | undefined;
        exitFee?: string | undefined;
        A?: string | undefined;
        poolType?: PoolType | undefined;
    } & {
        swapFee?: string | undefined;
        exitFee?: string | undefined;
        A?: string | undefined;
        poolType?: PoolType | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof PoolParams>]: never; }>(object: I_1): PoolParams;
};
export declare const PoolAsset: {
    encode(message: PoolAsset, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PoolAsset;
    fromJSON(object: any): PoolAsset;
    toJSON(message: PoolAsset): unknown;
    create<I extends {
        token?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        weight?: string | undefined;
    } & {
        token?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["token"], keyof Coin>]: never; }) | undefined;
        weight?: string | undefined;
    } & { [K_1 in Exclude<keyof I, keyof PoolAsset>]: never; }>(base?: I | undefined): PoolAsset;
    fromPartial<I_1 extends {
        token?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        weight?: string | undefined;
    } & {
        token?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_2 in Exclude<keyof I_1["token"], keyof Coin>]: never; }) | undefined;
        weight?: string | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof PoolAsset>]: never; }>(object: I_1): PoolAsset;
};
export declare const Pool: {
    encode(message: Pool, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Pool;
    fromJSON(object: any): Pool;
    toJSON(message: Pool): unknown;
    create<I extends {
        id?: string | number | Long.Long | undefined;
        address?: string | undefined;
        poolParams?: {
            swapFee?: string | undefined;
            exitFee?: string | undefined;
            A?: string | undefined;
            poolType?: PoolType | undefined;
        } | undefined;
        poolAssets?: {
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[] | undefined;
        totalWeight?: string | undefined;
        totalShares?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        id?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & { [K in Exclude<keyof I["id"], keyof Long.Long>]: never; }) | undefined;
        address?: string | undefined;
        poolParams?: ({
            swapFee?: string | undefined;
            exitFee?: string | undefined;
            A?: string | undefined;
            poolType?: PoolType | undefined;
        } & {
            swapFee?: string | undefined;
            exitFee?: string | undefined;
            A?: string | undefined;
            poolType?: PoolType | undefined;
        } & { [K_1 in Exclude<keyof I["poolParams"], keyof PoolParams>]: never; }) | undefined;
        poolAssets?: ({
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[] & ({
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        } & {
            token?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_2 in Exclude<keyof I["poolAssets"][number]["token"], keyof Coin>]: never; }) | undefined;
            weight?: string | undefined;
        } & { [K_3 in Exclude<keyof I["poolAssets"][number], keyof PoolAsset>]: never; })[] & { [K_4 in Exclude<keyof I["poolAssets"], keyof {
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[]>]: never; }) | undefined;
        totalWeight?: string | undefined;
        totalShares?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_5 in Exclude<keyof I["totalShares"], keyof Coin>]: never; }) | undefined;
    } & { [K_6 in Exclude<keyof I, keyof Pool>]: never; }>(base?: I | undefined): Pool;
    fromPartial<I_1 extends {
        id?: string | number | Long.Long | undefined;
        address?: string | undefined;
        poolParams?: {
            swapFee?: string | undefined;
            exitFee?: string | undefined;
            A?: string | undefined;
            poolType?: PoolType | undefined;
        } | undefined;
        poolAssets?: {
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[] | undefined;
        totalWeight?: string | undefined;
        totalShares?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
    } & {
        id?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & { [K_7 in Exclude<keyof I_1["id"], keyof Long.Long>]: never; }) | undefined;
        address?: string | undefined;
        poolParams?: ({
            swapFee?: string | undefined;
            exitFee?: string | undefined;
            A?: string | undefined;
            poolType?: PoolType | undefined;
        } & {
            swapFee?: string | undefined;
            exitFee?: string | undefined;
            A?: string | undefined;
            poolType?: PoolType | undefined;
        } & { [K_8 in Exclude<keyof I_1["poolParams"], keyof PoolParams>]: never; }) | undefined;
        poolAssets?: ({
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[] & ({
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        } & {
            token?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_9 in Exclude<keyof I_1["poolAssets"][number]["token"], keyof Coin>]: never; }) | undefined;
            weight?: string | undefined;
        } & { [K_10 in Exclude<keyof I_1["poolAssets"][number], keyof PoolAsset>]: never; })[] & { [K_11 in Exclude<keyof I_1["poolAssets"], keyof {
            token?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            weight?: string | undefined;
        }[]>]: never; }) | undefined;
        totalWeight?: string | undefined;
        totalShares?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_12 in Exclude<keyof I_1["totalShares"], keyof Coin>]: never; }) | undefined;
    } & { [K_13 in Exclude<keyof I_1, keyof Pool>]: never; }>(object: I_1): Pool;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
//# sourceMappingURL=pool.d.ts.map