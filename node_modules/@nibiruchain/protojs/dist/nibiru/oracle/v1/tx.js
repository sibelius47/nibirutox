"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgServiceName = exports.MsgDelegateFeedConsentResponse = exports.MsgDelegateFeedConsent = exports.MsgAggregateExchangeRateVoteResponse = exports.MsgAggregateExchangeRateVote = exports.MsgAggregateExchangeRatePrevoteResponse = exports.MsgAggregateExchangeRatePrevote = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "nibiru.oracle.v1";
function createBaseMsgAggregateExchangeRatePrevote() {
    return { hash: "", feeder: "", validator: "" };
}
exports.MsgAggregateExchangeRatePrevote = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.hash !== "") {
            writer.uint32(10).string(message.hash);
        }
        if (message.feeder !== "") {
            writer.uint32(18).string(message.feeder);
        }
        if (message.validator !== "") {
            writer.uint32(26).string(message.validator);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAggregateExchangeRatePrevote();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.hash = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.feeder = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.validator = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            hash: isSet(object.hash) ? String(object.hash) : "",
            feeder: isSet(object.feeder) ? String(object.feeder) : "",
            validator: isSet(object.validator) ? String(object.validator) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.hash !== undefined && (obj.hash = message.hash);
        message.feeder !== undefined && (obj.feeder = message.feeder);
        message.validator !== undefined && (obj.validator = message.validator);
        return obj;
    },
    create(base) {
        return exports.MsgAggregateExchangeRatePrevote.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseMsgAggregateExchangeRatePrevote();
        message.hash = (_a = object.hash) !== null && _a !== void 0 ? _a : "";
        message.feeder = (_b = object.feeder) !== null && _b !== void 0 ? _b : "";
        message.validator = (_c = object.validator) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseMsgAggregateExchangeRatePrevoteResponse() {
    return {};
}
exports.MsgAggregateExchangeRatePrevoteResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAggregateExchangeRatePrevoteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgAggregateExchangeRatePrevoteResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgAggregateExchangeRatePrevoteResponse();
        return message;
    },
};
function createBaseMsgAggregateExchangeRateVote() {
    return { salt: "", exchangeRates: "", feeder: "", validator: "" };
}
exports.MsgAggregateExchangeRateVote = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.salt !== "") {
            writer.uint32(10).string(message.salt);
        }
        if (message.exchangeRates !== "") {
            writer.uint32(18).string(message.exchangeRates);
        }
        if (message.feeder !== "") {
            writer.uint32(26).string(message.feeder);
        }
        if (message.validator !== "") {
            writer.uint32(34).string(message.validator);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAggregateExchangeRateVote();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.salt = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.exchangeRates = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.feeder = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.validator = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            salt: isSet(object.salt) ? String(object.salt) : "",
            exchangeRates: isSet(object.exchangeRates)
                ? String(object.exchangeRates)
                : "",
            feeder: isSet(object.feeder) ? String(object.feeder) : "",
            validator: isSet(object.validator) ? String(object.validator) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.salt !== undefined && (obj.salt = message.salt);
        message.exchangeRates !== undefined &&
            (obj.exchangeRates = message.exchangeRates);
        message.feeder !== undefined && (obj.feeder = message.feeder);
        message.validator !== undefined && (obj.validator = message.validator);
        return obj;
    },
    create(base) {
        return exports.MsgAggregateExchangeRateVote.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c, _d;
        const message = createBaseMsgAggregateExchangeRateVote();
        message.salt = (_a = object.salt) !== null && _a !== void 0 ? _a : "";
        message.exchangeRates = (_b = object.exchangeRates) !== null && _b !== void 0 ? _b : "";
        message.feeder = (_c = object.feeder) !== null && _c !== void 0 ? _c : "";
        message.validator = (_d = object.validator) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseMsgAggregateExchangeRateVoteResponse() {
    return {};
}
exports.MsgAggregateExchangeRateVoteResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAggregateExchangeRateVoteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgAggregateExchangeRateVoteResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgAggregateExchangeRateVoteResponse();
        return message;
    },
};
function createBaseMsgDelegateFeedConsent() {
    return { operator: "", delegate: "" };
}
exports.MsgDelegateFeedConsent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.operator !== "") {
            writer.uint32(10).string(message.operator);
        }
        if (message.delegate !== "") {
            writer.uint32(18).string(message.delegate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDelegateFeedConsent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.operator = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.delegate = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            operator: isSet(object.operator) ? String(object.operator) : "",
            delegate: isSet(object.delegate) ? String(object.delegate) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.operator !== undefined && (obj.operator = message.operator);
        message.delegate !== undefined && (obj.delegate = message.delegate);
        return obj;
    },
    create(base) {
        return exports.MsgDelegateFeedConsent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseMsgDelegateFeedConsent();
        message.operator = (_a = object.operator) !== null && _a !== void 0 ? _a : "";
        message.delegate = (_b = object.delegate) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseMsgDelegateFeedConsentResponse() {
    return {};
}
exports.MsgDelegateFeedConsentResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgDelegateFeedConsentResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.MsgDelegateFeedConsentResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseMsgDelegateFeedConsentResponse();
        return message;
    },
};
exports.MsgServiceName = "nibiru.oracle.v1.Msg";
class MsgClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.MsgServiceName;
        this.rpc = rpc;
        this.AggregateExchangeRatePrevote =
            this.AggregateExchangeRatePrevote.bind(this);
        this.AggregateExchangeRateVote = this.AggregateExchangeRateVote.bind(this);
        this.DelegateFeedConsent = this.DelegateFeedConsent.bind(this);
    }
    AggregateExchangeRatePrevote(request) {
        const data = exports.MsgAggregateExchangeRatePrevote.encode(request).finish();
        const promise = this.rpc.request(this.service, "AggregateExchangeRatePrevote", data);
        return promise.then((data) => exports.MsgAggregateExchangeRatePrevoteResponse.decode(minimal_1.default.Reader.create(data)));
    }
    AggregateExchangeRateVote(request) {
        const data = exports.MsgAggregateExchangeRateVote.encode(request).finish();
        const promise = this.rpc.request(this.service, "AggregateExchangeRateVote", data);
        return promise.then((data) => exports.MsgAggregateExchangeRateVoteResponse.decode(minimal_1.default.Reader.create(data)));
    }
    DelegateFeedConsent(request) {
        const data = exports.MsgDelegateFeedConsent.encode(request).finish();
        const promise = this.rpc.request(this.service, "DelegateFeedConsent", data);
        return promise.then((data) => exports.MsgDelegateFeedConsentResponse.decode(minimal_1.default.Reader.create(data)));
    }
}
exports.MsgClientImpl = MsgClientImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=tx.js.map