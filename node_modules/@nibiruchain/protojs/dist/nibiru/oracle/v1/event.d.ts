import Long from "long";
import _m0 from "protobufjs/minimal";
import { ExchangeRateTuple } from "./oracle";
export declare const protobufPackage = "nibiru.oracle.v1";
/** Emitted when a price is posted */
export interface EventPriceUpdate {
    pair: string;
    price: string;
    timestampMs: Long;
}
/** Emitted when a valoper delegates oracle voting rights to a feeder address. */
export interface EventDelegateFeederConsent {
    /** Validator is the Bech32 address that is delegating voting rights. */
    validator: string;
    /**
     * Feeder is the delegate or representative that will be able to send
     * vote and prevote transaction messages.
     */
    feeder: string;
}
/** Emitted by MsgAggregateExchangeVote when an aggregate vote is added to state */
export interface EventAggregateVote {
    /** Validator is the Bech32 address to which the vote will be credited. */
    validator: string;
    /**
     * Feeder is the delegate or representative that will send vote and prevote
     * transaction messages on behalf of the voting validator.
     */
    feeder: string;
    prices: ExchangeRateTuple[];
}
/**
 * Emitted by MsgAggregateExchangePrevote when an aggregate prevote is added
 * to state
 */
export interface EventAggregatePrevote {
    /** Validator is the Bech32 address to which the vote will be credited. */
    validator: string;
    /**
     * Feeder is the delegate or representative that will send vote and prevote
     * transaction messages on behalf of the voting validator.
     */
    feeder: string;
}
export declare const EventPriceUpdate: {
    encode(message: EventPriceUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventPriceUpdate;
    fromJSON(object: any): EventPriceUpdate;
    toJSON(message: EventPriceUpdate): unknown;
    create<I extends {
        pair?: string | undefined;
        price?: string | undefined;
        timestampMs?: string | number | Long.Long | undefined;
    } & {
        pair?: string | undefined;
        price?: string | undefined;
        timestampMs?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & { [K in Exclude<keyof I["timestampMs"], keyof Long.Long>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, keyof EventPriceUpdate>]: never; }>(base?: I | undefined): EventPriceUpdate;
    fromPartial<I_1 extends {
        pair?: string | undefined;
        price?: string | undefined;
        timestampMs?: string | number | Long.Long | undefined;
    } & {
        pair?: string | undefined;
        price?: string | undefined;
        timestampMs?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & { [K_2 in Exclude<keyof I_1["timestampMs"], keyof Long.Long>]: never; }) | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof EventPriceUpdate>]: never; }>(object: I_1): EventPriceUpdate;
};
export declare const EventDelegateFeederConsent: {
    encode(message: EventDelegateFeederConsent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventDelegateFeederConsent;
    fromJSON(object: any): EventDelegateFeederConsent;
    toJSON(message: EventDelegateFeederConsent): unknown;
    create<I extends {
        validator?: string | undefined;
        feeder?: string | undefined;
    } & {
        validator?: string | undefined;
        feeder?: string | undefined;
    } & { [K in Exclude<keyof I, keyof EventDelegateFeederConsent>]: never; }>(base?: I | undefined): EventDelegateFeederConsent;
    fromPartial<I_1 extends {
        validator?: string | undefined;
        feeder?: string | undefined;
    } & {
        validator?: string | undefined;
        feeder?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof EventDelegateFeederConsent>]: never; }>(object: I_1): EventDelegateFeederConsent;
};
export declare const EventAggregateVote: {
    encode(message: EventAggregateVote, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventAggregateVote;
    fromJSON(object: any): EventAggregateVote;
    toJSON(message: EventAggregateVote): unknown;
    create<I extends {
        validator?: string | undefined;
        feeder?: string | undefined;
        prices?: {
            pair?: string | undefined;
            exchangeRate?: string | undefined;
        }[] | undefined;
    } & {
        validator?: string | undefined;
        feeder?: string | undefined;
        prices?: ({
            pair?: string | undefined;
            exchangeRate?: string | undefined;
        }[] & ({
            pair?: string | undefined;
            exchangeRate?: string | undefined;
        } & {
            pair?: string | undefined;
            exchangeRate?: string | undefined;
        } & { [K in Exclude<keyof I["prices"][number], keyof ExchangeRateTuple>]: never; })[] & { [K_1 in Exclude<keyof I["prices"], keyof {
            pair?: string | undefined;
            exchangeRate?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, keyof EventAggregateVote>]: never; }>(base?: I | undefined): EventAggregateVote;
    fromPartial<I_1 extends {
        validator?: string | undefined;
        feeder?: string | undefined;
        prices?: {
            pair?: string | undefined;
            exchangeRate?: string | undefined;
        }[] | undefined;
    } & {
        validator?: string | undefined;
        feeder?: string | undefined;
        prices?: ({
            pair?: string | undefined;
            exchangeRate?: string | undefined;
        }[] & ({
            pair?: string | undefined;
            exchangeRate?: string | undefined;
        } & {
            pair?: string | undefined;
            exchangeRate?: string | undefined;
        } & { [K_3 in Exclude<keyof I_1["prices"][number], keyof ExchangeRateTuple>]: never; })[] & { [K_4 in Exclude<keyof I_1["prices"], keyof {
            pair?: string | undefined;
            exchangeRate?: string | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_5 in Exclude<keyof I_1, keyof EventAggregateVote>]: never; }>(object: I_1): EventAggregateVote;
};
export declare const EventAggregatePrevote: {
    encode(message: EventAggregatePrevote, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventAggregatePrevote;
    fromJSON(object: any): EventAggregatePrevote;
    toJSON(message: EventAggregatePrevote): unknown;
    create<I extends {
        validator?: string | undefined;
        feeder?: string | undefined;
    } & {
        validator?: string | undefined;
        feeder?: string | undefined;
    } & { [K in Exclude<keyof I, keyof EventAggregatePrevote>]: never; }>(base?: I | undefined): EventAggregatePrevote;
    fromPartial<I_1 extends {
        validator?: string | undefined;
        feeder?: string | undefined;
    } & {
        validator?: string | undefined;
        feeder?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof EventAggregatePrevote>]: never; }>(object: I_1): EventAggregatePrevote;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
//# sourceMappingURL=event.d.ts.map