"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventAggregatePrevote = exports.EventAggregateVote = exports.EventDelegateFeederConsent = exports.EventPriceUpdate = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const oracle_1 = require("./oracle");
exports.protobufPackage = "nibiru.oracle.v1";
function createBaseEventPriceUpdate() {
    return { pair: "", price: "", timestampMs: long_1.default.ZERO };
}
exports.EventPriceUpdate = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pair !== "") {
            writer.uint32(10).string(message.pair);
        }
        if (message.price !== "") {
            writer.uint32(18).string(message.price);
        }
        if (!message.timestampMs.isZero()) {
            writer.uint32(24).int64(message.timestampMs);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventPriceUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.pair = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.price = reader.string();
                    continue;
                case 3:
                    if (tag !== 24) {
                        break;
                    }
                    message.timestampMs = reader.int64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            pair: isSet(object.pair) ? String(object.pair) : "",
            price: isSet(object.price) ? String(object.price) : "",
            timestampMs: isSet(object.timestampMs)
                ? long_1.default.fromValue(object.timestampMs)
                : long_1.default.ZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.pair !== undefined && (obj.pair = message.pair);
        message.price !== undefined && (obj.price = message.price);
        message.timestampMs !== undefined &&
            (obj.timestampMs = (message.timestampMs || long_1.default.ZERO).toString());
        return obj;
    },
    create(base) {
        return exports.EventPriceUpdate.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventPriceUpdate();
        message.pair = (_a = object.pair) !== null && _a !== void 0 ? _a : "";
        message.price = (_b = object.price) !== null && _b !== void 0 ? _b : "";
        message.timestampMs =
            object.timestampMs !== undefined && object.timestampMs !== null
                ? long_1.default.fromValue(object.timestampMs)
                : long_1.default.ZERO;
        return message;
    },
};
function createBaseEventDelegateFeederConsent() {
    return { validator: "", feeder: "" };
}
exports.EventDelegateFeederConsent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.validator !== "") {
            writer.uint32(10).string(message.validator);
        }
        if (message.feeder !== "") {
            writer.uint32(18).string(message.feeder);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventDelegateFeederConsent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.validator = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.feeder = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            validator: isSet(object.validator) ? String(object.validator) : "",
            feeder: isSet(object.feeder) ? String(object.feeder) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.validator !== undefined && (obj.validator = message.validator);
        message.feeder !== undefined && (obj.feeder = message.feeder);
        return obj;
    },
    create(base) {
        return exports.EventDelegateFeederConsent.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventDelegateFeederConsent();
        message.validator = (_a = object.validator) !== null && _a !== void 0 ? _a : "";
        message.feeder = (_b = object.feeder) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseEventAggregateVote() {
    return { validator: "", feeder: "", prices: [] };
}
exports.EventAggregateVote = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.validator !== "") {
            writer.uint32(10).string(message.validator);
        }
        if (message.feeder !== "") {
            writer.uint32(18).string(message.feeder);
        }
        for (const v of message.prices) {
            oracle_1.ExchangeRateTuple.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventAggregateVote();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.validator = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.feeder = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.prices.push(oracle_1.ExchangeRateTuple.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            validator: isSet(object.validator) ? String(object.validator) : "",
            feeder: isSet(object.feeder) ? String(object.feeder) : "",
            prices: Array.isArray(object === null || object === void 0 ? void 0 : object.prices)
                ? object.prices.map((e) => oracle_1.ExchangeRateTuple.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.validator !== undefined && (obj.validator = message.validator);
        message.feeder !== undefined && (obj.feeder = message.feeder);
        if (message.prices) {
            obj.prices = message.prices.map((e) => e ? oracle_1.ExchangeRateTuple.toJSON(e) : undefined);
        }
        else {
            obj.prices = [];
        }
        return obj;
    },
    create(base) {
        return exports.EventAggregateVote.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b, _c;
        const message = createBaseEventAggregateVote();
        message.validator = (_a = object.validator) !== null && _a !== void 0 ? _a : "";
        message.feeder = (_b = object.feeder) !== null && _b !== void 0 ? _b : "";
        message.prices =
            ((_c = object.prices) === null || _c === void 0 ? void 0 : _c.map((e) => oracle_1.ExchangeRateTuple.fromPartial(e))) || [];
        return message;
    },
};
function createBaseEventAggregatePrevote() {
    return { validator: "", feeder: "" };
}
exports.EventAggregatePrevote = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.validator !== "") {
            writer.uint32(10).string(message.validator);
        }
        if (message.feeder !== "") {
            writer.uint32(18).string(message.feeder);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventAggregatePrevote();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.validator = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.feeder = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            validator: isSet(object.validator) ? String(object.validator) : "",
            feeder: isSet(object.feeder) ? String(object.feeder) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.validator !== undefined && (obj.validator = message.validator);
        message.feeder !== undefined && (obj.feeder = message.feeder);
        return obj;
    },
    create(base) {
        return exports.EventAggregatePrevote.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a, _b;
        const message = createBaseEventAggregatePrevote();
        message.validator = (_a = object.validator) !== null && _a !== void 0 ? _a : "";
        message.feeder = (_b = object.feeder) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=event.js.map