"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventEpochEnd = exports.EventEpochStart = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const timestamp_1 = require("../../../google/protobuf/timestamp");
exports.protobufPackage = "nibiru.epochs.v1";
function createBaseEventEpochStart() {
    return { epochNumber: long_1.default.UZERO, epochStartTime: undefined };
}
exports.EventEpochStart = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.epochNumber.isZero()) {
            writer.uint32(8).uint64(message.epochNumber);
        }
        if (message.epochStartTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.epochStartTime), writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventEpochStart();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.epochNumber = reader.uint64();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.epochStartTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            epochNumber: isSet(object.epochNumber)
                ? long_1.default.fromValue(object.epochNumber)
                : long_1.default.UZERO,
            epochStartTime: isSet(object.epochStartTime)
                ? fromJsonTimestamp(object.epochStartTime)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.epochNumber !== undefined &&
            (obj.epochNumber = (message.epochNumber || long_1.default.UZERO).toString());
        message.epochStartTime !== undefined &&
            (obj.epochStartTime = message.epochStartTime.toISOString());
        return obj;
    },
    create(base) {
        return exports.EventEpochStart.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseEventEpochStart();
        message.epochNumber =
            object.epochNumber !== undefined && object.epochNumber !== null
                ? long_1.default.fromValue(object.epochNumber)
                : long_1.default.UZERO;
        message.epochStartTime = (_a = object.epochStartTime) !== null && _a !== void 0 ? _a : undefined;
        return message;
    },
};
function createBaseEventEpochEnd() {
    return { epochNumber: long_1.default.UZERO };
}
exports.EventEpochEnd = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.epochNumber.isZero()) {
            writer.uint32(8).uint64(message.epochNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEventEpochEnd();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.epochNumber = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            epochNumber: isSet(object.epochNumber)
                ? long_1.default.fromValue(object.epochNumber)
                : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.epochNumber !== undefined &&
            (obj.epochNumber = (message.epochNumber || long_1.default.UZERO).toString());
        return obj;
    },
    create(base) {
        return exports.EventEpochEnd.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseEventEpochEnd();
        message.epochNumber =
            object.epochNumber !== undefined && object.epochNumber !== null
                ? long_1.default.fromValue(object.epochNumber)
                : long_1.default.UZERO;
        return message;
    },
};
function toTimestamp(date) {
    const seconds = numberToLong(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = (t.seconds.toNumber() || 0) * 1000;
    millis += (t.nanos || 0) / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=event.js.map