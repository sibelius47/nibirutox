import Long from "long";
import _m0 from "protobufjs/minimal";
import { Sudoers } from "./state";
export declare const protobufPackage = "nibiru.sudo.v1";
export interface EventUpdateSudoers {
    sudoers?: Sudoers;
    /** Action is the type of update that occured to the "sudoers" */
    action: string;
}
export declare const EventUpdateSudoers: {
    encode(message: EventUpdateSudoers, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventUpdateSudoers;
    fromJSON(object: any): EventUpdateSudoers;
    toJSON(message: EventUpdateSudoers): unknown;
    create<I extends {
        sudoers?: {
            root?: string | undefined;
            contracts?: string[] | undefined;
        } | undefined;
        action?: string | undefined;
    } & {
        sudoers?: ({
            root?: string | undefined;
            contracts?: string[] | undefined;
        } & {
            root?: string | undefined;
            contracts?: (string[] & string[] & { [K in Exclude<keyof I["sudoers"]["contracts"], keyof string[]>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["sudoers"], keyof Sudoers>]: never; }) | undefined;
        action?: string | undefined;
    } & { [K_2 in Exclude<keyof I, keyof EventUpdateSudoers>]: never; }>(base?: I | undefined): EventUpdateSudoers;
    fromPartial<I_1 extends {
        sudoers?: {
            root?: string | undefined;
            contracts?: string[] | undefined;
        } | undefined;
        action?: string | undefined;
    } & {
        sudoers?: ({
            root?: string | undefined;
            contracts?: string[] | undefined;
        } & {
            root?: string | undefined;
            contracts?: (string[] & string[] & { [K_3 in Exclude<keyof I_1["sudoers"]["contracts"], keyof string[]>]: never; }) | undefined;
        } & { [K_4 in Exclude<keyof I_1["sudoers"], keyof Sudoers>]: never; }) | undefined;
        action?: string | undefined;
    } & { [K_5 in Exclude<keyof I_1, keyof EventUpdateSudoers>]: never; }>(object: I_1): EventUpdateSudoers;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
//# sourceMappingURL=event.d.ts.map