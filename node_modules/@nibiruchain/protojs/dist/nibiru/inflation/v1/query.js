"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryServiceName = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryInflationRateResponse = exports.QueryInflationRateRequest = exports.QueryCirculatingSupplyResponse = exports.QueryCirculatingSupplyRequest = exports.QuerySkippedEpochsResponse = exports.QuerySkippedEpochsRequest = exports.QueryEpochMintProvisionResponse = exports.QueryEpochMintProvisionRequest = exports.QueryPeriodResponse = exports.QueryPeriodRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const genesis_1 = require("./genesis");
exports.protobufPackage = "nibiru.inflation.v1";
function createBaseQueryPeriodRequest() {
    return {};
}
exports.QueryPeriodRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPeriodRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryPeriodRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryPeriodRequest();
        return message;
    },
};
function createBaseQueryPeriodResponse() {
    return { period: long_1.default.UZERO };
}
exports.QueryPeriodResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.period.isZero()) {
            writer.uint32(8).uint64(message.period);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryPeriodResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.period = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            period: isSet(object.period) ? long_1.default.fromValue(object.period) : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.period !== undefined &&
            (obj.period = (message.period || long_1.default.UZERO).toString());
        return obj;
    },
    create(base) {
        return exports.QueryPeriodResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryPeriodResponse();
        message.period =
            object.period !== undefined && object.period !== null
                ? long_1.default.fromValue(object.period)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryEpochMintProvisionRequest() {
    return {};
}
exports.QueryEpochMintProvisionRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryEpochMintProvisionRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryEpochMintProvisionRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryEpochMintProvisionRequest();
        return message;
    },
};
function createBaseQueryEpochMintProvisionResponse() {
    return { epochMintProvision: undefined };
}
exports.QueryEpochMintProvisionResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.epochMintProvision !== undefined) {
            coin_1.DecCoin.encode(message.epochMintProvision, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryEpochMintProvisionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.epochMintProvision = coin_1.DecCoin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            epochMintProvision: isSet(object.epochMintProvision)
                ? coin_1.DecCoin.fromJSON(object.epochMintProvision)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.epochMintProvision !== undefined &&
            (obj.epochMintProvision = message.epochMintProvision
                ? coin_1.DecCoin.toJSON(message.epochMintProvision)
                : undefined);
        return obj;
    },
    create(base) {
        return exports.QueryEpochMintProvisionResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryEpochMintProvisionResponse();
        message.epochMintProvision =
            object.epochMintProvision !== undefined &&
                object.epochMintProvision !== null
                ? coin_1.DecCoin.fromPartial(object.epochMintProvision)
                : undefined;
        return message;
    },
};
function createBaseQuerySkippedEpochsRequest() {
    return {};
}
exports.QuerySkippedEpochsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuerySkippedEpochsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QuerySkippedEpochsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQuerySkippedEpochsRequest();
        return message;
    },
};
function createBaseQuerySkippedEpochsResponse() {
    return { skippedEpochs: long_1.default.UZERO };
}
exports.QuerySkippedEpochsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.skippedEpochs.isZero()) {
            writer.uint32(8).uint64(message.skippedEpochs);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQuerySkippedEpochsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 8) {
                        break;
                    }
                    message.skippedEpochs = reader.uint64();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            skippedEpochs: isSet(object.skippedEpochs)
                ? long_1.default.fromValue(object.skippedEpochs)
                : long_1.default.UZERO,
        };
    },
    toJSON(message) {
        const obj = {};
        message.skippedEpochs !== undefined &&
            (obj.skippedEpochs = (message.skippedEpochs || long_1.default.UZERO).toString());
        return obj;
    },
    create(base) {
        return exports.QuerySkippedEpochsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQuerySkippedEpochsResponse();
        message.skippedEpochs =
            object.skippedEpochs !== undefined && object.skippedEpochs !== null
                ? long_1.default.fromValue(object.skippedEpochs)
                : long_1.default.UZERO;
        return message;
    },
};
function createBaseQueryCirculatingSupplyRequest() {
    return {};
}
exports.QueryCirculatingSupplyRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCirculatingSupplyRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryCirculatingSupplyRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryCirculatingSupplyRequest();
        return message;
    },
};
function createBaseQueryCirculatingSupplyResponse() {
    return { circulatingSupply: undefined };
}
exports.QueryCirculatingSupplyResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.circulatingSupply !== undefined) {
            coin_1.DecCoin.encode(message.circulatingSupply, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryCirculatingSupplyResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.circulatingSupply = coin_1.DecCoin.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            circulatingSupply: isSet(object.circulatingSupply)
                ? coin_1.DecCoin.fromJSON(object.circulatingSupply)
                : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.circulatingSupply !== undefined &&
            (obj.circulatingSupply = message.circulatingSupply
                ? coin_1.DecCoin.toJSON(message.circulatingSupply)
                : undefined);
        return obj;
    },
    create(base) {
        return exports.QueryCirculatingSupplyResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryCirculatingSupplyResponse();
        message.circulatingSupply =
            object.circulatingSupply !== undefined &&
                object.circulatingSupply !== null
                ? coin_1.DecCoin.fromPartial(object.circulatingSupply)
                : undefined;
        return message;
    },
};
function createBaseQueryInflationRateRequest() {
    return {};
}
exports.QueryInflationRateRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryInflationRateRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryInflationRateRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryInflationRateRequest();
        return message;
    },
};
function createBaseQueryInflationRateResponse() {
    return { inflationRate: "" };
}
exports.QueryInflationRateResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.inflationRate !== "") {
            writer.uint32(10).string(message.inflationRate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryInflationRateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.inflationRate = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            inflationRate: isSet(object.inflationRate)
                ? String(object.inflationRate)
                : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.inflationRate !== undefined &&
            (obj.inflationRate = message.inflationRate);
        return obj;
    },
    create(base) {
        return exports.QueryInflationRateResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        var _a;
        const message = createBaseQueryInflationRateResponse();
        message.inflationRate = (_a = object.inflationRate) !== null && _a !== void 0 ? _a : "";
        return message;
    },
};
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(_) {
        return {};
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    create(base) {
        return exports.QueryParamsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            genesis_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.params = genesis_1.Params.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            params: isSet(object.params) ? genesis_1.Params.fromJSON(object.params) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined &&
            (obj.params = message.params ? genesis_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    create(base) {
        return exports.QueryParamsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params =
            object.params !== undefined && object.params !== null
                ? genesis_1.Params.fromPartial(object.params)
                : undefined;
        return message;
    },
};
exports.QueryServiceName = "nibiru.inflation.v1.Query";
class QueryClientImpl {
    constructor(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || exports.QueryServiceName;
        this.rpc = rpc;
        this.Period = this.Period.bind(this);
        this.EpochMintProvision = this.EpochMintProvision.bind(this);
        this.SkippedEpochs = this.SkippedEpochs.bind(this);
        this.CirculatingSupply = this.CirculatingSupply.bind(this);
        this.InflationRate = this.InflationRate.bind(this);
        this.Params = this.Params.bind(this);
    }
    Period(request) {
        const data = exports.QueryPeriodRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Period", data);
        return promise.then((data) => exports.QueryPeriodResponse.decode(minimal_1.default.Reader.create(data)));
    }
    EpochMintProvision(request) {
        const data = exports.QueryEpochMintProvisionRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "EpochMintProvision", data);
        return promise.then((data) => exports.QueryEpochMintProvisionResponse.decode(minimal_1.default.Reader.create(data)));
    }
    SkippedEpochs(request) {
        const data = exports.QuerySkippedEpochsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "SkippedEpochs", data);
        return promise.then((data) => exports.QuerySkippedEpochsResponse.decode(minimal_1.default.Reader.create(data)));
    }
    CirculatingSupply(request) {
        const data = exports.QueryCirculatingSupplyRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "CirculatingSupply", data);
        return promise.then((data) => exports.QueryCirculatingSupplyResponse.decode(minimal_1.default.Reader.create(data)));
    }
    InflationRate(request) {
        const data = exports.QueryInflationRateRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "InflationRate", data);
        return promise.then((data) => exports.QueryInflationRateResponse.decode(minimal_1.default.Reader.create(data)));
    }
    Params(request) {
        const data = exports.QueryParamsRequest.encode(request).finish();
        const promise = this.rpc.request(this.service, "Params", data);
        return promise.then((data) => exports.QueryParamsResponse.decode(minimal_1.default.Reader.create(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
//# sourceMappingURL=query.js.map