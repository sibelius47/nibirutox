import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "nibiru.inflation.v1";
/**
 * InflationDistribution defines the distribution in which inflation is
 * allocated through minting on each epoch (staking, community, strategic). It
 * excludes the team vesting distribution.
 */
export interface InflationDistribution {
    /**
     * staking_rewards defines the proportion of the minted_denom that is
     * to be allocated as staking rewards
     */
    stakingRewards: string;
    /**
     * community_pool defines the proportion of the minted_denom that is to
     * be allocated to the community pool
     */
    communityPool: string;
    /**
     * strategic_reserves defines the proportion of the minted_denom that
     * is to be allocated to the strategic reserves module address
     */
    strategicReserves: string;
}
/**
 * ExponentialCalculation holds factors to calculate exponential inflation on
 * each period. Calculation reference:
 * periodProvision = exponentialDecay
 * f(x)            = a * (1 - r) ^ x + c
 */
export interface ExponentialCalculation {
    /** a defines the initial value */
    a: string;
    /** r defines the reduction factor */
    r: string;
    /** c defines the parameter for long term inflation */
    c: string;
}
export declare const InflationDistribution: {
    encode(message: InflationDistribution, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InflationDistribution;
    fromJSON(object: any): InflationDistribution;
    toJSON(message: InflationDistribution): unknown;
    create<I extends {
        stakingRewards?: string | undefined;
        communityPool?: string | undefined;
        strategicReserves?: string | undefined;
    } & {
        stakingRewards?: string | undefined;
        communityPool?: string | undefined;
        strategicReserves?: string | undefined;
    } & { [K in Exclude<keyof I, keyof InflationDistribution>]: never; }>(base?: I | undefined): InflationDistribution;
    fromPartial<I_1 extends {
        stakingRewards?: string | undefined;
        communityPool?: string | undefined;
        strategicReserves?: string | undefined;
    } & {
        stakingRewards?: string | undefined;
        communityPool?: string | undefined;
        strategicReserves?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof InflationDistribution>]: never; }>(object: I_1): InflationDistribution;
};
export declare const ExponentialCalculation: {
    encode(message: ExponentialCalculation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExponentialCalculation;
    fromJSON(object: any): ExponentialCalculation;
    toJSON(message: ExponentialCalculation): unknown;
    create<I extends {
        a?: string | undefined;
        r?: string | undefined;
        c?: string | undefined;
    } & {
        a?: string | undefined;
        r?: string | undefined;
        c?: string | undefined;
    } & { [K in Exclude<keyof I, keyof ExponentialCalculation>]: never; }>(base?: I | undefined): ExponentialCalculation;
    fromPartial<I_1 extends {
        a?: string | undefined;
        r?: string | undefined;
        c?: string | undefined;
    } & {
        a?: string | undefined;
        r?: string | undefined;
        c?: string | undefined;
    } & { [K_1 in Exclude<keyof I_1, keyof ExponentialCalculation>]: never; }>(object: I_1): ExponentialCalculation;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Long ? string | number | Long : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
//# sourceMappingURL=inflation.d.ts.map