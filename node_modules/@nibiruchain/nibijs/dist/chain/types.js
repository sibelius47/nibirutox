"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.newCoinMapFromCoins = exports.assert = exports.go = exports.WalletHD = exports.parseCoins = exports.newCoins = exports.newCoin = void 0;
const proto_signing_1 = require("@cosmjs/proto-signing");
Object.defineProperty(exports, "newCoin", { enumerable: true, get: function () { return proto_signing_1.coin; } });
Object.defineProperty(exports, "newCoins", { enumerable: true, get: function () { return proto_signing_1.coins; } });
Object.defineProperty(exports, "WalletHD", { enumerable: true, get: function () { return proto_signing_1.DirectSecp256k1HdWallet; } });
Object.defineProperty(exports, "parseCoins", { enumerable: true, get: function () { return proto_signing_1.parseCoins; } });
const error_1 = require("./error");
function go(promise) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            return { res: yield promise, err: undefined };
        }
        catch (err) {
            if ((0, error_1.instanceOfError)(err)) {
                return { res: undefined, err };
            }
            else {
                return { res: undefined, err: new Error(`${err}`) };
            }
        }
    });
}
exports.go = go;
function assert(condition, message) {
    if (!condition) {
        const errMsg = message ? `AssertionError: ${message}` : "AssertionError";
        throw new Error(errMsg);
    }
}
exports.assert = assert;
// TODO test
function newCoinMapFromCoins(coins) {
    const coinMap = {};
    for (const coin of coins) {
        coinMap[coin.denom] = parseInt(coin.amount);
    }
    return coinMap;
}
exports.newCoinMapFromCoins = newCoinMapFromCoins;
//# sourceMappingURL=types.js.map