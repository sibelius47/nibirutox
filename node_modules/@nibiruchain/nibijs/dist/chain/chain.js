"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isRestEndptLive = exports.queryChainIdWithRest = exports.Devnet = exports.IncentivizedTestent = exports.Localnet = exports.CustomChain = exports.instanceOfChain = void 0;
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const types_1 = require("./types");
/**
 * A function for strongly typing. Returns true if the input object satisfies
 * the Chain interface.
 */
function instanceOfChain(obj) {
    return ["endptTm", "endptRest", "chainId", "chainName", "feeDenom"].every((attr) => attr in obj);
}
exports.instanceOfChain = instanceOfChain;
/** CustomChain is a convenience class for intializing the endpoints of a chain
 * based on its chain ID.
 *
 * @example
 * ```ts
 * export const TEST_CHAIN = new CustomChain({
 *   prefix: "nibiru",
 *   shortName: "itn",
 *   number: 1,
 * }) // v0.19.2
 * ```
 */
class CustomChain {
    constructor(chainIdParts) {
        this.feeDenom = "unibi";
        this.initChainId = () => {
            const { prefix, shortName, number } = this.chainIdParts;
            return [prefix, shortName, number].join("-");
        };
        this.initTendermintEndpoint = () => {
            const { shortName, number } = this.chainIdParts;
            return `https://rpc.${shortName}-${number}.nibiru.fi`;
        };
        this.initRestEndpoint = () => {
            const { shortName, number } = this.chainIdParts;
            return `https://lcd.${shortName}-${number}.nibiru.fi`;
        };
        this.initGrpcEndpoint = () => {
            const { shortName, number } = this.chainIdParts;
            return `grpc.${shortName}-${number}.nibiru.fi`;
        };
        this.chainIdParts = chainIdParts;
        this.chainId = this.initChainId();
        this.chainName = this.chainId;
        this.endptTm = this.initTendermintEndpoint();
        this.endptRest = this.initRestEndpoint();
        this.endptGrpc = this.initGrpcEndpoint();
    }
}
exports.CustomChain = CustomChain;
exports.Localnet = {
    endptTm: "http://localhost:26657",
    endptRest: "http://localhost:1317",
    endptGrpc: "http://localhost:9090",
    chainId: "nibiru-localnet-0",
    chainName: "Nibiru Localnet (Default)",
    feeDenom: "unibi",
};
function IncentivizedTestent(chainNumber) {
    return new CustomChain({
        prefix: "nibiru",
        shortName: "itn",
        number: chainNumber,
    });
}
exports.IncentivizedTestent = IncentivizedTestent;
function Devnet(chainNumber) {
    return new CustomChain({
        prefix: "nibiru",
        shortName: "devnet",
        number: chainNumber,
    });
}
exports.Devnet = Devnet;
function queryChainIdWithRest(chain) {
    return __awaiter(this, void 0, void 0, function* () {
        const queryChainId = (chain) => __awaiter(this, void 0, void 0, function* () {
            const response = yield (0, cross_fetch_1.default)(`${chain.endptRest}/node_info`);
            const nodeInfo = yield response.json();
            return nodeInfo.node_info.network;
        });
        const { res: chainId, err } = yield (0, types_1.go)(queryChainId(chain));
        return [chainId !== null && chainId !== void 0 ? chainId : "", err];
    });
}
exports.queryChainIdWithRest = queryChainIdWithRest;
function isRestEndptLive(chain) {
    return __awaiter(this, void 0, void 0, function* () {
        const [_chainId, err] = yield queryChainIdWithRest(chain);
        return err === undefined;
    });
}
exports.isRestEndptLive = isRestEndptLive;
//# sourceMappingURL=chain.js.map