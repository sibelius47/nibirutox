"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFaucet = void 0;
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const chain_1 = require("./chain");
/**
 * Sends 10 NIBI and 100 NUSD to the given address from the testnet faucet.
 */
function useFaucet({ address, amts, chain, faucetUrl, }) {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
        amts = {
            nibi: (_a = amts === null || amts === void 0 ? void 0 : amts.nibi) !== null && _a !== void 0 ? _a : 11,
            nusd: (_b = amts === null || amts === void 0 ? void 0 : amts.nusd) !== null && _b !== void 0 ? _b : 100,
            usdt: (_c = amts === null || amts === void 0 ? void 0 : amts.usdt) !== null && _c !== void 0 ? _c : 100,
        };
        const micro = 1000000;
        const coins = [
            `${(micro * amts.nibi).toString()}unibi`,
            `${(micro * amts.nusd).toString()}unusd`,
            `${(micro * amts.usdt).toString()}uusdt`,
        ];
        if (chain !== undefined) {
            // deduce faucet URL from 'chain' if possible
            if (typeof chain === "string" || chain instanceof String) {
                const [outFaucetUrl, err] = faucetUrlFromEndpoint(chain);
                if (err)
                    throw err;
                faucetUrl = outFaucetUrl;
            }
            else if ((0, chain_1.instanceOfChain)(chain)) {
                const [outFaucetUrl, err] = faucetUrlFromChain(chain);
                if (err)
                    throw err;
                faucetUrl = outFaucetUrl;
            }
            else {
                throw TypeError("'chain' must be a string or Chain");
            }
        }
        else if (faucetUrl === undefined) {
            faucetUrl = "https://faucet.testnet-1.nibiru.fi/";
        }
        // Execute faucet request
        console.info(`Requesting funds from faucet @ ${faucetUrl}: 
    Coins: ${coins}
    Address: ${address}
    `);
        return (0, cross_fetch_1.default)(faucetUrl, {
            method: "POST",
            headers: {
                Accept: "application/json",
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ address, coins }),
        }).catch((err) => {
            console.error(err);
            throw err;
        });
    });
}
exports.useFaucet = useFaucet;
/** TODO doc */
function faucetUrlFromEndpoint(endptTm) {
    const endptTmParts = endptTm.split(".");
    let rpcIdx = -1;
    endptTmParts.forEach((part, idx) => {
        if (part.includes("rpc")) {
            rpcIdx = idx;
        }
    });
    if (rpcIdx === -1) {
        return [
            "https://faucet.testnet-1.nibiru.fi/",
            new Error(`failed to deduce chain name from Tendermint RPC endpoint: ${endptTm}`),
        ];
    }
    const chainIdx = rpcIdx + 1;
    const chainName = endptTmParts[chainIdx];
    const faucetUrl = `https://faucet.${chainName}.nibiru.fi/`;
    return [faucetUrl, undefined];
}
/** TODO doc */
function faucetUrlFromChain(chain) {
    return faucetUrlFromEndpoint(chain.endptTm);
}
//# sourceMappingURL=useFaucet.js.map