/**
 * A function for strongly typing errors. The errors given in
 * catch blocks are not typed by default. This means they may not
 * have the message and name attributes.
 *
 * @example
 * ```js
 * try { functionThatThrowsError() }
 * catch (err) {
 *   if (!instanceOfError(err)) {throw err};
 *   alert(err.message)
 * }
 * ```
 * @export
 * @param {*} obj
 * @returns {obj is Error}
 */
export declare function instanceOfError(obj: any): obj is Error;
export declare class ErrorTxSimulation extends Error {
    constructor(message: string, stack?: string);
}
export declare class ErrorTxBroadcast extends Error {
    constructor(message: string, stack?: string);
}
export declare const PerpErrors: {
    [key: string]: string;
};
/**
 * Makes sure one of the errors in 'errs' is contained in 'err'. If none of the
 * given exceptions are raised, it returns false.
 *
 * @param {string[]} errs
 * @param {Error} err
 */
export declare function raises(errs: string[], err: Error): boolean;
//# sourceMappingURL=error.d.ts.map