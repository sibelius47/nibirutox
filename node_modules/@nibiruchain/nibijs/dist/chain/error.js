"use strict";
// throw new Error()
// this.time = unixTs as UTCTimestamp
Object.defineProperty(exports, "__esModule", { value: true });
exports.raises = exports.PerpErrors = exports.ErrorTxBroadcast = exports.ErrorTxSimulation = exports.instanceOfError = void 0;
/**
 * A function for strongly typing errors. The errors given in
 * catch blocks are not typed by default. This means they may not
 * have the message and name attributes.
 *
 * @example
 * ```js
 * try { functionThatThrowsError() }
 * catch (err) {
 *   if (!instanceOfError(err)) {throw err};
 *   alert(err.message)
 * }
 * ```
 * @export
 * @param {*} obj
 * @returns {obj is Error}
 */
function instanceOfError(obj) {
    return ["message", "name"].every((attr) => attr in obj);
}
exports.instanceOfError = instanceOfError;
class ErrorTxSimulation extends Error {
    constructor(message, stack) {
        super(message);
        this.name = "ErrorTxSimulation";
        this.stack = stack !== null && stack !== void 0 ? stack : undefined;
    }
}
exports.ErrorTxSimulation = ErrorTxSimulation;
class ErrorTxBroadcast extends Error {
    constructor(message, stack) {
        super(message);
        this.name = "ErrorTxBroadcast";
        this.stack = stack !== null && stack !== void 0 ? stack : undefined;
    }
}
exports.ErrorTxBroadcast = ErrorTxBroadcast;
exports.PerpErrors = {
    positionNotFound: "collections: not found: 'nibiru.perp.v1.Position'",
    badDebt: "bad debt",
    underwaterPosition: "underwater position",
};
/**
 * Makes sure one of the errors in 'errs' is contained in 'err'. If none of the
 * given exceptions are raised, it returns false.
 *
 * @param {string[]} errs
 * @param {Error} err
 */
function raises(errs, err) {
    return errs.some((e) => err.message.includes(e));
}
exports.raises = raises;
//# sourceMappingURL=error.js.map