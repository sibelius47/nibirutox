/**
 * Specifies chain information for all endpoints a node exposes such as the
 * gRPC server, Tendermint RPC endpoint, and REST server.
 *
 * @see https://docs.cosmos.network/master/core/grpc_rest.html
 * @export
 * @interface Chain
 * @typedef {Chain}
 */
export interface Chain {
    /** endptTm: endpoint for the Tendermint RPC server. Usually on port 26657. */
    endptTm: string;
    /** endptRest: endpoint for the REST server. Also, the LCD endpoint. */
    endptRest: string;
    /** endptGrpc: endpoint for the gRPC gateway. Usually on port 9090. */
    endptGrpc: string;
    /** chainId: identifier for the chain */
    chainId: string;
    /** chainName: the name of the chain to display to the user */
    chainName: string;
    /** feeDenom: the denomination of the fee to be paid for transactions. */
    feeDenom: string;
}
/**
 * A function for strongly typing. Returns true if the input object satisfies
 * the Chain interface.
 */
export declare function instanceOfChain(obj: any): obj is Chain;
export interface ChainIdParts {
    prefix: string;
    shortName: string;
    number: number;
}
/** CustomChain is a convenience class for intializing the endpoints of a chain
 * based on its chain ID.
 *
 * @example
 * ```ts
 * export const TEST_CHAIN = new CustomChain({
 *   prefix: "nibiru",
 *   shortName: "itn",
 *   number: 1,
 * }) // v0.19.2
 * ```
 */
export declare class CustomChain implements Chain {
    readonly chainId: string;
    readonly chainName: string;
    readonly endptTm: string;
    readonly endptRest: string;
    readonly endptGrpc: string;
    readonly feeDenom: string;
    private readonly chainIdParts;
    constructor(chainIdParts: ChainIdParts);
    private initChainId;
    initTendermintEndpoint: () => string;
    initRestEndpoint: () => string;
    initGrpcEndpoint: () => string;
}
export declare const Localnet: Chain;
export declare function IncentivizedTestent(chainNumber: number): Chain;
export declare function Devnet(chainNumber: number): Chain;
export declare function queryChainIdWithRest(chain: Chain): Promise<[string, Error?]>;
export declare function isRestEndptLive(chain: Chain): Promise<boolean>;
//# sourceMappingURL=chain.d.ts.map