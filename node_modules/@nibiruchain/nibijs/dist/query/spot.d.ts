import { QueryClient } from "@cosmjs/stargate";
import * as qpb from "@nibiruchain/protojs/dist/spot/v1/query";
import { Coin } from "../chain";
export interface SpotExtension {
    spot: Readonly<{
        params: () => Promise<qpb.QueryParamsResponse>;
        poolNumber: () => Promise<qpb.QueryPoolNumberResponse>;
        pool: (poolId: number) => Promise<qpb.QueryPoolResponse>;
        pools: (pagination?: PageRequest) => Promise<qpb.QueryPoolsResponse>;
        poolParams: (poolId: number) => Promise<qpb.QueryPoolParamsResponse>;
        numPools: () => Promise<qpb.QueryNumPoolsResponse>;
        totalLiquidity: () => Promise<qpb.QueryTotalLiquidityResponse>;
        totalPoolLiquidity: (poolId: number) => Promise<qpb.QueryTotalPoolLiquidityResponse>;
        totalShares: (poolId: number) => Promise<qpb.QueryTotalSharesResponse>;
        spotPrice: (poolId: number, tokenInDenom: string, tokenOutDenom: string) => Promise<qpb.QuerySpotPriceResponse>;
        estimateSwapExactAmountIn: (poolId: number, tokeOutDenom: string, tokenIn?: Coin) => Promise<qpb.QuerySwapExactAmountInResponse>;
        estimateSwapExactAmountOut: (poolId: number, tokenInDenom: string, tokenOut?: Coin) => Promise<qpb.QuerySwapExactAmountOutResponse>;
        estimateJoinExactAmountIn: (poolId: number, tokensIn: Coin[]) => Promise<qpb.QueryJoinExactAmountInResponse>;
        estimateJoinExactAmountOut: (poolId: number) => Promise<qpb.QueryJoinExactAmountOutResponse>;
        estimateExitExactAmountIn: (poolId: number, poolSharesIn: number) => Promise<qpb.QueryExitExactAmountInResponse>;
        estimateExitExactAmountOut: (poolId: number) => Promise<qpb.QueryExitExactAmountOutResponse>;
    }>;
}
export declare function setupSpotExtension(base: QueryClient): SpotExtension;
/**
 * An offset pagination request.
 *
 * Pagination is the process of dividing a document into discrete pages.
 * Pagination in the context of API requests resembles this process.
 *
 * @export
 * @interface PageRequest
 * @typedef {PageRequest}
 */
export interface PageRequest {
    /**
     * key is a value returned in PageResponse.next_key to begin
     * querying the next page most efficiently. Only one of offset or key
     * should be set.
     */
    key: Uint8Array;
    /**
     * offset is a numeric offset that can be used when key is unavailable.
     * It is less efficient than using key. Only one of offset or key should
     * be set.
     */
    offset: number;
    /**
     * limit is the total number of results to be returned in the result page.
     * If left empty it will default to a value to be set by each app.
     */
    limit: number;
    /**
     * count_total is set to true  to indicate that the result set should include
     * a count of the total number of items available for pagination in UIs.
     * count_total is only respected when offset is used. It is ignored when key
     * is set.
     */
    countTotal: boolean;
    /**
     * reverse is set to true if results are to be returned in the descending order.
     *
     * Since: cosmos-sdk 0.43
     */
    reverse: boolean;
}
//# sourceMappingURL=spot.d.ts.map