/**
 * @fileoverview query extension for the "oracle" module
 */
import { QueryClient } from "@cosmjs/stargate";
import * as oraclequery from "@nibiruchain/protojs/dist/oracle/v1beta1/query";
import * as pbOracle from "@nibiruchain/protojs/dist/oracle/v1beta1/oracle";
export interface OracleExtension {
    oracle: Readonly<{
        /** actives: Query the list of active/whitelisted pairs for the oracle module. */
        actives: () => Promise<oraclequery.QueryActivesResponse>;
        /** aggregatePrevote: TODO Query outstanding oracle aggregate prevotes. */
        aggregatePrevote: (oracle: string) => Promise<pbOracle.AggregateExchangeRatePrevote | undefined>;
        /** aggregatePrevotes: TODO Query all aggregate prevotes. */
        aggregatePrevotes: () => Promise<pbOracle.AggregateExchangeRatePrevote[]>;
        /** aggregateVote: TODO Query outstanding oracle aggregate vote. */
        aggregateVote: (oracle: string) => Promise<pbOracle.AggregateExchangeRateVote | undefined>;
        /** aggregateVotes: TODO Query all aggregate votes. */
        aggregateVotes: () => Promise<pbOracle.AggregateExchangeRateVote[]>;
        /** exchangeRate: Returns the  current exchange rate that validators voted
         * for on the given 'pair'. */
        exchangeRate: (pair: string) => Promise<number>;
        /** TODO Query all exchange rates. */
        exchangeRates: () => Promise<ExchangeRatesMap>;
        /** feeder: Query for the feeder account to which the validator has
         * delegated the authority to vote on exchange rotes prices. */
        feeder: (oracle: string) => Promise<string>;
        /** TODO Query the miss count of a validator */
        missCount: (oracle: string) => Promise<number>;
        /** params: Returns the module parameters for the x/oracle module. */
        params: () => Promise<oraclequery.QueryParamsResponse>;
        /** voteTargets: Returns current vote targets, the list of pairs that
         * everyone should vote on in the during the vote period. */
        voteTargets: () => Promise<string[]>;
    }>;
}
interface ExchangeRatesMap {
    [pair: string]: number;
}
export declare function setupOracleExtension(base: QueryClient): OracleExtension;
export {};
//# sourceMappingURL=oracle.d.ts.map