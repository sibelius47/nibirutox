"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupVpoolExtension = void 0;
const stargate_1 = require("@cosmjs/stargate");
const vpoolquery = __importStar(require("@nibiruchain/protojs/dist/vpool/v1/query"));
const vpoolstate = __importStar(require("@nibiruchain/protojs/dist/vpool/v1/state"));
const chain_1 = require("../chain");
function setupVpoolExtension(base) {
    const rpcClient = (0, stargate_1.createProtobufRpcClient)(base);
    const queryService = new vpoolquery.QueryClientImpl(rpcClient);
    return {
        vpool: {
            allPools: () => __awaiter(this, void 0, void 0, function* () {
                const req = vpoolquery.QueryAllPoolsRequest.fromPartial({});
                const resp = yield queryService.AllPools(req);
                return transformAllPoolsResponse(resp);
            }),
            basePrice: (args) => __awaiter(this, void 0, void 0, function* () {
                const direction = args.goLong
                    ? vpoolstate.Direction.ADD_TO_POOL
                    : vpoolstate.Direction.REMOVE_FROM_POOL;
                const req = vpoolquery.QueryBaseAssetPriceRequest.fromPartial({
                    pair: args.pair,
                    direction,
                    baseAssetAmount: args.baseAssetAmount.toString(),
                });
                const resp = yield queryService.BaseAssetPrice(req);
                return resp;
            }),
            reserves: (args) => __awaiter(this, void 0, void 0, function* () {
                const req = vpoolquery.QueryReserveAssetsRequest.fromPartial({
                    pair: args.pair,
                });
                const resp = yield queryService.ReserveAssets(req);
                return {
                    baseAssetReserve: (0, chain_1.fromSdkDec)(resp.baseAssetReserve).toString(),
                    quoteAssetReserve: (0, chain_1.fromSdkDec)(resp.quoteAssetReserve).toString(),
                };
            }),
        },
    };
}
exports.setupVpoolExtension = setupVpoolExtension;
const transformAllPoolsResponse = (resp) => {
    const pools = resp.pools.map((vpool) => {
        const { config } = vpool;
        return {
            // ...vpool,
            pair: vpool.pair,
            baseAssetReserve: (0, chain_1.fromSdkDec)(vpool.baseAssetReserve).toString(),
            quoteAssetReserve: (0, chain_1.fromSdkDec)(vpool.quoteAssetReserve).toString(),
            config: config
                ? {
                    tradeLimitRatio: (0, chain_1.fromSdkDec)(config.tradeLimitRatio).toString(),
                    fluctuationLimitRatio: (0, chain_1.fromSdkDec)(config.fluctuationLimitRatio).toString(),
                    maxOracleSpreadRatio: (0, chain_1.fromSdkDec)(config.maxOracleSpreadRatio).toString(),
                    maintenanceMarginRatio: (0, chain_1.fromSdkDec)(config.maintenanceMarginRatio).toString(),
                    maxLeverage: (0, chain_1.fromSdkDec)(config.maxLeverage).toString(),
                }
                : undefined,
        };
    });
    const prices = resp.prices.map((pp) => (Object.assign(Object.assign({}, pp), { indexPrice: (0, chain_1.fromSdkDecSafe)(pp.indexPrice).toString(), twapMark: (0, chain_1.fromSdkDecSafe)(pp.twapMark).toString(), markPrice: (0, chain_1.fromSdkDec)(pp.markPrice).toString() })));
    return { pools, prices };
};
//# sourceMappingURL=vpool.js.map