"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupOracleExtension = void 0;
/**
 * @fileoverview query extension for the "oracle" module
 */
const stargate_1 = require("@cosmjs/stargate");
const oraclequery = __importStar(require("@nibiruchain/protojs/dist/oracle/v1beta1/query"));
const chain_1 = require("../chain");
function newExchangeRatesMap(resp) {
    const ratesMap = {};
    resp.exchangeRates.forEach((exchangeRateTuple) => {
        const { exchangeRate, pair } = exchangeRateTuple;
        ratesMap[pair] = (0, chain_1.fromSdkDec)(exchangeRate);
    });
    return ratesMap;
}
function setupOracleExtension(base) {
    const rpcClient = (0, stargate_1.createProtobufRpcClient)(base);
    const queryService = new oraclequery.QueryClientImpl(rpcClient);
    return {
        oracle: {
            actives: () => __awaiter(this, void 0, void 0, function* () {
                const req = oraclequery.QueryActivesRequest.fromPartial({});
                const resp = yield queryService.Actives(req);
                return resp;
            }),
            aggregatePrevote: (oracle) => __awaiter(this, void 0, void 0, function* () {
                const req = oraclequery.QueryAggregatePrevoteRequest.fromPartial({
                    validatorAddr: oracle,
                });
                const resp = yield queryService.AggregatePrevote(req);
                return resp.aggregatePrevote;
            }),
            aggregatePrevotes: () => __awaiter(this, void 0, void 0, function* () {
                const req = oraclequery.QueryAggregatePrevotesRequest.fromPartial({});
                const resp = yield queryService.AggregatePrevotes(req);
                return resp.aggregatePrevotes;
            }),
            aggregateVote: (oracle) => __awaiter(this, void 0, void 0, function* () {
                const req = oraclequery.QueryAggregateVoteRequest.fromPartial({
                    validatorAddr: oracle,
                });
                const resp = yield queryService.AggregateVote(req);
                return resp.aggregateVote;
            }),
            aggregateVotes: () => __awaiter(this, void 0, void 0, function* () {
                const req = oraclequery.QueryAggregateVotesRequest.fromPartial({});
                const resp = yield queryService.AggregateVotes(req);
                return resp.aggregateVotes;
            }),
            exchangeRate: (pair) => __awaiter(this, void 0, void 0, function* () {
                const req = oraclequery.QueryExchangeRateRequest.fromPartial({ pair });
                const resp = yield queryService.ExchangeRate(req);
                return (0, chain_1.fromSdkDec)(resp.exchangeRate);
            }),
            exchangeRates: () => __awaiter(this, void 0, void 0, function* () {
                const req = oraclequery.QueryExchangeRatesRequest.fromPartial({});
                const resp = yield queryService.ExchangeRates(req);
                const ratesMap = newExchangeRatesMap(resp);
                return ratesMap;
            }),
            feeder: () => __awaiter(this, void 0, void 0, function* () {
                const req = oraclequery.QueryFeederDelegationRequest.fromPartial({});
                const resp = yield queryService.FeederDelegation(req);
                return resp.feederAddr;
            }),
            missCount: () => __awaiter(this, void 0, void 0, function* () {
                const req = oraclequery.QueryMissCounterRequest.fromPartial({});
                const resp = yield queryService.MissCounter(req);
                return resp.missCounter.toNumber();
            }),
            params: () => __awaiter(this, void 0, void 0, function* () {
                const req = oraclequery.QueryParamsRequest.fromPartial({});
                const resp = yield queryService.Params(req);
                return resp;
            }),
            voteTargets: () => __awaiter(this, void 0, void 0, function* () {
                const req = oraclequery.QueryVoteTargetsRequest.fromPartial({});
                const resp = yield queryService.VoteTargets(req);
                return resp.voteTargets;
            }),
        },
    };
}
exports.setupOracleExtension = setupOracleExtension;
// type TransformFn<T> = (resp: T) => T
//# sourceMappingURL=oracle.js.map