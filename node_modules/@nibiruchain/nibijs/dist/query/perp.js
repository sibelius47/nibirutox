"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupPerpExtension = void 0;
const stargate_1 = require("@cosmjs/stargate");
const perpquery = __importStar(require("@nibiruchain/protojs/dist/perp/v1/query"));
const chain_1 = require("../chain");
function transformPosition(resp) {
    const { positionNotional: pn, unrealizedPnl: upnl, marginRatioMark: mr, marginRatioIndex: mri, } = resp;
    resp.positionNotional = (0, chain_1.fromSdkDec)(pn).toString();
    resp.unrealizedPnl = (0, chain_1.fromSdkDec)(upnl).toString();
    resp.marginRatioMark = (0, chain_1.fromSdkDec)(mr).toString();
    resp.marginRatioIndex = (0, chain_1.fromSdkDec)(mri).toString();
    return resp;
}
function setupPerpExtension(base) {
    const rpcClient = (0, stargate_1.createProtobufRpcClient)(base);
    const queryService = new perpquery.QueryClientImpl(rpcClient);
    return {
        perp: {
            params: () => __awaiter(this, void 0, void 0, function* () {
                const req = perpquery.QueryParamsRequest.fromPartial({});
                const resp = yield queryService.Params(req);
                function transformParams(pbParams) {
                    if (!pbParams) {
                        return pbParams;
                    }
                    return Object.assign(Object.assign({}, pbParams), { feePoolFeeRatio: (0, chain_1.fromSdkDec)(pbParams.feePoolFeeRatio).toString(), ecosystemFundFeeRatio: (0, chain_1.fromSdkDec)(pbParams.ecosystemFundFeeRatio).toString(), liquidationFeeRatio: (0, chain_1.fromSdkDec)(pbParams.liquidationFeeRatio).toString(), partialLiquidationRatio: (0, chain_1.fromSdkDec)(pbParams.partialLiquidationRatio).toString() });
                }
                resp.params = transformParams(resp.params);
                return resp;
            }),
            position: (args) => __awaiter(this, void 0, void 0, function* () {
                const req = perpquery.QueryPositionRequest.fromPartial(args);
                const resp = yield queryService.QueryPosition(req);
                return transformPosition(resp);
            }),
            positions: (args) => __awaiter(this, void 0, void 0, function* () {
                const req = perpquery.QueryPositionsRequest.fromPartial(args);
                const resp = yield queryService.QueryPositions(req);
                function transformPositions(resp) {
                    const { positions } = resp;
                    resp.positions = positions.map((position) => transformPosition(position));
                    return resp;
                }
                return transformPositions(resp);
            }),
            premiumFractions: (args) => __awaiter(this, void 0, void 0, function* () {
                const req = perpquery.QueryCumulativePremiumFractionRequest.fromPartial(args);
                const resp = yield queryService.CumulativePremiumFraction(req);
                const transformPremiumFractions = (resp) => {
                    const { cumulativePremiumFraction: cpf, estimatedNextCumulativePremiumFraction: nextCpf, } = resp;
                    return {
                        cumulativePremiumFraction: (0, chain_1.fromSdkDec)(cpf).toString(),
                        estimatedNextCumulativePremiumFraction: (0, chain_1.fromSdkDec)(nextCpf).toString(),
                    };
                };
                return transformPremiumFractions(resp);
            }),
            metrics: (args) => __awaiter(this, void 0, void 0, function* () {
                const req = perpquery.QueryMetricsRequest.fromPartial(args);
                const resp = yield queryService.Metrics(req);
                const transformMetrics = (resp) => {
                    if (!resp.metrics)
                        return resp;
                    const { volumeBase, volumeQuote, netSize } = resp.metrics;
                    return {
                        metrics: Object.assign(Object.assign({}, resp.metrics), { netSize: (0, chain_1.fromSdkDec)(netSize).toString(), volumeBase: (0, chain_1.fromSdkDec)(volumeBase).toString(), volumeQuote: (0, chain_1.fromSdkDec)(volumeQuote).toString() }),
                    };
                };
                return transformMetrics(resp);
            }),
        },
    };
}
exports.setupPerpExtension = setupPerpExtension;
//# sourceMappingURL=perp.js.map