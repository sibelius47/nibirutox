import { GeneratedType, OfflineSigner } from "@cosmjs/proto-signing";
import { SigningStargateClient, SigningStargateClientOptions } from "@cosmjs/stargate";
import { Tendermint34Client } from "@cosmjs/tendermint-rpc";
import { SigningCosmWasmClient, SigningCosmWasmClientOptions } from "@cosmjs/cosmwasm-stargate";
import { NibiruExtensions } from "../query/query";
export declare const nibiruRegistryTypes: ReadonlyArray<[string, GeneratedType]>;
export declare class NibiruSigningClient extends SigningStargateClient {
    readonly nibiruExtensions: NibiruExtensions;
    readonly wasmClient: SigningCosmWasmClient;
    static connectWithSigner(endpoint: string, signer: OfflineSigner, options?: SigningStargateClientOptions, wasmOptions?: SigningCosmWasmClientOptions): Promise<NibiruSigningClient>;
    protected constructor(tmClient: Tendermint34Client, signer: OfflineSigner, options: SigningStargateClientOptions, wasm: SigningCosmWasmClient);
    waitForHeight(height: number): Promise<void>;
    waitForNextBlock(): Promise<void>;
}
//# sourceMappingURL=signingClient.d.ts.map