import { DirectSecp256k1HdWallet, OfflineDirectSigner, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { Keplr } from "../wallet";
export declare enum BECH32_PREFIX {
    /** ADDR defines the Bech32 prefix of an account address */
    ADDR = "nibi",
    /** ADDR_VAL defines the Bech32 prefix of an validator's operator address */
    ADDR_VAL = "nibivaloper",
    /** ADDR_VALCONS defines the Bech32 prefix of a consensus node address */
    ADDR_VALCONS = "nibivalcons",
    /** PUB defines the Bech32 prefix of an account's public key */
    PUB = "nibipub",
    /** PUB_VAL defines the Bech32 prefix of an validator's operator public key */
    PUB_VAL = "nibivaloperpub",
    /** PUB_VALCONS defines the Bech32 prefix of a consensus node public key */
    PUB_VALCONS = "nibivalconspub"
}
export declare function getRegistry(): Registry;
/**
 * Creates a wallet from the given BIP39 mnemonic.
 *
 * @export
 * @param mnemonic
 * @param prefix - (optional) Bech32 address prefix. Defaults to "nibi".
 * @returns A wallet for protobuf based signing using SIGN_MODE_DIRECT
 */
export declare function newSignerFromMnemonic(mnemonic: string, prefix?: BECH32_PREFIX): Promise<DirectSecp256k1HdWallet>;
export declare function newSignerFromKeplr(keplr: Keplr, chainId: string): OfflineSigner & OfflineDirectSigner;
/**
 * Generates a new wallet with a BIP39 mnemonic of length 24.
 *
 * @export
 * @param length (optional) The number of words in the mnemonic (12, 15, 18, 21 or 24).
 * @param prefix - (optional) Bech32 address prefix. Defaults to "nibi".
 * @returns A wallet for protobuf based signing using SIGN_MODE_DIRECT.
 */
export declare function newRandomWallet(length?: 12 | 15 | 18 | 21 | 24, prefix?: BECH32_PREFIX): Promise<DirectSecp256k1HdWallet>;
export declare enum Signer {
    Keplr = "keplr",
    Direct = "direct"
}
//# sourceMappingURL=signer.d.ts.map